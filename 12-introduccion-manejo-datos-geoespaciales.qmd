# Introducción al manejo de datos geoespaciales con R

## Resumen
El lenguaje de programación R cuenta con una gran variedad de paquetes para manejo de datos geoespaciales, entre los que están el paquete sf para datos vectoriales, el paquete terra para datos raster y el paquete leaflet para mapas en la Web.

## Trabajo previo

### Lecturas
Lovelace, R., Nowosad, J., & Münchow, J. (2019). *Geocomputation with R* (capítulos 1 y 2). CRC Press. <https://geocompr.robinlovelace.net/>

## Introducción
La comunidad de programadores de R ha desarrollado un conjunto de paquetes para el manejo de datos geoespaciales, tanto en formatos vectoriales como raster. Algunos de los principales de estos paquetes son:

-   El paquete [sf](https://cran.r-project.org/web/packages/sf/). Ofrece un conjunto de funciones para el manejo de datos vectoriales, de acuerdo con el estándar [Simple Features](https://www.ogc.org/standards/sfa).

-   El paquete [terra](https://cran.r-project.org/web/packages/terra/). Implementa un conjunto de funciones para el manejo de datos raster. Es una reimplementación del paquete [raster](https://cran.r-project.org/web/packages/raster/).

-   El paquete [leaflet](https://cran.r-project.org/web/packages/leaflet/). Es una implementación en R de la biblioteca [Leaflet para el lenguaje JavaScript](https://leafletjs.com/) para la programación de mapas interactivos en páginas web.

Algunos paquetes de graficación estadística, como [ggplot2](https://cran.r-project.org/web/packages/ggplot2/) y [plotly](https://cran.r-project.org/web/packages/plotly/), también cuentan con capacidades para visualización de datos geoespaciales.

En [CRAN Task View: Analysis of Spatial Data](https://cran.r-project.org/web/views/Spatial.html), puede encontrarse un resumen detallado de los paquetes de R con funciones geoespaciales.

## Datos vectoriales

### El modelo vectorial
El modelo vectorial de datos está basado en puntos localizados en un [sistema de referencia de coordenadas (CRS)](https://en.wikipedia.org/wiki/Spatial_reference_system). Los puntos individuales pueden representar objetos independientes (ej. postes eléctricos, cabinas telefónicas) o pueden también agruparse para formar geometrías más complejas como líneas (ej. ríos, caminos) o polígonos (ej. fincas, países, provincias). Por lo general, los puntos tienen solo dos dimensiones (x, y), a las que se les puede agregar una tercera dimensión z, usualmente correspondiente a la altitud sobre el nivel del mar.

### El estándar Simple Features
[Simple Features](https://www.ogc.org/standards/sfa) (o Simple Feature Access) es un estándar abierto de la [Organización Internacional de Estandarización (ISO)](https://iso.org/) y del [Open Geospatial Consortium (OGC)](https://www.ogc.org/) que especifica un modelo común de almacenamiento y acceso para geometrías de dos dimensiones (líneas, polígonos, multilíneas, multipolígonos, etc.). El estándar es implementado por muchas bibliotecas y bases de datos geoespaciales como [sf](https://cran.r-project.org/web/packages/sf/), [Fiona](https://pypi.org/project/Fiona/), [GDAL](https://gdal.org/), [PostgreSQL/PostGIS](https://postgis.net/), [SQLite/SpatiaLite](https://www.gaia-gis.it/fossil/libspatialite/), [Oracle Spatial](https://www.oracle.com/database/technologies/spatialandgraph.html) y [Microsoft SQL Server](https://www.microsoft.com/en-us/sql-server/), entre muchas otras.

La especificación define 17 tipos de geometrías, de las cuales siete son las más comúnmente utilizadas. Estas últimas se muestran en la @fig-tipos-geometrias-simple-features.

```{r}
#| label: fig-tipos-geometrias-simple-features
#| fig.cap: Tipos de geometrías de Simple Features más usadas. Imagen de [Robin Lovelace et al.](https://geocompr.robinlovelace.net/spatial-class.html#vector-data).
#| echo: false

knitr::include_graphics(rep("img/tipos-geometrias-simple-features.png"))
```

### El paquete sf
El paquete [sf](https://r-spatial.github.io/sf/) (de *Simple Features*) de R implementa los modelos de datos de las geometrías de tipo vectorial: puntos, líneas, polígonos, sus versiones múltiples y las colecciones de geometrías. Está basado en bibliotecas de sofware ampliamente utilizadas en aplicaciones geoespaciales:

-   [Geospatial Data Abstraction Library (GDAL)](https://gdal.org/): es una biblioteca para leer y escribir datos geoespaciales en varios formatos [raster](https://gdal.org/drivers/raster/) y [vectoriales](https://gdal.org/drivers/vector/). Implementa un único [modelo abstracto de datos raster](https://gdal.org/user/raster_data_model.html) y un único [modelo abstracto de datos vectoriales](https://gdal.org/user/vector_data_model.html), lo que permite programar aplicaciones geoespaciales sin tener que ocuparse de las particularidades de cada formato que se utilice (GeoTIFF, NetCDF, ESRI Shapefile, GeoJSON, etc.). A pesar de que GDAL está programada en C/C++, cuenta con una interfaz de programación de aplicaciones (API) para varios lenguajes de programación, incluyendo [C](https://gdal.org/api/index.html#c-api), [C++](https://gdal.org/api/index.html#id3), [Python](https://gdal.org/python/index.html) y [Java](https://gdal.org/java/overview-summary.html). Además, ofrece un conjunto de [utilitarios de línea de comandos](https://gdal.org/programs/) cuyas [distribuciones binarias](https://gdal.org/download.html#binaries) están disponibles para varios sistemas operativos, incluyendo Windows, macOS y Linux.
-   [Geometry Engine, Open Source (GEOS)](https://trac.osgeo.org/geos): es una implementación en C++ de la biblioteca [JTS Topology Suite](http://www.tsusiatsoftware.net/jts/main.html) (desarrollada en Java) y que implementa un conjunto de operaciones y predicados geoespaciales (ej. unión, intersección, distancia, área).
-   [PROJ](https://proj.org/): es una biblioteca que transforma coordenadas entre diferentes CRS, incluyendo tanto proyecciones cartográficas como transformaciones geodésicas.

sf provee acceso, desde un mismo paquete de R, a la funcionalidad de estas tres bibliotecas, proporcionando así una interfaz unificada para leer y escribir datos geoespaciales mediante GDAL, realizar operaciones con geometrías mediante GEOS y efectuar transformaciones entre sistemas de coordenadas mediante PROJ.

En sf, los conjuntos de datos geoespaciales se almacenan en objetos de una clase también llamada [sf](https://rdrr.io/cran/sf/man/sf.html), los cuales son data frames que contiene una columna especial para las geometrías. Esta columna se denomina generalmente `geom` o `geometry` (aunque pueden tener cualquier otro nombre). El manejo de datos geoespaciales como data frames permite manipularlos con las funciones ya desarrolladas para este tipo de datos y con la misma forma de referenciar las filas (observaciones) y las columnas (variables).

#### Instalación y carga

```{r}
#| label: sf-instalacion
#| eval: false

# Instalación de sf
install.packages("sf")
```

```{r}
#| label: sf-carga
#| warning: false
#| message: false

# Carga de sf
library(sf)
```

#### Métodos
La lista de métodos (i.e. funciones) de la clase `sf` puede obtenerse a través de la función `methods()`:

```{r}
#| label: sf-metodos

# Métodos de la clase sf
methods(class = "sf")
```

Seguidamente, se describen y ejemplifican algunos de los métodos básicos de la clase `sf`.

##### st_read() - lectura de datos
El método [st_read()](https://r-spatial.github.io/sf/reference/st_read.html) lee datos vectoriales de una fuente en formato geoespacial (ej. shapefiles, archivos GeoJSON, bases de datos geoespaciales) y los recupera en un [objeto sf](https://r-spatial.github.io/sf/reference/sf.html).

En el siguiente bloque de código en R, se utiliza el método `st_read()` para leer un [archivo GeoJSON con los polígonos de las provincias de Costa Rica](datos/ign/delimitacion-territorial-administrativa/provincias.geojson). Este archivo proviene de un [geoservicio de tipo Web Feature Service (WFS)](http://geos.snitcr.go.cr/be/IGN_5/wfs) publicado por el Instituto Geográfico Nacional (IGN).

```{r}
#| label: st_read-geopespacial

# Lectura de una capa vectorial (GeoJSON) de provincias de Costa Rica
provincias <-
  st_read(
    "https://raw.githubusercontent.com/gf0604-procesamientodatosgeograficos/2023-i/main/datos/ign/delimitacion-territorial-administrativa/provincias.geojson",
    quiet = TRUE # para evitar el despliegue de mensajes
  )
```

`st_read()` también puede crear objetos `sf` a partir de archivos de texto. Esta variante se utiliza principalmente cuando el archivo contiene coordenadas correspondientes a geometrías de puntos.

En el siguiente bloque de código, se utiliza `st_read()` para leer un [archivo CSV con registros de presencia de felinos de Costa Rica](datos/gbif/felinos.csv), el cual contiene dos columnas llamadas `decimalLongitude` y `decimalLatitude` correspondientes a la longitud decimal y latitud decimal en las que fue observado cada felino. Este archivo proviene de una [consulta al portal de datos de la Infraestructura Mundial de Información en Biodiversidad (GBIF)](https://doi.org/10.15468/dl.nq74xg).

```{r}
#| label: st_read-texto

# Lectura de un archivo CSV con registros de presencia de felinos en Costa Rica
felinos <-
  st_read(
    "https://raw.githubusercontent.com/gf0604-procesamientodatosgeograficos/2023-i/main/datos/gbif/felinos.csv",
    options = c(
      "X_POSSIBLE_NAMES=decimalLongitude", # columna de longitud decimal
      "Y_POSSIBLE_NAMES=decimalLatitude"   # columna de latitud decimal
    ),
    quiet = TRUE
  )
```

Tanto `provincias` como `felinos` son objetos de la clase `sf` (y además de `data.frame`).

```{r}
#| label: clase

# Clase del objeto provincias
class(provincias)

# Clase del objeto felinos
class(felinos)
```

Al escribirse el nombre de un objeto `sf` en la consola de R, se despliega información general sobre este.

```{r}
#| label: consola-sf

# Información general sobre el objeto provincias
provincias
```

##### st_crs() y st_transform() - manejo de sistemas de coordenadas
El método [st_crs()](https://r-spatial.github.io/sf/reference/st_crs.html) retorna el CRS de un objeto `sf`.

```{r}
#| label: st_crs-1

# Despliegue del CRS del objeto provincias
st_crs(provincias)

# Despliegue CRS del objeto felinos
st_crs(felinos)
```

`st_crs()` también puede asignar un CRS a un objeto `sf` que no lo tiene.

```{r}
#| label: st_crs-2

# Asignación de un CRS al objeto felinos
st_crs(felinos) <- 4326
```

El método [st_transform()](https://r-spatial.github.io/sf/reference/st_transform.html) transforma un objeto `sf` a un nuevo CRS.

```{r}
#| label: st_transform

# Transformación del CRS del objeto provincias a WGS84 (EPSG = 4326)
provincias <-
  provincias |>
  st_transform(4326)
```

##### plot() - mapeo
El método [plot()](https://r-spatial.github.io/sf/reference/plot.html) grafica objetos `sf` en un mapa.

```{r}
#| label: sf-plot-01

# Mapeo de las geometrías del objeto provincias
plot(provincias$geometry)

# Mapeo con argumentos adicionales de plot()
plot(
  provincias$geometry,
  extent = st_bbox(c(xmin = -86.0, xmax = -82.3, ymin = 8.0, ymax = 11.3)),
  main = "Provincias de Costa Rica",
  axes = TRUE,
  graticule = TRUE
)
```

Los argumentos `reset` y `add` de `plot()` permiten generar un mapa con varias capas.

```{r}
#| label: sf-plot-02

# Primera capa del mapa
plot(
  provincias$geometry,
  extent = st_bbox(c(xmin = -86.0, xmax = -82.3, ymin = 8.0, ymax = 11.3)),
  main = "Registros de presencia de felinos en Costa Rica",
  axes = TRUE,
  graticule = TRUE,
  reset = FALSE
)

# Segunda capa
plot(felinos$geometry,
     add = TRUE,     
     pch = 16,
     col = "blue")
```

Para conocer los valores del argumento `pch`, puede consultar [R plot pch symbols](http://www.sthda.com/english/wiki/r-plot-pch-symbols-the-different-point-shapes-available-in-r).

##### st_write() - escritura de datos
El método [st_write()](https://r-spatial.github.io/sf/reference/st_write.html) guarda en el disco un objeto `sf` en los diferentes [formatos vectoriales de GDAL](https://gdal.org/drivers/vector/).

```{r}
#| label: st_write
#| eval: false

# Especificación del directorio de trabajo (debe utilizarse una ruta existente)
setwd("/home/mfvargas")

# Escritura del objeto provincias en formato GPKG
provincias |>
  st_write("provincias.gpkg")

# Escritura del objeto felinos en formato KML
felinos |>
  st_write("felinos.kml")
```

##### Otros

```{r}
#| label: sf-otros

# Cantidad de filas de un objeto sf
nrow(provincias)

# Cantidad de columnas de un objeto sf
ncol(provincias)

# Resumen de la columna de geometría
summary(provincias$geometry)
```

### Mapeo de objetos sf con otros paquetes

#### leaflet
El paquete [leaflet](https://rstudio.github.io/leaflet/) genera mapas interactivos en [lenguaje de marcado de hipertexto (HTML)](https://es.wikipedia.org/wiki/HTML), el lenguaje de marcado utilizado para desarrollar páginas web.

##### Instalación y carga

```{r}
#| label: leaflet-instalacion
#| eval: false

# Instalación de leaflet
install.packages("leaflet")

# Instalación de leaflet.extras (funciones adicionales de leaflet)
install.packages("leaflet.extras")

# Instalación de leaflem (funciones adicionales de leaflet)
install.packages("leafem")
```

```{r}
#| label: leaflet-carga
#| message: false

# Carga de leaflet
library(leaflet)

# Carga de leaflet.extras
library(leaflet.extras)

# Carga de leafem
library(leafem)
```

El siguiente bloque de código muestra las capas de provincias (polígonos) y de registros de presencia de felinos (puntos) sobre una capa base de [OpenStreetMap (OSM)](https://www.openstreetmap.org/) y otra de ESRI.

```{r}
#| label: leaflet-ejemplo
#| warning: false

# Mapa leaflet básico de provincias y registros de presencia de felinos
leaflet() |>
  setView(# centro y nivel inicial de acercamiento
    lng = -84.19452,
    lat = 9.572735,
    zoom = 7) |>
  addTiles(group = "Mapa general (OpenStreetMap)") |>
  addProviderTiles(
    providers$Esri.WorldImagery, 
    group = "Imágenes satelitales (ESRI World Imagery)"
  ) |>
  addPolygons(
    # capa de provincias (polígonos)
    data = provincias,
    color = "black",
    fillColor = "transparent",
    stroke = TRUE,
    weight = 1.0,
    group = "Provincias"
  ) |>
  addCircleMarkers(
    # capa de registros de presencia (puntos)
    data = felinos,
    stroke = F,
    radius = 4,
    fillColor = 'blue',
    fillOpacity = 1,
    popup = paste(
      paste0("<strong>Especie: </strong>", felinos$species),
      paste0("<strong>Localidad: </strong>", felinos$locality),
      paste0("<strong>Fecha: </strong>", felinos$eventDate),
      paste0("<strong>Fuente: </strong>", felinos$institutionCode),
      paste0("<a href='", felinos$occurrenceID, "'>Más información</a>"),
      sep = '<br/>'
    ),
    group = "Felinos"
  ) |>
  addLayersControl(
    baseGroups = c(
      "Mapa general (OpenStreetMap)", 
      "Imágenes satelitales (ESRI World Imagery)"
    ),
    overlayGroups = c("Provincias", "Felinos")) |> # control de capas
  addResetMapButton() |> # botón de reinicio
  addSearchOSM() |> # búsqueda en OSM
  addMouseCoordinates() |> # coordenadas del puntero del ratón
  addScaleBar(
    position = "bottomleft", 
    options = scaleBarOptions(imperial = FALSE)
  ) |> # barra de escala
  addMiniMap(position = "bottomright") |> # mapa de ubicación
  addFullscreenControl() # mapa de pantalla completa
```

### Ejercicios
1.  Agregue capas base adicionales al mapa anterior, con la función [leaflet::addProviderTiles()](https://rdrr.io/cran/leaflet/man/addProviderTiles.html) (vea [Leaflet for R - Using Basemaps](https://rstudio.github.io/leaflet/basemaps.html)).
2.  Agrupe los puntos correspondientes a los registros de presencia mediante la función `markerClusterOptions()` (vea [Leaflet for R - Markers](https://rstudio.github.io/leaflet/markers.html)).
3.  Genere una capa de calor ([*heat map*](https://es.wikipedia.org/wiki/Mapa_de_calor)) con la función [leaflet.extras::addHeatmap()](https://bhaskarvk.github.io/leaflet.extras/reference/heatmap.html).


