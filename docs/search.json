[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GF0604 Procesamiento de datos geográficos 2023-I",
    "section": "",
    "text": "Programa del curso\nLos siguientes documentos contienen el programa del curso, para los grupos 01 y 02, según el formato definido por la Escuela de Geografía de la Universidad de Costa Rica.\n\nGrupo 01\nGrupo 02\n\n\n\nVersiones anteriores del curso\nEste sitio web corresponde al curso impartido durante el primer lectivo de 2023. Para consultar las versiones de otros años y ciclos lectivos, puede visitar:\n\n2022-I\n2021-I\n2020-I\n\n\n\nInformación de contacto\nSi tiene alguna pregunta o comentario sobre este curso, por favor contacte a:\n\nManuel Vargas - manuel.vargas_d@ucr.ac.cr\nProfesor\nUniversidad de Costa Rica,\nCiudad Universitaria Rodrigo Facio,\nSan Pedro de Montes de Oca,\nCosta Rica.\n\nLos contenidos de este curso, a menos que se especifique de otra forma, se comparten mediante una licencia de Creative Commons Reconocimiento-CompartirIgual 4.0 Internacional."
  },
  {
    "objectID": "parte-i-introduccion-programacion_computadoras.html",
    "href": "parte-i-introduccion-programacion_computadoras.html",
    "title": "I - Introducción a la programación de computadoras",
    "section": "",
    "text": "2 Interacción humano-computadora\n3 GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos\n4 Reproducibilidad\n5 Markdown - lenguaje de marcado\n6 Git - sistema de control de versiones"
  },
  {
    "objectID": "01-pensamiento_computacional-arquitectura_computadoras-lenguajes_programacion.html",
    "href": "01-pensamiento_computacional-arquitectura_computadoras-lenguajes_programacion.html",
    "title": "1  Pensamiento computacional, arquitectura de computadoras y lenguajes de programación",
    "section": "",
    "text": "Una computadora es una máquina que ejecuta secuencias de instrucciones, llamadas programas. Los programas reciben datos de entrada, los procesan y generan salidas. Pueden modificarse sin necesidad de alterar los componentes físicos de la computadora.\nLas computadoras ayudan a resolver problemas de muy diversos tipos. El pensamiento computacional es un enfoque para la resolución de problemas basado en conceptos y métodos de las ciencias de la computación. Sus principios fundamentales son:\n\nDescomposición: división de un problema en subproblemas más pequeños.\nReconocimiento de patrones: búsqueda de similitudes en los problemas.\nAbstracción: identificación de la información que se necesita y filtrado de la que no se necesita para resolver un problema.\nAlgoritmos: descripción, paso por paso, de la solución a un problema.\n\nLas computadoras modernas están construídas con base en circuitos integrados (CI), también llamados chips o microchips. Los CI procesan información digital (que usa valores discretos), la cual generalmente es binaria (i.e. de dos valores). Los CI de una computadora procesan dos estados correspondientes a dos niveles de tensión eléctrica: alto y bajo. Estos estados se representan con 0 y 1. Esto facilita la aplicación de la lógica binaria y de la aritmética binaria.\nDurante el período entre las guerras mundiales, Allan Turing desarrolló la máquina de Turing, un dispositivo teórico que manipula símbolos de una cinta de acuerdo con una tabla de reglas. La máquina de Turing simula el funcionamiento de un algoritmo y los conceptos de entrada, procesamiento y salida. En 1945, John von Neumann propuso un concepto conocido como programa almacenado, en el cual los datos y los programas se almacenan en una estructura llamada memoria, separada del hardware que ejecuta las instrucciones. Este esquema permite que las computadoras sean más fáciles de reprogramar y es conocido actualmente como arquitectura de von Neumann.\nEl lenguaje máquina es un conjunto de instrucciones binarias interpretables por la unidad central de procesamiento (CPU) de una computadora. Cada CPU tiene su propio lenguaje máquina. Un programa consiste de una secuencia de instrucciones en lenguaje máquina.\nDebido a que programar una computadora en lenguaje máquina es excesivamente lento y complicado, en la década de 1950 comenzaron a crearse lenguajes de programación que, en lugar de unos y ceros, consisten de instrucciones formadas por palabras, usualmente en idioma inglés. Existe una gran variedad de lenguajes de programación que han sido creados con diversos fines: científicos, comerciales, educacionales y otros.\nScratch es un lenguaje de programación orientado a educación. Fue desarrollado en 2003 por el MIT Media Lab y es administrado por la Fundación Scratch, una organización sin fines de lucro que lo facilita de manera gratuita."
  },
  {
    "objectID": "01-pensamiento_computacional-arquitectura_computadoras-lenguajes_programacion.html#trabajo-previo",
    "href": "01-pensamiento_computacional-arquitectura_computadoras-lenguajes_programacion.html#trabajo-previo",
    "title": "1  Pensamiento computacional, arquitectura de computadoras y lenguajes de programación",
    "section": "1.2 Trabajo previo",
    "text": "1.2 Trabajo previo\n\n1.2.1 Lecturas\nWing, J. M. (2006). Computational thinking. Communications of the ACM, 49(3), 33-35. https://doi.org/10.1145/1118178.1118215"
  },
  {
    "objectID": "01-pensamiento_computacional-arquitectura_computadoras-lenguajes_programacion.html#diapositivas",
    "href": "01-pensamiento_computacional-arquitectura_computadoras-lenguajes_programacion.html#diapositivas",
    "title": "1  Pensamiento computacional, arquitectura de computadoras y lenguajes de programación",
    "section": "1.3 Diapositivas",
    "text": "1.3 Diapositivas\nPensamiento computacional, arquitectura de computadoras y lenguajes de programación"
  },
  {
    "objectID": "02-interaccion_humano_computadora.html",
    "href": "02-interaccion_humano_computadora.html",
    "title": "2  Interacción humano-computadora",
    "section": "",
    "text": "Los humanos interactúan con las computadoras a través de interfaces de tres tipos:\n\nInterfaces de línea de comandos: aceptan líneas de texto correspondientes a comandos o instrucciones.\nInterfaces gráficas de usuario: utilizan objetos gráficos para representar las acciones y la información disponibles en la interfaz.\nInterfaces naturales de usuario: la interacción se realiza a través de movimientos, gestos o voz.\n\nLas interfaces gráficas de usuario y las interfaces naturales de usuario son más intuitivas para los usuarios finales. Sin embargo, las interfaces de línea de comandos son más versátiles y facilitan el desarrollo de soluciones más reproducibles."
  },
  {
    "objectID": "02-interaccion_humano_computadora.html#introducción",
    "href": "02-interaccion_humano_computadora.html#introducción",
    "title": "2  Interacción humano-computadora",
    "section": "2.2 Introducción",
    "text": "2.2 Introducción\nLa interacción humano-computadora (IHC) es un área de investigación dedicada al diseño y uso de la tecnología computacional. Esta interacción se realiza a través de interfaces. La IHC se sitúa en la intersección de varias disciplinas que incluyen ciencias de la computación, ciencias de la conducta, diseño y estudios de medios, entre otras. Los investigadores de IHC estudian la manera en la que los humanos interactúan con las computadoras y diseñan tecnologías para mejorar esa interacción.\nLa IHC enfatiza que, a diferencia de otras máquinas y herramientas con usos más limitados, las computadoras tienen aplicaciones muy diversas que implican un “diálogo” más complejo con los usuarios."
  },
  {
    "objectID": "02-interaccion_humano_computadora.html#interfaces-de-usuario",
    "href": "02-interaccion_humano_computadora.html#interfaces-de-usuario",
    "title": "2  Interacción humano-computadora",
    "section": "2.3 Interfaces de usuario",
    "text": "2.3 Interfaces de usuario\nLa interfaz de usuario es el medio con el que el usuario puede comunicarse con una computadora (o, en general, con cualquier máquina o dispositivo). Las interfaces de usuario se diseñan para que sean fáciles de entender y de utilizar.\nLas interfaces de usuario pueden clasificarse en tres tipos:\n\nInterfaces de línea de comandos (CLI, del inglés, command-line interface).\nInterfaces gráficas de usuario (GUI, del inglés, graphical user interface).\nInterfaces naturales de usuario (NUI, del inglés, natural user interface).\n\nLa evolución de estos tipos de interfaces se ilustra en la Figura 2.1.\n\n\n\n\n\nFigura 2.1: Evolución de las interaces de usuario. Imagen de Marcecoro compartida a través de Wikimedia Commons.\n\n\n\n\n\n2.3.1 Interfaces de línea de comandos\nLas interfaces de línea de comandos (CLI) permiten a los usuarios dar indicaciones a la computadora por medio de líneas de texto correspondientes a comandos o instrucciones. Los comandos pueden introducirse interactivamente en algún tipo de entrada de texto (ej. el prompt de un sistema operativo) o, de manera más automatizada, a través de un archivo (ej. un script). La Figura 2.2 muestra la terminal del sistema operativo Ubuntu, como un ejemplo de CLI.\n\n\n\n\n\nFigura 2.2: Terminal del sistema operativo Ubuntu (Linux).\n\n\n\n\nEste tipo de interfaz existe casi desde los inicios de la computación y es superada en antigüedad solo por las tarjetas perforadas y otros mecanismos similares.\nLas CLI tienen la ventaja de que facilitan el desarrollo de procedimientos reproducibles y repetibles. Por otro lado, puede ser más complejas, especialmente para usuarios no experimentados.\n\n\n2.3.2 Interfaces gráficas de usuario\nLas interfaces gráficas de usuario (GUI) utilizan imágenes y otros objetos gráficos (ej. iconos) para representar la información y las acciones disponibles en la interfaz. Surgieron como una evolución de las CLI. Por ejemplo, muchos sistemas operativos desarrollaron primero sus CLI y luego GUI que permiten realizar acciones equivalentes a los comandos de las CLI. La Figura 2.3 muestra la interfaz gráfica del sistema operativo Ubuntu (Linux).\n\n\n\n\n\nFigura 2.3: Interfaz gráfica GNOME del sistema operativo Ubuntu (Linux).\n\n\n\n\nComo un precursor de las actuales GUI, suele mencionarse una interfaz de hipervículos desarrollada en el Stanford Research Institute, en la década de 1960 (se recomienda ver The Mother of All Demos, presented by Douglas Engelbart (1968)). Este concepto fue ampliado y trasladado a un entorno gráfico por los investigadores del Xerox PARC, en Palo Alto. Ahí se introdujeron conceptos como ventanas, casillas de verificación (checkboxes), botones de radio, menús y puntero del ratón. La interfaz fue implementada comercialmente en el computador Xerox Star 8010, en 1981.\nLas GUI son más amigables e intuitivas que las CLI, pero también pueden ser menos versátiles y menos aptas para reproducir procedimientos.\n\n\n2.3.3 Interfaces naturales de usuario\nEn las interfaces naturales de usuario (NUI), este interactúa con la computadora sin utilizar dispositivos como el ratón o el teclado, sino a través de movimientos, gestos o la voz, como en el caso de las pantallas multitáctiles o del control por reconocimiento del habla. Las NUI no requieren que el usuario aprenda el uso de nuevas tecnologías, ya que puede emplear habilidades ya conocidas. La Figura 2.4 muestra la consola de videojuegos Xbox 360 S, como un ejemplo de dispositivo con NUI.\n\n\n\n\n\nFigura 2.4: Consola Xbox 360 S. Imagen de James Pfaff (litheon) compartida a través de Wikimedia Commons."
  },
  {
    "objectID": "02-interaccion_humano_computadora.html#recursos-de-interés",
    "href": "02-interaccion_humano_computadora.html#recursos-de-interés",
    "title": "2  Interacción humano-computadora",
    "section": "2.4 Recursos de interés",
    "text": "2.4 Recursos de interés\nMarcel. (2012). The Mother of All Demos, presented by Douglas Engelbart (1968). https://www.youtube.com/watch?v=yJDv-zdhzMY"
  },
  {
    "objectID": "03-gdal.html",
    "href": "03-gdal.html",
    "title": "3  GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos",
    "section": "",
    "text": "Geospatial Data Abstraction Library (GDAL) es una biblioteca, desarrollada en C/C++, para la escritura y lectura de datos geoespaciales, tanto raster como vectoriales. Ha sido traducida a otros lenguajes de programación como Java, Python y R. Es utilizada en una gran cantidad de aplicaciones de escritorio, aplicaciones web y bibliotecas para programación. Además, incluye un conjunto de programas que pueden ejecutarse desde la línea de comandos de varios sistemas operativos.\nGDAL implementa un único modelo abstracto de datos raster y un único modelo abstracto de datos vectoriales, lo que permite programar aplicaciones geoespaciales sin tener que ocuparse de las particularidades de cada formato (GeoTIFF, NetCDF, ESRI Shapefile, GeoPackage, GeoJSON, GeoParquet, WMS, WFS, etc.)."
  },
  {
    "objectID": "03-gdal.html#trabajo-previo",
    "href": "03-gdal.html#trabajo-previo",
    "title": "3  GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos",
    "section": "3.2 Trabajo previo",
    "text": "3.2 Trabajo previo\n\n3.2.1 Lecturas\nPebesma, E., Wagner, W., Verbesselt, J., Goor, E., Briese, C., & Neteler, M. (2016). OpenEO: a GDAL for Earth Observation Analytics. https://r-spatial.org/2016/11/29/openeo.html\n\n\n3.2.2 Tutoriales\nGandhi, U. (2020). Mastering GDAL Tools. Spatial Thoughts. https://spatialthoughts.com/courses/mastering-gdal-tools/"
  },
  {
    "objectID": "03-gdal.html#introducción",
    "href": "03-gdal.html#introducción",
    "title": "3  GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos",
    "section": "3.3 Introducción",
    "text": "3.3 Introducción\nGeospatial Data Abstraction Library (GDAL) es una biblioteca para leer y escribir datos geoespaciales en formatos raster y vectoriales. GDAL implementa, entre otras capacidades:\n\nConversiones entre formatos.\nReproyecciones entre sistemas de coordenadas.\nConsultas no espaciales (i.e. en atributos numéricos y textuales).\nConsultas espaciales (cercanía, adyacencia, contención, intersección, etc.).\nFiltrado y agrupación de datos.\nVerificación y corrección de geometrías.\n\nEl manejo de datos vectoriales se implementa en la biblioteca asociada OGR (sigla antes usada para OpenGIS Simple Features Reference Implementation), cuyo código fuente se distribuye conjuntamente con el de GDAL. Por este motivo, a GDAL también se le conoce como GDAL/OGR, en donde GDAL se refiere a la funcionalidad para datos raster y OGR a la funcionalidad para datos vectoriales. En este documento, se utiliza la sigla GDAL para referirse a ambas bibliotecas.\nGDAL utiliza un único modelo abstracto de datos raster y un único modelo abstracto de datos vectoriales, lo que permite programar aplicaciones geoespaciales sin tener que ocuparse de las particularidades de cada formato (GeoTIFF, NetCDF, ESRI Shapefile, GeoPackage, GeoJSON, GeoParquet, WMS, WFS, etc.).\nA pesar de que GDAL está programada en los lenguajes C y C++, cuenta con una interfaz de programación de aplicaciones (API, en inglés, Application Programming Interface) para varios lenguajes de programación incluyendo, además de C y C++, Python, Java y otros. En R, paquetes como sf y terra utilizan el código fuente que comparte GDAL. En esta lista de sofware puede apreciarse la gran cantidad de aplicaciones de escritorio, aplicaciones web y bibliotecas para programación que aprovechan la funcionalidad de GDAL.\nAdemás, GDAL incluye un conjunto de programas para la línea de comandos del sistema operativo cuyas distribuciones binarias están disponibles para varios sistemas operativos, incluyendo Windows, macOS y Linux. Estas API y los programas también están incluídos en la plataforma de ciencia de datos Anaconda, la cual puede instalarse en todos los sistemas operativos mencionados.\nGDAL es distribuida por la Open Source Geospatial Foundation (OSGeo) con una licencia X/MIT."
  },
  {
    "objectID": "03-gdal.html#programas-para-la-línea-de-comandos-del-sistema-operativo",
    "href": "03-gdal.html#programas-para-la-línea-de-comandos-del-sistema-operativo",
    "title": "3  GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos",
    "section": "3.4 Programas para la línea de comandos del sistema operativo",
    "text": "3.4 Programas para la línea de comandos del sistema operativo\nLos programas de GDAL para la línea de comandos del sistema operativo permiten ejecutar tareas de geoprocesamiento y de conversión entre formatos geoespaciales sin utilizar una interfaz gráfica o un lenguaje de programación. Seguidamente, se listan algunos de estos programas.\nProgramas para datos raster\n\ngdalinfo: despliega información sobre un conjunto de datos raster.\ngdaldem: herramientas para visualizar y analizar modelos digitales de elevación.\ngdal_translate: realiza conversiones entre formatos raster.\ngdalwarp: reproyecta datos raster y realiza otras conversiones.\ngdal_calc.py: calculadora de álgebra raster.\n\nProgramas para datos vectoriales\n\nogrinfo: despliega información sobre un conjunto de datos vectorial.\nogr2ogr: realiza conversiones en conjuntos de datos vectoriales (ej. filtros, reproyecciones).\nogrmerge.py: une varios conjuntos de datos raster en uno solo.\nogr_layer_algebra.py: realiza operaciones de álgebra vectorial.\n\nLos programas se ejecutan escribiendo el nombre del programa y un conjunto de opciones que especifican, entre otros aspectos, la ubicación de los datos de entrada, de salida y las transformaciones a realizar. Por ejemplo, el siguiente comando convierte un archivo en formato ESRI Shapefile a GeoJSON y lo reproyecta de CRTM05 a WGS84:\nogrinfo -s_srs EPSG:5367 -t_srs EPSG:4326 provincias.geojson provincias.shp\n\n3.4.1 Comandos básicos del sistema operativo\nLa siguiente lista presenta algunos comandos básicos de sistemas operativos.\n\n3.4.1.1 Windows\n\n\n\n\n\n\nComando\n\n\nDescripción\n\n\nEjemplos\n\n\n\n\n\n\ndir\n\n\nListado de contenidos de un directorio\n\n\ndirdir /wdir /p\n\n\n\n\ncd\n\n\nCambio de directorio\n\n\ncd gf0604\\ejemplos-gdalcd c:\\gf0604\\ejemplos-gdal\n\n\n\n\ncd ..\n\n\nCambio al directorio padre\n\n\ncd ..\n\n\n\n\ncd \\\n\n\nCambio al directorio raíz\n\n\ncd \\\n\n\n\n\nmkdir\n\n\nCreación de un directorio\n\n\nmkdir mi-directorio\n\n\n\n\nrmdir\n\n\nBorrado de un directorio\n\n\nrmdir /s mi-directorio\n\n\n\n\ntype\n\n\nDespliegue de los contenidos de un archivo de texto\n\n\ntype mi-archivo.txt\n\n\n\n\ndel\n\n\nBorrado de un archivo\n\n\ndel mi-archivo.txt\n\n\n\n\n> salida.txt\n\n\nRedireccionamiento de la salida\n\n\ndir /b > directorio.txt\n\n\n\n\ncls\n\n\nBorrado de la pantalla\n\n\ncls\n\n\n\n\n\n\n\n\n3.4.2 Instalación\nEn el sitio web de GDAL se describen varias opciones para la descarga e instalación de los programas para la línea de comandos del sistema operativo, incluyendo archivos binarios ejecutables para varias plataformas.\nEn el caso del sistema operativo Windows, estos programas se incluyen en la aplicación OSGeo4W, la cual puede instalarse junto con el sistema de información geográfica de escritorio QGIS. Se recomienda usar el instalador de red OSGeo4W. Una vez finalizada la instalación, verifique que cuenta con la aplicación OSGeo4W Shell para ejecutar los programas desde la línea de comandos del sistema operativo.\n\n\n3.4.3 Opciones comunes\nLos programas de GDAL comparten una serie de opciones comunes para datos raster y de opciones comunes para datos vectoriales que pueden visualizarse con la opción -- help-general. Por ejemplo:\nogrinfo --help-general\nGeneric GDAL utility command options:\n  --version: report version of GDAL in use.\n  --license: report GDAL license info.\n  --formats: report all configured format drivers.\n  --format [format]: details of one format.\n  --optfile filename: expand an option file into the argument list.\n  --config key value: set system configuration option.\n  --debug [on/off/value]: set debug level.\n  --pause: wait for user input, time to attach debugger\n  --locale [locale]: install locale for debugging (i.e. en_US.UTF-8)\n  --help-general: report detailed help on general options.\nPara obtener ayuda acerca de un comando particular, puede usarse la opción -- help. Por ejemplo:\nogrinfo --help\nUsage: ogrinfo [--help-general] [-ro] [-q] [-where restricted_where|@filename]\n               [-spat xmin ymin xmax ymax] [-geomfield field] [-fid fid]\n               [-sql statement|@filename] [-dialect sql_dialect] [-al] [-rl] [-so] [-fields={YES/NO}]\n               [-geom={YES/NO/SUMMARY}] [[-oo NAME=VALUE] ...]\n               [-nomd] [-listmdd] [-mdd domain|`all`]*\n               [-nocount] [-noextent] [-nogeomtype] [-wkt_format WKT1|WKT2|...]\n               [-fielddomain name]\n               datasource_name [layer [layer ...]]\n\n\n3.4.4 Ejemplos de uso\nEn esta sección, se presentan ejemplos de uso de los programas, tanto para datos vectoriales como para datos raster.\n\n3.4.4.1 Programas para datos vectoriales\n\n3.4.4.1.1 ogrinfo\nEl programa ogrinfo despliega información acerca de una fuente de datos vectoriales.\nLos siguientes comandos despliegan información sobre la capa de países de Natural Earth, tanto para el formato comprimido (ZIP) como para el formato shapefile (SHP). En el caso comprimido, note el uso del prefijo /vsizip/, para sistemas de archivos virtuales.\n\nCree un nuevo directorio (ej. ejemplos-gdal) para almacenar los archivos con los que trabajará.\nDescargue en el nuevo directorio la capa de paises desde la dirección https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/110m/cultural/ne_110m_admin_0_countries.zip.\nDescomprima el archivo ZIP (no lo borre).\nCon una herramienta de escritorio (ej. QGIS), visualice tanto el archivo ZIP como el SHP.\nDesde una interfaz de línea de comandos (ej. OSGeo4W Shell), ubíquese en el directorio que creó y ejecute los siguientes comandos para obtener información sobre ambos archivos:\n\n# Información sobre la capa descomprimida en formato shapefile\nogrinfo -al -so ne_110m_admin_0_countries.shp\n\n# Información sobre la capa comprimida en formato ZIP\nogrinfo -al -so /vsizip/ne_110m_admin_0_countries.zip\n¿Qué información despliegan ambos comandos? ¿Qué efectos produce el uso de las opciones -al y -so? Revise la documentación sobre estas opciones y pruebe los comandos omitiendo cada una y ambas.\n\nFiltre los registros con expresiones lógicas (booleanas).\n\n# Registros (países y otros territorios) del continente 'Oceania' (se omite el campo de la geometría)\nogrinfo -al -where \"CONTINENT='Oceania'\" -geom=NO ne_110m_admin_0_countries.shp\n\n# Registros de Oceanía de tipo país ('Country')\nogrinfo -al -where \"CONTINENT='Oceania' AND TYPE='Country'\" -geom=NO ne_110m_admin_0_countries.shp\nNote el uso del operador AND (y), el cuál es un operador lógico, como también lo son el OR (o) y el NOT (no).\n\nAplique los filtros anteriores desde la interfaz de QGIS y compare las ventajas y desventajas de cada enfoque.\n\n\n\n3.4.4.1.2 ogr2ogr\nEl programa ogr2ogr realiza conversiones entre formatos de fuentes de datos vectoriales. A la vez, puede ejecutar otras operaciones como selección de atributos y geometrías, filtrado por criterios espaciales y no espaciales, reproyección y validación de geometrías, entre otras.\n\nDespliegue la lista de formatos (drivers) vectoriales soportados por OGR:\n\n# Despliegue de la lista de formatos vectoriales soportados por GDAL/OGR\nogr2ogr --formats\nSupported Formats:\n  FITS -raster,vector- (rw+): Flexible Image Transport System\n  PCIDSK -raster,vector- (rw+v): PCIDSK Database File\n  netCDF -raster,multidimensional raster,vector- (rw+vs): Network Common Data Format\n  PDS4 -raster,vector- (rw+vs): NASA Planetary Data System 4\n  VICAR -raster,vector- (rw+v): MIPL VICAR file\n  JP2OpenJPEG -raster,vector- (rwv): JPEG-2000 driver based on OpenJPEG library\n  PDF -raster,vector- (rw+vs): Geospatial PDF\n  MBTiles -raster,vector- (rw+v): MBTiles\n  BAG -raster,multidimensional raster,vector- (rw+v): Bathymetry Attributed Grid\n  EEDA -vector- (ro): Earth Engine Data API\n  OGCAPI -raster,vector- (rov): OGCAPI\n  ESRI Shapefile -vector- (rw+v): ESRI Shapefile\n...\n\nEjecute los siguientes comandos para convertir la capa de países (en SHP) a otros formatos y cambiar su nombre:\n\n# Conversión de SHP a GeoJSON\nogr2ogr paises.geojson ne_110m_admin_0_countries.shp\n\n# Conversión de SHP a GeoPackage\nogr2ogr paises.gpkg ne_110m_admin_0_countries.shp\n\nDespliegue la lista de capas en el servicio WFS del Sistema Nacional de Áreas de Conservación (Sinac):\n\n# Lista de capas en el servicio WFS del Sinac\nogrinfo WFS:\"http://geos1pne.sirefor.go.cr/wfs\"\nINFO: Open of `WFS:http://geos1pne.sirefor.go.cr/wfs'\n      using driver `WFS' successful.\nMetadata:\n  ABSTRACT=Servicio de mapas de Patrimonio Natural del Estado.\n  PROVIDER_NAME=The ancient geographes INC\n  TITLE=PNE Web Map Service\n1: PNE:bosque_decidio (title: Bosque Deciduo)\n2: PNE:bosque_maduro (title: Bosque Maduro)\n3: PNE:bosque_secundario (title: Bosque Secundario)\n4: PNE:bosque_palmas (title: Bosque de Palmas)\n5: PNE:corredoresbiologicos (title: Corredores Biológicos)\n6: PNE:patrimonio_natural_del_estado (title: Patrimonio Natural del Estado)\n7: PNE:registro_nacional_humedales (title: Registro Nacional de Humedales)\n8: PNE:areas_silvestres_protegidas (title: Áreas Silvestres Protegidas)\n9: PNE:areas_conservacion (title: Áreas de Conservación)\n\nDescargue la capa de áreas silvestres protegidas (ASP) del servicio WFS del Sinac en formato GeoPackage:\n\n# Descarga y validación de geometrías\nogr2ogr -makevalid asp.gpkg WFS:\"http://geos1pne.sirefor.go.cr/wfs\" \"PNE:areas_silvestres_protegidas\"\n\n# Descarga, validación de geometrías y reproyección a WGS84\nogr2ogr -t_srs EPSG:4326 -makevalid asp-wgs84.gpkg WFS:\"http://geos1pne.sirefor.go.cr/wfs\" \"PNE:areas_silvestres_protegidas\"\n\n\n\n3.4.4.2 Programas para datos raster\n\n3.4.4.2.1 gdalinfo\nEl programa gdalinfo despliega información acerca de una fuente de datos raster.\nLos siguientes comandos trabajan con la capa global de altitud de la base de datos climática WorldClim.\n\nDescargue en su directorio de trabajo la capa de altitud, con resolución de 30 segundos. Si la descarga toma demasiado tiempo, puede utilizar otras resoluciones: 2.5 min, 5 min o 10 min.\nDescomprima el archivo ZIP.\nCon una herramienta de escritorio (ej. QGIS), visualice la capa descomprimida.\nDesde una interfaz de línea de comandos (ej. OSGeo4W Shell), ubíquese en su directorio de trabajo y ejecute los siguientes comandos para obtener información sobre la capa:\n\n# Información sobre la capa\ngdalinfo -stats wc2.1_30s_elev.tif\nDriver: GTiff/GeoTIFF\nFiles: wc2.1_30s_elev.tif\nSize is 43200, 21600\nCoordinate System is:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\nData axis to CRS axis mapping: 2,1\nOrigin = (-180.000000000000000,90.000000000000000)\nPixel Size = (0.008333333333333,-0.008333333333333)\nMetadata:\n  AREA_OR_POINT=Area\nImage Structure Metadata:\n  COMPRESSION=DEFLATE\n  INTERLEAVE=BAND\nCorner Coordinates:\nUpper Left  (-180.0000000,  90.0000000) (180d 0' 0.00\"W, 90d 0' 0.00\"N)\nLower Left  (-180.0000000, -90.0000000) (180d 0' 0.00\"W, 90d 0' 0.00\"S)\nUpper Right ( 180.0000000,  90.0000000) (180d 0' 0.00\"E, 90d 0' 0.00\"N)\nLower Right ( 180.0000000, -90.0000000) (180d 0' 0.00\"E, 90d 0' 0.00\"S)\nCenter      (   0.0000000,   0.0000000) (  0d 0' 0.01\"E,  0d 0' 0.01\"N)\nBand 1 Block=43200x1 Type=Int16, ColorInterp=Gray\n  Min=-415.000 Max=8424.000 \n  Minimum=-415.000, Maximum=8424.000, Mean=nan, StdDev=nan\n  NoData Value=-32768\n  Metadata:\n    STATISTICS_MAXIMUM=8424\n    STATISTICS_MEAN=1.#SNAN\n    STATISTICS_MINIMUM=-415\n    STATISTICS_STDDEV=1.#SNAN\n\n\n3.4.4.2.2 gdalwarp\nEl programa gdalwarp se utiliza para reproyectar y transformar datos raster.\n\nRecorte la capa raster de altitud global con el contorno de la capa de cantones de Costa Rica y reproyección a CRTM05:\n\n# Recorte de la capa raster de altitud global con el contorno de la capa de cantones de Costa Rica\ngdalwarp -dstnodata -9999 -tr 0.00833333 0.00833333 -q -cutline cantones-wgs84.gpkg -crop_to_cutline wc2.1_30s_elev.tif altitud-cr-wgs84.tif\n\n# Información sobre la capa de altitud de Costa Rica\ngdalinfo -stats altitud-cr-wgs84.tif\n\n# Reproyección a CRTM05\ngdalwarp -s_srs EPSG:4326 -t_srs EPSG:5367 altitud-cr-wgs84.tif altitud-cr-crtm05.tif\n\n\n3.4.4.2.3 gdaldem\nEl programa gdaldem contiene un conjunto de herramientas para visualizar y analizar modelos digitales de elevación (DEM, en inglés, Digital Elevation Model).\n\nCree un mapa con efecto de relieve (hillshade) a partir de la capa de altitud de Costa Rica en el sistema de coordenadas WGS84.\n\n# Mapa hillshade\ngdaldem hillshade altitud-cr-wgs84.tif altitud-cr-wgs84-hillshade.tif -s 111120\nEl resultado se muestra en la Figura 3.1.\n\n\n\n\n\nFigura 3.1: Mapa de Costa Rica con efecto de relieve (hillshade).\n\n\n\n\n\nCree un mapa con efecto de relieve (hillshade) multidireccional a partir de la capa de altitud de Costa Rica en el sistema de coordenadas WGS84.\n\n# Mapa hillshade multidireccional\ngdaldem hillshade altitud-cr-wgs84.tif altitud-cr-wgs84-hillshade-multidireccional.tif -s 111120 -multidirectional\nEl resultado se muestra en la Figura 3.2.\n\n\n\n\n\nFigura 3.2: Mapa de Costa Rica con efecto de relieve (hillshade) multidireccional.\n\n\n\n\n\nCree un mapa coloreado de relieve a partir de la capa de altitud de Costa Rica en el sistema de coordenadas WGS84.\n\n\nCree un archivo llamado colores.txt con el siguiente contenido:\n\nnv,255,255,255\n500,101,146,82\n1000,190,202,130\n1500,241,225,145\n2000,244,200,126\n2500,197,147,117\n3000,204,169,170\n4000,251,238,253\nLas columnas del archivo corresponden a altitud, rojo, verde, azul.\n\nEjecute el siguiente comando:\n\n# Mapa coloreado de relieve\ngdaldem color-relief altitud-cr-wgs84.tif colores.txt altitud-cr-wgs84-colores.tif\nEl resultado se muestra en la Figura 3.3.\n\n\n\n\n\nFigura 3.3: Mapa coloreado de relieve de Costa Rica."
  },
  {
    "objectID": "03-gdal.html#ejercicios",
    "href": "03-gdal.html#ejercicios",
    "title": "3  GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos",
    "section": "3.5 Ejercicios",
    "text": "3.5 Ejercicios\n\n3.5.1 Datos vectoriales\n\nDe la capa de países de Natural Earth, extraiga los registros con población estimada superior a mil millones. En la capa resultante, incluya solamente los campos de nombre del país en español y población estimada. ¿Cuál opción debe utilizar para especificar los campos que desea incluir en el archivo de salida?\nDe la capa de ASP de Costa Rica, extraiga en un archivo GeoJSON las ASP del Área de Conservación Central.\nDe la capa de ASP de Costa Rica, extraiga en un archivo GeoJSON las ASP terrestres con área mayor o igual a 1000 km2.\nDe la capa de ASP de Costa Rica, extraiga en un archivo GeoJSON las ASP terrestres con área mayor o igual a 500 km2 del Área de Conservación Central.\nDe la capa de ASP de Costa Rica, extraiga en un archivo GeoJSON las ASP terrestres con área mayor o igual a 500 km2 de las áreas de conservación Central, Tortuguero y Osa.\nDe la capa de ASP de Costa Rica, extraiga en un archivo GeoPackage, las ASP del Área de Conservación Guanacaste, excepto el Parque Nacional Santa Rosa.\n\n\n\n3.5.2 Datos raster\n\nRecorte la capa de altitud de Costa Rica de acuerdo con el contorno de la provincia de Limón y extraiga el resultado en nuevo archivo GeoTIFF.\nGenere un mapa con efecto de relieve (hillshade) para la provincia de Limón. 3- Genere un mapa coloreado de relieve para la provincia de Limón."
  },
  {
    "objectID": "03-gdal.html#recursos-de-interés",
    "href": "03-gdal.html#recursos-de-interés",
    "title": "3  GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos",
    "section": "3.6 Recursos de interés",
    "text": "3.6 Recursos de interés\nCodecademy. (s. f.). Command Line Tutorial: Learn The Command Line. Codecademy. Recuperado 19 de marzo de 2022, de https://www.codecademy.com/learn/learn-the-command-line\nSS64 Command line reference. (s. f.). Recuperado 3 de abril de 2022, de https://ss64.com/"
  },
  {
    "objectID": "04-reproducibilidad.html",
    "href": "04-reproducibilidad.html",
    "title": "4  Reproducibilidad",
    "section": "",
    "text": "Un análisis realizado por un investigador se considera reproducible si el código fuente y los datos que utilizó para obtener los resultados están disponibles y son suficientes para que otro investigador, trabajando de manera independiente, pueda llegar al mismo resultado. El concepto de reproducibilidad es cada vez más importante debido al aumento exponencial de datos y al empleo de la programación de computadoras por parte de especialistas de diversas disciplinas."
  },
  {
    "objectID": "04-reproducibilidad.html#introducción",
    "href": "04-reproducibilidad.html#introducción",
    "title": "4  Reproducibilidad",
    "section": "4.2 Introducción",
    "text": "4.2 Introducción\nEn general, la reproducibilidad es la capacidad de un ensayo o experimento de ser reproducido por otros. Más formalmente, en investigación cuantitativa, un análisis se considera reproducible si “el código fuente y los datos utilizados por un investigador para llegar a un resultado están disponibles y son suficientes para que otro investigador, trabajando de manera independiente, pueda llegar al mismo resultado” (Gandrud 2020).\nLa reproducibilidad, junto con la falsabilidad, es uno de los pilares del método científico. Sin embargo, en años recientes, se ha generado una creciente preocupación debido a que muchos estudios científicos publicados fallan las pruebas de reproducibilidad (véase, por ejemplo, The Excel Depression, de Paul Krugman, Growth in a Time of Debt), dando lugar a una crisis de reproducibilidad o replicabilidad en varias ciencias.\nEl concepto de reproducibilidad es cada vez más importante debido, entre otras razones, al aumento exponencial de datos disponibles y a la aplicación de la programación de computadoras, para procesar estos datos, por parte de especialistas de muchas disciplinas."
  },
  {
    "objectID": "04-reproducibilidad.html#reproducibilidad-en-ciencia-de-datos-geoespaciales",
    "href": "04-reproducibilidad.html#reproducibilidad-en-ciencia-de-datos-geoespaciales",
    "title": "4  Reproducibilidad",
    "section": "4.3 Reproducibilidad en ciencia de datos geoespaciales",
    "text": "4.3 Reproducibilidad en ciencia de datos geoespaciales\nAlex Singleton y otros autores (Singleton, Spielman, y Brunsdon 2016) han identificado los siguientes retos para la reproducibilidad en ciencia de datos geoespaciales:\n\nLos datos deben ser de dominio público y estar disponibles para los investigadores.\nEl software utilizado debe ser de código abierto (open source) y estar disponible para ser revisado.\nSiempre que sea posible, los flujos de trabajo deben ser públicos y con enlaces a los datos, software y métodos de análisis, junto con la documentación necesaria.\nEl proceso de revisión por pares (peer review process) y la publicación académica deben requerir la presentación de un modelo de flujo de trabajo e idealmente la disponibilidad de los materiales necesarios para la replicación.\nEn los casos en los que la reproducibilidad total no sea posible (ej. datos sensibles), los investigadores deben esforzarse por incluir todos los aspectos que puedan de un marco de trabajo abierto.\n\nEn general, el estándar mínimo de reproducibilidad requiere que los datos y el código fuente estén disponibles para otros investigadores (Peng 2011). Sin embargo, dependiendo de las circunstancias y recursos disponibles, existe todo un espectro de posibilidades, que se ilustra en la Figura 4.1.\n\n\n\n\n\nFigura 4.1: Espectro de reproducibilidad. Imagen de Anita Graser, basada en (Peng, 2001)."
  },
  {
    "objectID": "04-reproducibilidad.html#herramientas-para-facilitar-la-reproducibilidad",
    "href": "04-reproducibilidad.html#herramientas-para-facilitar-la-reproducibilidad",
    "title": "4  Reproducibilidad",
    "section": "4.4 Herramientas para facilitar la reproducibilidad",
    "text": "4.4 Herramientas para facilitar la reproducibilidad\nLa documentación es vital durante todo el ciclo de vida de una investigación reproducible. Se recomienda utilizar mecanismos estandarizados y abiertos como el lenguaje de marcado de hipertexto (HTML, en inglés, HyperText Markup Language) o Markdown, con los cuales pueden crearse documentos mediante editores de texto simples (i.e. no se requiere de software propietario), y exportables a varios formatos (ej. LaTeX, PDF).\nPara dar mantenimiento, tanto al código fuente como a la documentación, es necesario un sistema de control de versiones como Git, el cual permite llevar el registro de los cambios en archivos y también facilita el trabajo colaborativo al reunir las modificaciones hechas por varias personas. Git es usado en varias plataformas que comparten código fuente (ej. GitHub, GitLab) y que ofrecen servicios relacionados, como hospedaje de sitios web."
  },
  {
    "objectID": "04-reproducibilidad.html#recursos-de-interés",
    "href": "04-reproducibilidad.html#recursos-de-interés",
    "title": "4  Reproducibilidad",
    "section": "4.5 Recursos de interés",
    "text": "4.5 Recursos de interés\nBartomeus Lab. (2016). A reproducible workflow. https://www.youtube.com/watch?v=s3JldKoA0zw\nFOSS4G. (2021). FOSS4G2021—Open source for open spatial data science—Anita Graser. https://www.youtube.com/watch?v=ZjXb53pOor0\nKrugman, P. (2013). Opinion | The Excel Depression. The New York Times. https://www.nytimes.com/2013/04/19/opinion/krugman-the-excel-depression.html"
  },
  {
    "objectID": "04-reproducibilidad.html#referencias",
    "href": "04-reproducibilidad.html#referencias",
    "title": "4  Reproducibilidad",
    "section": "4.6 Referencias",
    "text": "4.6 Referencias\n\n\nGandrud, Christopher. 2020. Reproducible Research with\nR and RStudio. Third edition. The\nR Series. Boca Raton, FL: CRC Press.\n\n\nPeng, Roger D. 2011. “Reproducible Research in\nComputational Science.”\nScience 334 (6060): 1226–27. https://doi.org/10.1126/science.1213847.\n\n\nSingleton, Alex David, Seth Spielman, and Chris Brunsdon. 2016.\n“Establishing a Framework for Open\nGeographic Information Science.”\nInternational Journal of Geographical Information Science 30\n(8): 1507–21. https://doi.org/10.1080/13658816.2015.1137579."
  },
  {
    "objectID": "05-markdown.html",
    "href": "05-markdown.html",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "",
    "text": "Markdown es un lenguaje de marcado ligero ampliamente utilizado en comunicación científica, documentación de programas e investigación reproducible, entre otras aplicaciones. Incluye marcas para especificar aspectos de estructura, semántica y estilo de un documento. Se basa en texto simple y se convierte fácilmente a HTML, el lenguaje de marcado más utilizado en páginas web.\nMarkdown puede emplearse junto con lenguajes de programación (ej. R, Python) para así combinar texto con código fuente, el cual inserta en los documentos salidas como tablas, gráficos y mapas, entre otras. Esta forma de trabajo facilita la automatización y la reproducibilidad de una investigación."
  },
  {
    "objectID": "05-markdown.html#trabajo-previo",
    "href": "05-markdown.html#trabajo-previo",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.2 Trabajo previo",
    "text": "5.2 Trabajo previo\n\n5.2.1 Instalación de software\nPara la edición de código Markdown, en el contexto de la programación en R, se recomienda instalar:\n\nSistema base del lenguaje R (no es necesario para este capítulo, pero sí se utilizará más adelante)\nRStudio Desktop\n\nOpcionalmente, puede instalar Visual Studio Code u otro editor de código fuente.\n\n\n5.2.2 Tutoriales\n\nMarkdown Tutorial"
  },
  {
    "objectID": "05-markdown.html#introducción",
    "href": "05-markdown.html#introducción",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.3 Introducción",
    "text": "5.3 Introducción\nMarkdown es un lenguaje de marcado, creado en 2004 por John Gruber y Aaron Swartz. Las “marcas” se utilizan para especificar aspectos de la estructura (ej. títulos, encabezados), estilo (ej. negritas, itálicas) y semántica de un documento. Markdown se caracteriza por ser más sencillo de leer y de usar que otros lenguajes de marcado (ej. Lenguaje de Marcado de Hipertexto o HTML), por lo que se considera un lenguaje de marcado ligero.\nLos documentos escritos en Markdown pueden exportarse a una gran variedad de formatos (ej. HTML, DOC, PDF, LaTex) para ser usados en libros, presentaciones o páginas web, entre otros fines.\n\n5.3.1 Variaciones\nLas variaciones de Markdown, también llamadas flavors, son extensiones o modificaciones de la especificación original. Entre las más populares están:\n\nR Markdown: para el lenguaje R.\nQuarto: es la “siguiente generación” de R Markdown, con soporte para más lenguajes de programación (Python, Julia, Observable, R) y motores de procesamiento (Jupyter, Knitr), entre otras mejoras.\nPython Markdown: para el lenguaje Python.\nGitHub Flavored Markdown: para la plataforma GitHub.\nPandoc’s Markdown: para el programa Pandoc de conversión entre formatos.\nKramdown: para el lenguaje Ruby.\n\nPuede encontrarse una lista más extensa de variaciones de Markdown en Markdown Flavors."
  },
  {
    "objectID": "05-markdown.html#ejemplo-de-documento",
    "href": "05-markdown.html#ejemplo-de-documento",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.4 Ejemplo de documento",
    "text": "5.4 Ejemplo de documento\nEl siguiente es un ejemplo de la sintaxis de Markdown, con marcas para un encabezado, texto en negrita, texto en itálica, un hipervínculo y una imagen.\n\n### Los satélites galileanos\n\nSe llaman **satélites galileanos** los cuatro satélites\nde Júpiter descubiertos en 1610 por \n[Galileo Galilei](https://es.wikipedia.org/wiki/Galileo_Galilei): \n*Ío*, *Europa*, *Ganimedes* y *Calisto*. \nSon los más grandes de los satélites de Júpiter, \nsiendo visibles incluso con telescopios de baja potencia.\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Jupiter_and_the_Galilean_Satellites.jpg/168px-Jupiter_and_the_Galilean_Satellites.jpg)\n\n**Figura 1**. Los cuatro satélites galileanos, \nen una composición que compara sus tamaños con el tamaño de Júpiter. \nEn orden descendente, son *Ío*, *Europa*, *Ganimedes* y *Calisto*.\n\nY la siguiente es la manera en la que se visualiza el documento:\n\n\nLos satélites galileanos\nSe llaman satélites galileanos los cuatro satélites de Júpiter descubiertos en 1610 por Galileo Galilei: Ío, Europa, Ganimedes y Calisto. Son los más grandes de los satélites de Júpiter, siendo visibles incluso con telescopios de baja potencia.\n\nFigura 1. Los cuatro satélites galileanos, en una composición que compara sus tamaños con el tamaño de Júpiter. En orden descendente, son Ío, Europa, Ganimedes y Calisto.\n\nEl contenido de este ejemplo fue tomado de Satélite galileano - Wikipedia, la enciclopedia libre."
  },
  {
    "objectID": "05-markdown.html#herramientas-para-escritura-de-documentos",
    "href": "05-markdown.html#herramientas-para-escritura-de-documentos",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.5 Herramientas para escritura de documentos",
    "text": "5.5 Herramientas para escritura de documentos\nMarkdown se escribe en “texto simple o plano” (i.e. texto sin formato, compuesto únicamente por caracteres que son legibles por humanos), por lo que puede escribirse con cualquier editor de texto. Se recomienda el uso de editores orientados a programación, también llamados editores de código fuente, los cuales proporcionan facilidades para el programador, como coloración de palabras clave, sangrado y autocompletado, entre otras.\nTambién pueden utilizarse Entornos Integrados de Desarrollo o IDE, los cuales son aplicaciones informáticas que proporcionan servicios integrales para facilitarle al programador el desarrollo de software. Además de un editor de código fuente, un IDE incluye funciones para depuración (i.e. identificación de errores), interpretación y compilación de programas, entre otras.\nAlgunos de los editores de código fuente o IDE recomendados para Markdown son:\n\nVisual Studio Code: editor de código fuente muy popular y de código abierto. Puede editar código de múltiples lenguajes de programación y sintaxis asociadas\nRStudio Desktop: IDE para desarrollo en el lenguaje de programación R, el cual también puede manejar código en otros lenguajes de programación y sintaxis.\n\nNo se recomienda el uso de procesadores de texto (ej. Microsoft Word, Libre Office Writer), debido a que introducen caracteres especiales que no son reconocidos por Markdown."
  },
  {
    "objectID": "05-markdown.html#sintaxis",
    "href": "05-markdown.html#sintaxis",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.6 Sintaxis",
    "text": "5.6 Sintaxis\nEn esta sección, se muestran los principales elementos de sintaxis de Markdown y sus salidas.\n\n\n\n5.6.1 Encabezados\nHay seis niveles de encabezados en Markdown, siendo el nivel 1 el de letras más grandes y el 6 el de letras más pequeñas. Se especifican mediante símbolos de numeral (#) antes del texto del encabezado (note el espacio entre el último signo de numeral y el inicio del texto).\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n# Encabezado de nivel 1\n\n\n\nEncabezado de nivel 1\n\n\n\n\n\n## Encabezado de nivel 2\n\n\n\nEncabezado de nivel 2\n\n\n\n\n\n### Encabezado de nivel 3\n\n\n\nEncabezado de nivel 3\n\n\n\n\n\n#### Encabezado de nivel 4\n\n\n\nEncabezado de nivel 4\n\n\n\n\n\n##### Encabezado de nivel 5\n\n\n\nEncabezado de nivel 5\n\n\n\n\n\n###### Encabezado de nivel 6\n\n\n\nEncabezado de nivel 6\n\n\n\n\n\nPara los encabezados de nivel 1 y nivel 2, existe una sintaxis alterna, con símbolos de igual (=====) o guiones (-----) bajo el texto del encabezado.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\nOtro encabezado de nivel 1 ==========================\n\n\n\n\nOtro encabezado de nivel 1\n\n\n\n\n\nOtro encabezado de nivel 2 --------------------------\n\n\n\nOtro encabezado de nivel 2\n\n\n\n\n\n\n\n5.6.2 Párrafos\nLos párrafos deben separarse mediante (al menos) una línea en blanco. Un simple cambio de línea no generará un nuevo párrafo.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\nEste es el texto que corresponde al primer párrafo de un documento.\nEste es el texto que corresponde al segundo párrafo de un documento.\n\n\nEste es el texto que corresponde al primer párrafo de un documento.\nEste es el texto que corresponde al segundo párrafo de un documento.\n\n\n\n\n\n\n5.6.3 Negrita\nHay dos sintaxis para especificar texto en negrita: con dos asteriscos (**) o con dos guiones bajos (__), antes y después del texto.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n**Texto en negrita**\n\n\nTexto en negrita\n\n\n\n\n__Otro texto en negrita__\n\n\nOtro texto en negrita\n\n\n\n\n\n\n5.6.4 Itálica\nHay dos sintaxis para especificar texto en itálica: con un asterisco (*) o con un guión bajo (_), antes y después del texto.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n*Texto en itálica*\n\n\nTexto en itálica\n\n\n\n\n_Otro texto en itálica_\n\n\nOtro texto en itálica\n\n\n\n\n\n\n5.6.5 Citas textuales\nSe especifican con un símbolo de “mayor que” (>) antes de cada línea.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n> *And on the pedestal these words appear:* > *\"My name is Ozymandias, king of kings:* > *Look on my works, ye Mighty, and despair!\"* *Percy Bysshe Shelley, \"Ozymandias\" (1818)*\n\n\n\n “And on the pedestal these words appear:”My name is Ozymandias, king of kings: Look on my works, ye Mighty, and despair!“ \n\nPercy Bysshe Shelley, “Ozymandias” (1818)\n\n\n\n\n\n\n5.6.6 Enlaces (hipervínculos)\nSe definen con paréntesis cuadrados ([]) seguidos de paréntesis redondos (()). En los paréntesis cuadrados se coloca (opcionalmente) el texto del enlace y en los redondos la dirección del documento al que conduce el enlace.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n[Proyecto Gutenberg](https://www.gutenberg.org/)\n\n\nProyecto Gutenberg\n\n\n\n\n\n\n5.6.7 Imágenes\nSe definen con un signo de admiración de cierre (!), paréntesis cuadrados ([]) y paréntesis redondos (()). En los paréntesis cuadrados se coloca (opcionalmente) un texto alternativo de la imagen y en los redondos la dirección de la imagen, ya sea local o remota.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n![Imagen local](img/Jupiter_and_the_Galilean_Satellites.jpg)\n\n\n\n\n\n\n\n![Imagen remota](https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Jupiter_and_the_Galilean_Satellites.jpg/168px-Jupiter_and_the_Galilean_Satellites.jpg)\n\n\n\n\n\n\n\n\n\n5.6.8 Listas numeradas\nSe definen con números (1. 2. 3. ...) antes de cada elemento.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n1. Primer elemento.\n2. Segundo elemento.\n3. Tercer elemento.\n\n\n\n\nPrimer elemento.\nSegundo elemento.\nTercer elemento.\n\n\n\n\n\n\n\n5.6.9 Listas no numeradas\nSe definen con guiones (-) o asteriscos (*) antes de cada elemento.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n- Un elemento.\n- Otro elemento.\n- Otro elemento más.\n\n\n\n\nUn elemento.\n\nOtro elemento.\n\nOtro elemento más.\n\n\n\n\n\n\n\n\n5.6.10 Ecuaciones\nLas ecuaciones se escriben con base en la sintaxis de LaTeX. Se delimitan (al inicio y al final) con:\n\nUn símbolo de dólar ($), para ecuaciones dentro de un renglón (inline math).\nDos símbolos de dólar ($$), para ecuaciones en su propio bloque (display math).\n\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\nEquivalencia entre masa y energía: $E = mc^{2}$\n\n\n\nEquivalencia entre masa y energía: \\(E = mc^{2}\\)\n\n\n\n\nEquivalencia entre masa y energía: $$E = mc^{2}$$\n\n\nEquivalencia entre masa y energía:\n\\[E = mc^{2}\\]\n\n\n\n\nPara más detalles sobre la sintaxis de ecuaciones, se recomienda consultar:\n\nWriting mathematical expressions - GitHub Docs\nLaTeX/Mathematics"
  },
  {
    "objectID": "05-markdown.html#ejercicios",
    "href": "05-markdown.html#ejercicios",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.7 Ejercicios",
    "text": "5.7 Ejercicios\n\nCon RStudio, cree un documento Markdown llamado README.md y escriba en este un breve curriculum académico o profesional.\n\nIncluya información como: nombre, fotografía, datos de contacto, áreas de interés, carrera, cursos aprobados, publicaciones, etc.\nPuede usar información ficticia (no incluya datos confidenciales o sensibles).\nEspecifique la fuente de las imágenes (y de cualquier otra información para la que sea necesario) y no utilice imágenes para las que no tiene autorización. Considere utilizar sitios con imágenes con licencias abiertas (ej. Wikimedia Commons, Unsplash, FreeImages).\nAsegúrese de utilizar los siguientes elementos de sintaxis Markdown:\n\nEncabezados de varios niveles.\nNegritas e itálicas.\nListas.\nEnlaces a sitios web.\nImágenes (al menos una local y una remota)."
  },
  {
    "objectID": "05-markdown.html#recursos-de-interés",
    "href": "05-markdown.html#recursos-de-interés",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.8 Recursos de interés",
    "text": "5.8 Recursos de interés\nCarrera Arias, F. J. (2020). How to Install R on Windows, Mac OS X, and Ubuntu Tutorial. DataCamp Community. https://www.datacamp.com/community/tutorials/installing-R-windows-mac-ubuntu\nDaring Fireball: Markdown. (s. f.). Recuperado 25 de marzo de 2023, de https://daringfireball.net/projects/markdown/\nLaTeX/Mathematics—Wikibooks, open books for an open world. (s. f.). Recuperado 25 de marzo de 2023, de https://en.wikibooks.org/wiki/LaTeX/Mathematics\nMarkdown Guide. (s. f.). Recuperado 10 de abril de 2022, de https://www.markdownguide.org/\nQuarto—Markdown Basics. (s. f.). Recuperado 25 de marzo de 2023, de https://quarto.org/docs/authoring/markdown-basics.html\nWriting mathematical expressions. (s. f.). GitHub Docs. Recuperado 25 de marzo de 2023, de https://ghdocs-prod.azurewebsites.net/en/get-started/writing-on-github/working-with-advanced-formatting/writing-mathematical-expressions"
  },
  {
    "objectID": "06-git.html",
    "href": "06-git.html",
    "title": "6  Git - sistema de control de versiones",
    "section": "",
    "text": "Git es un sistema para administrar versiones de código fuente o, en general, de cualquier conjunto de archivos. Un sistema de administración de versiones permite recuperar versiones anteriores de los archivos e integrar modificaciones efectuadas por varias personas, entre otras capacidades. Git es utilizado en varios sitios que proveen servicios de alojamiento de software, incluído GitHub.\nGit puede utilizarse para sincronizar la versión local (i.e. en una computadora personal) de un conjunto de archivos, llamado proyecto o repositorio, con la versión que está alojada en un sistema remoto (ej. GitHub). Cada repositorio se almacena en un directorio (carpeta) del sistema operativo. La sincronización se realiza principalmente a través de las operaciones:\n\npush: para “subir” al repositorio remoto los cambios realizados en el repositorio local.\npull: para “bajar” al repositorio local los cambios realizados en el repositorio remoto.\n\nEl sistema Git cuenta con otras muchas operaciones, como commit, para guardar los cambios realizados."
  },
  {
    "objectID": "06-git.html#trabajo-previo",
    "href": "06-git.html#trabajo-previo",
    "title": "6  Git - sistema de control de versiones",
    "section": "6.2 Trabajo previo",
    "text": "6.2 Trabajo previo\n\n6.2.1 Instalación de software\nInstale en su computadora:\n\nGit\n\n\n\n6.2.2 Tutoriales\nAbba, I. V. (2021, noviembre 5). Git and GitHub Tutorial – Version Control for Beginners. FreeCodeCamp.Org. https://www.freecodecamp.org/news/git-and-github-for-beginners/\n\n\n6.2.3 Otros\nCree una cuenta gratuita en la plataforma de desarrollo colaborativo de software GitHub."
  },
  {
    "objectID": "06-git.html#introducción",
    "href": "06-git.html#introducción",
    "title": "6  Git - sistema de control de versiones",
    "section": "6.3 Introducción",
    "text": "6.3 Introducción\nGit es un sistema de control de versiones diseñado para “rastrear” cambios en el código fuente durante el proceso de desarrollo de software. Sin embargo, puede ser utilizado para llevar el control de los cambios en cualquier conjunto de archivos (ej. documentación, música).\nUn sistema de control de versiones proporciona, entre otras ventajas:\n\nLa capacidad de recuperar versiones anteriores de los archivos.\nLa capacidad de integrar modificaciones efectuadas por varias personas en el mismo conjunto de archivos.\nLa capacidad de mantener varias “ramas” (branches) de un producto (ej. “estable”, “evaluación”, “inestable”, como en el caso de Debian Linux, GRASS GIS y muchos otros proyectos de software libre).\nFacilidades para mantener redundancia y respaldos de los archivos (ej. Programa de respaldos de GitHub). Esta es una facilidad que implementan algunos servicios en la nube.\n\nGit fue diseñado por Linus Torvalds en 2005 durante del desarrollo del kernel del sistema operativo Linux. Se caracteriza por ser un sistema de control de versiones distribuido, lo que significa que el código fuente puede estar alojado en la estación de trabajo de cualquier miembro del equipo de desarrollo. No requiere un repositorio “central”, pero también puede trabajar de esa forma.\nEl protocolo de Git es utilizado en varios sitios que proveen servicios de alojamiento de software, entre los que están SourceForge, Bitbucket, GitLab y GitHub."
  },
  {
    "objectID": "06-git.html#funcionamiento-de-git",
    "href": "06-git.html#funcionamiento-de-git",
    "title": "6  Git - sistema de control de versiones",
    "section": "6.4 Funcionamiento de Git",
    "text": "6.4 Funcionamiento de Git\nDesde el punto de vista de un usuario de Git (ej. un programador), Git se utiliza para sincronizar la versión local (i.e. en una computadora personal) de un conjunto de archivos, llamado proyecto o repositorio, con la versión que está alojada en un sistema remoto (ej. GitHub). Cada repositorio se almacena en un directorio (carpeta) del sistema operativo. La sincronización se realiza principalmente a través de dos operaciones:\n\npush: para “subir” al repositorio remoto los cambios realizados en el repositorio local. Esta operación se realiza mediante el comando git push. Es probable que el sistema remoto le solicite al usuario algún tipo de autenticación (ej. nombre de usuario y clave).\npull: para “bajar” al repositorio local los cambios realizados en el repositorio remoto. Esta operación se realiza mediante el comando git pull.\n\nLas operaciones push y pull se ilustran en la Figura 6.1.\n\n\n\n\n\nFigura 6.1: Operaciones push y pull. Imagen de Melinda Higgins.\n\n\n\n\nAntes de un push, el usuario debe seleccionar los archivos que desea subir mediante el comando git add, el cual pasa los archivos a un “área de espera” (staging area). Luego debe usarse el comando git commit para “guardar” los cambios pendientes en el área de espera. Cada commit guarda el estado del conjunto de archivos en un momento específico (snapshot).\nLa relación entre estas operaciones de Git, se ilustra en la Figura 6.2.\n\n\n\n\n\nFigura 6.2: Operaciones de Git. Imagen de Steven Klavins.\n\n\n\n\nEn la Figura 6.3, se muestra el funcionamiento de Git mediante una comparación con el procesamiento de una compra en línea.\n\n\n\n\n\nFigura 6.3: Operaciones de Git y compras en línea. Imagen de Melinda Higgins.\n\n\n\n\nOtras operaciones de Git de uso frecuente son:\n\ngit config: para especificar opciones globales de la sesión de Git (ej. nombre del usuario, dirección de correo electrónico).\ngit init: para inicializar un repositorio git.\ngit clone: para clonar (i.e. copiar) un repositorio remoto en la computadora local.\ngit status: para revisar el estado de los archivos y, por ejemplo, saber cuales deben pasarse al área de espera.\ngit log: para revisar el historial de commits.\ngit show: para visualizar los cambios efectuados en los commits.\ngit reset: para regresar al estado correspondiente a un commit anterior."
  },
  {
    "objectID": "06-git.html#ejemplos-de-uso",
    "href": "06-git.html#ejemplos-de-uso",
    "title": "6  Git - sistema de control de versiones",
    "section": "6.5 Ejemplos de uso",
    "text": "6.5 Ejemplos de uso\n\n6.5.1 Clonación de un repositorio remoto y sincronización de los cambios efectuados localmente\nPara seguir este ejemplo:\n\nObtenga un token de GitHub en la siguiente opción de menú de su perfil de usuario: Settings - Developer settings - Personal access tokens - Tokens (classic) - Generate new token (classic). Ingrese una descripción y seleccione las operaciones de tipo “repo”. Presione Generate token. Copie el token en un lugar seguro, ya que lo necesitará para autenticarse en GitHub.\nRealice un fork a su cuenta en GitHub del repositorio localizado en la dirección https://github.com/gf0604-procesamientodatosgeograficos/2023-i-tutorial-git-repo-ejemplo. Obtendrá un repositorio llamado “https://github.com/[nombre-usuario]/2023-i-tutorial-git-repo-ejemplo”, en donde [nombre-usuario] es su nombre de usuario en GitHub.\nCon la opción File - New Project - Version Control - Git de RStudio, clone a su computadora el repositorio que acaba de bifurcar.\nCon el editor de RStudio, abra el archivo README.md, agregue una línea y guarde el archivo.\nLuego, ejecute los siguientes comandos desde la la ventana Terminal de RStudio para sincronizar el repositorio local y el repositorio remoto (las líneas que empiezan con # son comentarios).\n\n# a. Parámetros de configuración: nombre y dirección de correo del usuario.\n#    Debe cambiar [email-usuario] y [nombre-usuario] por sus propios datos, sin usar los [].\ngit config --global user.email [email-usuario]\ngit config --global user.name [nombre-usuario]\n# Para revisar los parámetros de configuración:\ngit config --global --list\n\n# b. Revisión de los archivos con modificaciones.\ngit status\n\n# c. Adición (add) de los archivos modificados al \"área de espera\".\n#    El punto (.) indica que se agregarán todos los archivos modificados.\ngit add .\n\n# d. Grabado (commit) del conjunto de archivos modificados,\n#    junto con un mensaje explicativo:\n#    Debe cambiar [comentario] por su propio comentario (ej. \"Agregar línea 2\"), sin usar los [].\ngit commit -m [comentario]\n\n# e. \"Subida\" (push) de las modificaciones al repositorio remoto.\n#    En este paso, es posible que deba utilizar su nombre de usuario/clave\n#    o su token de GitHub para autenticarse.\ngit push\n\nRevise los cambios aplicados en el repositorio remoto en GitHub.\nAgregue más líneas al archivo del repositorio local y sincronícelo con el remoto, realizando nuevamente los pasos del b al e para cada commit. Recuerde que los comentarios de cada commit deben reflejar los cambios que están siendo aplicados."
  },
  {
    "objectID": "06-git.html#ejercicios",
    "href": "06-git.html#ejercicios",
    "title": "6  Git - sistema de control de versiones",
    "section": "6.6 Ejercicios",
    "text": "6.6 Ejercicios\n\nCree un repositorio en GitHub (ej. currículum).\nClone el nuevo repositorio a su computadora.\nCopie al directorio del repositorio clonado el archivo README.md que creó en el capítulo anterior, con su currículum.\nSincronice ambos repositorios.\nPublique su curriculum como un sitio web en GitHub Pages, con la opción Settings - Pages. Elija la rama (branch) main y guarde los cambios. El sitio tomará algunos segundos para generarse.\nRealice cambios adicionales en su currículum y sincronícelos con el repositorio remoto."
  },
  {
    "objectID": "06-git.html#recursos-de-interés",
    "href": "06-git.html#recursos-de-interés",
    "title": "6  Git - sistema de control de versiones",
    "section": "6.7 Recursos de interés",
    "text": "6.7 Recursos de interés\nGit. (s. f.). Recuperado 28 de agosto de 2022, de https://git-scm.com/\nGitHub Archive Program. (s. f.). GitHub Archive Program. Recuperado 10 de abril de 2022, de https://archiveprogram.github.com/\nHiggins, M. (s. f.). Reproducible Templates for Analysis and Dissemination. Coursera. Recuperado 11 de abril de 2022, de https://www.coursera.org/learn/reproducible-templates-analysis\nKlavins, S. (2020). Version Control part 1. Medium. https://stevenklavins94.medium.com/version-control-part-1-c5f1b43127f6"
  },
  {
    "objectID": "parte-ii-r.html",
    "href": "parte-ii-r.html",
    "title": "II - El lenguaje de programación R",
    "section": "",
    "text": "8 Quarto - sistema de publicación técnica y científica\n9 Tidyverse - colección de paquetes para ciencia de datos\n10 dplyr - gramática para manipulación de datos\n11 ggplot2 y plotly - creación declarativa de gráficos interactivos"
  },
  {
    "objectID": "07-r.html",
    "href": "07-r.html",
    "title": "7  R - lenguaje de programación para análisis estadístico",
    "section": "",
    "text": "R es un lenguaje de programación y un entorno para graficación y análisis estadístico. Como lenguaje, es interpretado, multiplataforma, de tipado dinámico y multiparadigma. Es un proyecto de software libre que se comparte mediante una licencia GNU GPL.\nEl código de R se estructura en funciones, las cuales se distribuyen en paquetes. Cada paquete contiene un conjunto de funciones relacionadas. Algunos paquetes están incorporados en la instalación base de R y otros deben instalarse separadamente.\nR puede manejar diversos tipos de datos básicos, como números, textos y valores lógicos, entre otros. También tipos de datos compuestos, como factores y data frames. Al igual que otros lenguajes de programación, cuenta con estructuras de control como condicionales y ciclos."
  },
  {
    "objectID": "07-r.html#trabajo-previo",
    "href": "07-r.html#trabajo-previo",
    "title": "7  R - lenguaje de programación para análisis estadístico",
    "section": "7.2 Trabajo previo",
    "text": "7.2 Trabajo previo\n\n7.2.1 Lecturas\nGrolemund, G., & Wickham, H. (2014). Hands-On Programming with R: Write Your Own Functions And Simulations (capítulos 1 - 12). O’Reilly Media. https://rstudio-education.github.io/hopr/"
  },
  {
    "objectID": "07-r.html#introducción",
    "href": "07-r.html#introducción",
    "title": "7  R - lenguaje de programación para análisis estadístico",
    "section": "7.3 Introducción",
    "text": "7.3 Introducción\nR es un lenguaje de programación y un entorno enfocado en graficación y en análisis estadístico. Fue creado por Ross Ihaka y Robert Gentleman en la Universidad de Auckland, Nueva Zelanda, en 1993. Es ampliamente utilizado en diversas áreas de investigación, entre las que pueden mencionarse aprendizaje automático (machine learning), ciencia de datos (data science) y big data, con aplicaciones en campos como agricultura, biomedicina, bioinformática, finanzas, hidrología, teledetección y geografía entre muchos otros.\nAlgunas de las principales características del lenguaje de programación R son:\n\nEs interpretado: las instrucciones se traducen una por una a lenguaje máquina, a diferencia de los lenguajes compilados, que traducen de manera conjunta las instrucciones de una unidad completa (ej. un programa o una biblioteca). Los lenguajes interpretados tienden a ser más lentos que los compilados, pero también son más flexibles.\nEs multiplataforma: puede ejecutarse en los sistemas operativos más populares (ej. Microsoft Windows, macOS, Linux).\nTiene un sistema de tipos de datos dinámico: las variables pueden tomar diferentes tipos de datos (ej. textuales, numéricos) durante la ejecución del programa, a diferencia del caso de un sistema de tipos de datos estático, en el que las variables de un programa solo pueden tener un tipo de datos.\nSoporta varios paradigmas de programación: los paradigmas son estilos o enfoques teóricos de programación. R soporta los paradigmas de programación funcional, programación orientada a objetos, programación imperativa y programación procedimental.\n\nR es un proyecto de software libre que se comparte mediante una licencia GNU General Public Licence (GNU GPL). Esta característica permite que la funcionalidad original de R pueda ser ampliada mediante bibliotecas o paquetes desarrollados por la comunidad de programadores.\nLa Comprehensive R Archive Network (CRAN) es una red mundial distribuida de servidores que albergan el código y la documentación oficial de R. Las tasks views de CRAN categorizan la funcionalidad de R de acuerdo con temáticas determinadas.\nPara programar en R, puede utilizarse una interfaz de línea de comandos, editores de texto (ej. Visual Studio Code, Vim) y también ambientes de desarrollo integrados (IDE, integrated development environment) como Jupyter o RStudio."
  },
  {
    "objectID": "07-r.html#el-ambiente-de-desarrollo-integrado-rstudio",
    "href": "07-r.html#el-ambiente-de-desarrollo-integrado-rstudio",
    "title": "7  R - lenguaje de programación para análisis estadístico",
    "section": "7.4 El ambiente de desarrollo integrado RStudio",
    "text": "7.4 El ambiente de desarrollo integrado RStudio\nRStudio es el IDE más popular para el lenguaje R. Está disponible en una versión de escritorio (RStudio Desktop) y en una versión para servidor (RStudio Server). Esta última permite la conexión de varios usuarios a través de un navegador web. RStudio se ofrece también como un servicio en la nube, a través de RStudio Cloud.\nLa Figura 7.1 muestra la interfaz de RStudio.\n\n\n\n\n\nFigura 7.1: Interfaz del ambiente de desarrollo integrado RStudio.\n\n\n\n\nAdemás de edición de código fuente en R (y otros lenguajes), RStudio contiene capacidades para depurar código y visualizar datos en formatos tabulares, gráficos y de mapas."
  },
  {
    "objectID": "07-r.html#conjuntos-de-datos-para-pruebas",
    "href": "07-r.html#conjuntos-de-datos-para-pruebas",
    "title": "7  R - lenguaje de programación para análisis estadístico",
    "section": "7.5 Conjuntos de datos para pruebas",
    "text": "7.5 Conjuntos de datos para pruebas\nPara efectos de pruebas y ejemplos, la distribución base de R incorpora varios conjuntos de datos que pueden listarse con la función data(). Para obtener información acerca de un conjunto de datos en particular, puede utilizarse el operador ?.\n\n# Información sobre todos los conjuntos de datos incorporados en la distribución base de R\ndata()\n\n# Información sobre el cojunto de datos \"cars\"\n?cars\n\n# Información sobre el cojunto de datos \"mtcars\"\n?mtcars\n\n# Información sobre el cojunto de datos \"Iris\"\n?iris\n\nAdemás, existen muchos sitios en Internet que brindan acceso a conjuntos de datos que pueden utilizarse para pruebas. Por ejemplo:\n\nKaggle - conjuntos de datos\nBanco Mundial - indicadores\nPapers with Code - conjuntos de datos"
  },
  {
    "objectID": "07-r.html#funciones",
    "href": "07-r.html#funciones",
    "title": "7  R - lenguaje de programación para análisis estadístico",
    "section": "7.6 Funciones",
    "text": "7.6 Funciones\nR, al igual que otros lenguajes de programación, estructura su funcionalidad en unidades de código fuente llamadas funciones. Cada función realiza una tarea específica como, por ejemplo, un cálculo matemático y, por lo general, retorna un valor como salida. Todas las funciones tienen un nombre y, opcionalmente, un conjunto de argumentos que especifican los datos de entrada que procesa la función. Los argumentos se escriben entre paréntesis redondos (()) y estos siempre deben incluirse, aún en el caso de que la función no tenga ningún argumento. Si la función tiene varios argumentos, deben separarse mediante comas (,).\n\n7.6.1 Ejemplos\nLa función print() recibe como argumento un valor (ej. un texto o un número) para imprimirlo en la pantalla. En el siguiente fragmento de código en R, se utiliza print() para imprimir la hilera “Hola mundo”. Nótese el uso del símbolo # para comentarios (i.e. texto que no es código ejecutable).\n\n# Impresión de una hilera de caracteres\nprint(\"Hola mundo\")\n\n[1] \"Hola mundo\"\n\n\nLa función mean() retorna la media aritmética del argumento de entrada. En el siguiente ejemplo, se calcula la media de los números de un vector creado a su vez con la función c().\n\n# Media aritmética\nmean(c(2, 4, 5, 9))\n\n[1] 5\n\n\nLa función getwd() (get working directory) retorna la ruta del directorio de trabajo de la sesión actual de R. Este es el directorio en el cual R espera encontrar, por ejemplo, archivos de datos.\n\n# Impresión del directorio de trabajo\ngetwd()\n\n[1] \"/home/mfvargas/gf0604-procesamientodatosgeograficos/2023-i/github/2023-i\"\n\n\nLa función setwd() (set working directory) establece la ruta del directorio de trabajo de la sesión actual de R. Como argumento, recibe una hilera de texto con la ruta.\nNote las barras utilizadas para separar los subdirectorios: / (no \\)\n\n# Especificación del directorio de trabajo (la ruta debe existir)\nsetwd(\"C:/Users/mfvargas\")\n\n\n\n7.6.2 Ejercicios\n\nObtenga la ruta de su directorio de trabajo con la función getwd().\n\nSi lo desea, cambie la ruta de su directorio de trabajo con la función setwd(). Verifique el cambio usando nuevamente getwd().\n\n\n\n7.6.3 Argumentos\nLos argumentos de las funciones tienen nombres que pueden especificarse, en caso de ser necesario, al llamar la función. En algunos casos, el orden y el tipo de datos de los argumentos permiten que el interpretador de R conozca cuál es cada uno, sin necesidad de escribir sus nombres.\nEn el siguiente ejemplo, se utilizan los argumentos x, xlab y ylab de la función plot(), para especificar la fuente de datos y las etiquetas de los ejes x e y de un gráfico de dispersión.\n\n# Gráfico de dispersón del conjunto de datos \"cars\" con etiquetas en los ejes x e y\nplot(\n  x=cars$speed,\n  y=cars$dist,\n  xlab=\"Velocidad (mph)\", \n  ylab=\"Distancia requerida para frenar (pies)\"\n)\n\n\n\n\n\n\n7.6.4 Ejercicios\n\nEstudie la documentación de la función plot() y agregue al gráfico anterior:\n\nUn título.\nUn subtítulo.\n\n\n\n\n7.6.5 Ayuda\nPara obtener ayuda sobre una función desde la línea de comandos de R, puede utilizarse un signo de pregunta (?) seguido del nombre de la función o bien la función help(). Por ejemplo:\n\n# Ayuda de la función setwd()\n?setwd\nhelp(setwd)\n\nTambién puede utilizarse la función apropos(), para buscar funciones por palabras clave.\n\n# Búsqueda, por palabras clave, de funciones relacionadas con \"mean\" (media aritmética). Note las comillas (\"\").\napropos(\"mean\")\n\n [1] \".colMeans\"     \".rowMeans\"     \"colMeans\"      \"kmeans\"       \n [5] \"mean\"          \"mean.Date\"     \"mean.default\"  \"mean.difftime\"\n [9] \"mean.POSIXct\"  \"mean.POSIXlt\"  \"rowMeans\"      \"weighted.mean\"\n\n\nLa función example() presenta ejemplos sobre el uso de una función.\n\n# Ejemplos de uso de la función mean()\nexample(\"mean\")\n\n\nmean> x <- c(0:10, 50)\n\nmean> xm <- mean(x)\n\nmean> c(xm, mean(x, trim = 0.10))\n[1] 8.75 5.50\n\n\nPor otra parte, el sitio All R Documentation reúne documentación de funciones de una gran cantidad de paquetes de R.\nTambién puede obtenerse ayuda en buscadores de Internet, como Google, o en sitios de preguntas y respuestas para programadores, como Stack Overflow."
  },
  {
    "objectID": "07-r.html#paquetes",
    "href": "07-r.html#paquetes",
    "title": "7  R - lenguaje de programación para análisis estadístico",
    "section": "7.7 Paquetes",
    "text": "7.7 Paquetes\nLas funciones de R se distribuyen en paquetes. Cada paquete contiene un conjunto de funciones relacionadas. También hay paquetes que contienen datos (ej. los resultados de un censo).\nPara utilizar un paquete, primero debe cargarse (en la memoria del computador) con la función library().\n\n# Carga del paquete stats\nlibrary(stats)\n\nAlgunos paquetes están contenidos en la distribución base de R. Otros deben instalarse con la función install.packages().\nEn el siguiente ejemplo, se instala el paquete PASWR2, el cual contiene el conjunto de datos TITANIC3 con una lista de pasajeros del Titanic.\n\n# Instalación del paquete PASWR2 (note las comillas)\ninstall.packages(\"PASWR2\")\n\nSeguidamente, el paquete PASWR2 se carga con la función library().\n\n# Carga de PASWR2\nlibrary(PASWR2)\n\nEl conjunto de datos TITANIC3 puede visualizarse con la función View().\n\n# Visualización del conjunto de datos TITANIC3\nView(TITANIC3)\n\nEl siguiente gráfico de barras muestra la distribución de pasajeros por clase, mediante la función barplot(). También se utiliza la función table() para generar una tabla con las cantidades de pasajeros que viajaban en cada clase.\n\n# Cantidades de pasajeros por clase\ntable(TITANIC3$pclass)\n## \n## 1st 2nd 3rd \n## 323 277 709\n\n# Gráfico de barras por clase de pasajero\nbarplot(\n  height=table(TITANIC3$pclass),\n  main=\"Distribución de pasajeros del Titanic por clase\",\n  xlab = \"Clase\",\n  ylab = \"Cantidad de pasajeros\"  \n)\n\n\n\n\nLa distribución por cada clase puede dividirse en fallecidos y sobrevivientes.\n\n# Cantidades de pasajeros fallecidos y sobrevivientes por clase\n# (0 corresponde a fallecidos y 1 a sobrevivientes)\ntable(TITANIC3$survived, TITANIC3$pclass)\n##    \n##     1st 2nd 3rd\n##   0 123 158 528\n##   1 200 119 181\n\nEl siguiente gráfico muestra en un gráfico de barras apiladas la distribución de pasajeros sobrevivientes y fallecidos en cada clase.\n\n# Gráfico de barras apiladas\nbarplot(\n  height = table(TITANIC3$survived, TITANIC3$pclass),\n  main = \"Distribución de pasajeros fallecidos y sobrevivientes por clase\",\n  xlab = \"Clase\",\n  ylab = \"Cantidad de pasajeros\",\n  col = topo.colors(2)\n)\n\n# Leyenda\nlegend(\n  x = \"topleft\",\n  inset = 0.03,\n  legend = c(\"Fallecidos\", \"Sobrevivientes\"),\n  fill = topo.colors(2),\n  horiz = TRUE\n)\n\n\n\n\nLa misma información se muestra seguidamente en un gráfico de barras agrupadas. Note el uso del argumento beside.\n\n# Gráfico de barras agrupadas\nbarplot(\n  height = table(TITANIC3$survived, TITANIC3$pclass),\n  main = \"Distribución de pasajeros fallecidos y sobrevivientes por clase\",\n  xlab = \"Clase\",\n  ylab = \"Cantidad de pasajeros\",  \n  col = topo.colors(2),\n  beside = TRUE\n)\n\n# Leyenda\nlegend(\n  x = \"topleft\",\n  inset = 0.03,\n  legend = c(\"Fallecidos\", \"Sobrevivientes\"),\n  fill = topo.colors(2),\n  horiz = TRUE\n)\n\n\n\n\n\n7.7.1 Ejercicios\n\nMuestre la distribución de pasajeros fallecidos y sobrevivientes por sexo en un gráfico de barras apiladas.\nMuestre la distribución de pasajeros fallecidos y sobrevivientes por sexo en un gráfico de barras agrupadas."
  },
  {
    "objectID": "07-r.html#tipos-de-datos",
    "href": "07-r.html#tipos-de-datos",
    "title": "7  R - lenguaje de programación para análisis estadístico",
    "section": "7.8 Tipos de datos",
    "text": "7.8 Tipos de datos\nR puede trabajar con varios tipos de datos básicos, entre los que están números, caracteres (i.e. textos) y lógicos. También puede trabajar con tipos compuestos, como factores y data frames.\nR proporciona acceso a los datos a través de objetos. Un objeto es una entidad que tiene asociadas propiedades (i.e. datos) y métodos (i.e. funciones) para manipular esas propiedades. Un objeto puede ser, por ejemplo, un número, una hilera de texto, un vector o una matriz. R también permite que el programador defina sus propios objetos.\nHay muchas formas de crear objetos en R. Una de las más sencillas es con los operadores de asignación. Estos son = y <- (o ->). Por ejemplo, las siguientes sentencias crean un número, un texto y un vector.\n\n# Número\nx <- 10\nx\n## [1] 10\n\n# Otro número\n20 -> y\ny\n## [1] 20\n\n# Hilera de caracteres\nnombre <- 'Manuel'\nnombre\n## [1] \"Manuel\"\n\n# Vector de hileras de caracteres\ndias <- c('Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado')\ndias\n## [1] \"Domingo\"   \"Lunes\"     \"Martes\"    \"Miércoles\" \"Jueves\"    \"Viernes\"  \n## [7] \"Sábado\"\n\nTanto x, como nombre como dias son variables. Una variable es una etiqueta que se le asigna a un objeto. Una variable debe comenzar con una letra.\nEl tipo de un objeto puede consultarse con la función typeof(). Por ejemplo:\n\ntypeof(x)\n## [1] \"double\"\ntypeof(y)\n## [1] \"double\"\ntypeof(nombre)\n## [1] \"character\"\ntypeof(dias)\n## [1] \"character\"\n\nA continuación, se describen con más detalle algunos de los tipos de datos utilizados en el lenguaje R.\n\n7.8.1 Tipos básicos\nR define seis tipos de datos básicos. En esta sección, se describen los más utilizados durante este curso.\n\n7.8.1.1 Números\nPueden ser enteros (integer) o decimales (double). Se utilizan en diversos tipos de operaciones, incluyendo las aritméticas (ej. suma, resta, multiplicación, división).\n\n# Declaración de variables numéricas\nx <- 5\ny <- 0.5\n\n# Suma\nx + y\n## [1] 5.5\n\n# Tipos de datos numéricos\ntypeof(x)\n## [1] \"double\"\ntypeof(y)\n## [1] \"double\"\ntypeof(x + y)\n## [1] \"double\"\n\nNótese que al declararse una variable numérica, ya sea que tenga o no punto decimal, R la considera por defecto de tipo double. Para que se considere de tipo integer, debe utilizarse el sufijo L o la función as.integer().\n\n# Números enteros\nx <- 10L\ny <- as.integer(15)\n\n# Multiplicación\nx * y\n## [1] 150\n\n# Tipos de datos enteros\ntypeof(x)\n## [1] \"integer\"\ntypeof(y)\n## [1] \"integer\"\ntypeof(x * y)\n## [1] \"integer\"\n\n\n\n7.8.1.2 Caracteres\nSe utilizan para representar textos. Deben estar entre comillas simples ('') o dobles (\"\").\n\n# Hileras de caracteres\nnombre <- \"María\"\napellido <- \"Pérez\"\n\n# Concatenación mediante la función paste()\npaste(nombre, apellido)\n## [1] \"María Pérez\"\n\n\n\n7.8.1.3 Lógicos\nLos objetos lógicos (también llamados booleanos) tienen dos posibles valores: verdadero (TRUE) o falso (FALSE).\n\n# Variable lógica\na <- 1 < 2\na\n## [1] TRUE\n\n# Variable lógica\nb <- 1 > 2\nb\n## [1] FALSE\n\nLas expresiones lógicas pueden combinarse con operadores como:\n\n& (Y, en inglés AND)\n| (O, en inglés OR)\n! (NO, en inglés NOT)\n\n\n# Operador lógico AND\n(1 < 2) & (3 < 4)\n## [1] TRUE\n\n# Operador lógico OR\n(2 + 2 == 5) | (20 <= 10)\n## [1] FALSE\n\n# Operador lógico NOT\n!(2 + 2 == 5)\n## [1] TRUE\n\n\n\n7.8.1.4 Vectores\nUn vector es una estructura unidimensional que combina objetos del mismo tipo.\n\n7.8.1.4.1 Definición\nLos vectores pueden definirse de varias formas como, por ejemplo, con la función c() (del inglés combine):\n\n# Definición de un vector de números\nvector_numeros <- c(1, 7, 32, 45, 57)\nvector_numeros\n## [1]  1  7 32 45 57\n\n# Definición de un vector de hileras de caracteres\nvector_nombres <- c(\"Álvaro\", \"Ana\", \"Berta\", \"Bernardo\")\nvector_nombres\n## [1] \"Álvaro\"   \"Ana\"      \"Berta\"    \"Bernardo\"\n\nLos vectores también pueden crearse con el operador :, el cual especifica una secuencia (i.e. una lista ordenada):\n\n# Definición de un vector de números con la secuencia de 1 a 10\nvector_secuencia <- 1:10\nvector_secuencia\n##  [1]  1  2  3  4  5  6  7  8  9 10\n\n# Definición de un vector de números con la secuencia de -5 a 5\nvector_secuencia <- -5:5\nvector_secuencia\n##  [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\n\n# Definición de un vector de números con la secuencia de -0.5 a 3.7\nvector_secuencia <- -0.5:3.7\nvector_secuencia\n## [1] -0.5  0.5  1.5  2.5  3.5\n\nLa función seq() también crea un vector con base en una secuencia y permite especificar argumentos como un valor de incremento y la longitud de la secuencia.\n\n# Definición de un vector de números en secuencia de 1 a 10\nvector_secuencia <- seq(1, 10)\nvector_secuencia\n##  [1]  1  2  3  4  5  6  7  8  9 10\n\n# Definición de un vector de números en secuencia de 0.5 a 15.3, con incremento de 2\nvector_secuencia <- seq(from=0.5, to=15.3, by=2)\nvector_secuencia\n## [1]  0.5  2.5  4.5  6.5  8.5 10.5 12.5 14.5\n\n# Definición de un vector de números en secuencia de 1.5 a 9.4, con longitud de 4\nvector_secuencia <- seq(from=1.5, to=9.4, length.out=4)\nvector_secuencia\n## [1] 1.500000 4.133333 6.766667 9.400000\n\n\n\n7.8.1.4.2 Indexación\nLos elementos de un vector se acceden a través de sus índices (i.e. posiciones). La primera posición corresponde al índice 1, la segunda al índice 2 y así sucesivamente. Los índices se especifican entre paréntesis cuadrados ([]), ya sea para una posición específica o para un rango de posiciones. También es posible especificar los índices que se desea excluir.\n\n# Vector de nombres de países\npaises <- c(\"Argentina\", \"Francia\", \"China\", \"Australia\", \"México\")\npaises\n## [1] \"Argentina\" \"Francia\"   \"China\"     \"Australia\" \"México\"\n\n# Elemento en el índice 3\npaises[3]\n## [1] \"China\"\n\nEl operador : puede utilizarse para especificar un rango de índices:\n\n# Elementos entre los índices 2 y 4 (2, 3 y 4)\npaises[2:4]\n## [1] \"Francia\"   \"China\"     \"Australia\"\n\nCon la función c(), es posible especificar un conjunto de índices particulares:\n\n# Elementos entre los índices 1, 4 y 5\npaises[c(1, 4, 5)]\n## [1] \"Argentina\" \"Australia\" \"México\"\n\nLos números negativos pueden usarse para excluir índices:\n\n# Exclusión de los índices 3 y 4\npaises[c(-3, -4)]\n## [1] \"Argentina\" \"Francia\"   \"México\"\n\nLos valores lógicos TRUE y FALSE también pueden usarse para incluir y excluir índices de un vector:\n\n# Se incluyen los índices 1, 2 y 4; y se excluyen los índices 3 y 5\npaises[c(TRUE, TRUE, FALSE, TRUE, FALSE)]\n## [1] \"Argentina\" \"Francia\"   \"Australia\"\n\n\n\n7.8.1.4.3 Operaciones\nEn los vectores pueden aplicarse operaciones aritméticas:\n\na <- c(1, 3, 5, 7)\nb <- c(2, 4, 6, 8)\n\n# Suma de vectores\na + b\n## [1]  3  7 11 15\n\n# Multiplicación de vectores\na * b\n## [1]  2 12 30 56\n\nY también pueden realizarse operaciones relacionales:\n\n# Comparación con el operador <\na < b\n## [1] TRUE TRUE TRUE TRUE\n\n\n\n\n7.8.1.5 Matrices\nUna matriz es una estructura bidimensional de filas y columnas.\n\n7.8.1.5.1 Definición\nLas matrices se definen mediante la función matrix().\n\n# Definición de una matriz de 3 x 3 con elementos de la secuencia 1:9 distribuidos en las columnas\nm <- matrix(1:9, nrow=3, ncol=3)\nm\n##      [,1] [,2] [,3]\n## [1,]    1    4    7\n## [2,]    2    5    8\n## [3,]    3    6    9\n\n# Definición de una matriz de 3 x 3 con elementos de la secuencia 1:9 distribuidos en las filas\nm <- matrix(1:9, nrow=3, ncol=3, byrow=TRUE)\nm\n##      [,1] [,2] [,3]\n## [1,]    1    2    3\n## [2,]    4    5    6\n## [3,]    7    8    9\n\n# Definición de una matriz de 3 x 2 con nombres para las filas y las columnas\ndatos <- c(18, 500, 25, 1000, 30, 2000)\nfilas <- c(\"Ana\", \"Mario\", \"Laura\")\ncolumnas <- c(\"Edad\", \"Salario\")\n\nm <- matrix(datos, nrow=3, ncol=2, byrow=TRUE, dimnames=list(filas, columnas))\nm\n##       Edad Salario\n## Ana     18     500\n## Mario   25    1000\n## Laura   30    2000\n\nLa función list() se utiliza, en este caso, para combinar vectores. En general, se usa para combinar datos de cualquier tipo.\n\n\n7.8.1.5.2 Indexación\nLa indexación de matrices es similar a la de vectores, pero deben especificarse índices tanto para filas como para columnas.\n\n# Elemento en la posición [2,2] (segunda fila, segunda columna)\nm[2, 2]\n## [1] 1000\n\n# Elementos de la primera fila\nm[1,]\n##    Edad Salario \n##      18     500\n\n# Elementos de la segunda columna\nm[, 2]\n##   Ana Mario Laura \n##   500  1000  2000\n\n# Elementos de las filas 1 y 2\nm[1:2, ]\n##       Edad Salario\n## Ana     18     500\n## Mario   25    1000\n\n# Elementos de la fila \"Mario\"\nm[\"Mario\", ]\n##    Edad Salario \n##      25    1000\n\n# Elementos de la columna \"Salario\"\nm[, \"Salario\"]\n##   Ana Mario Laura \n##   500  1000  2000\n\n\n\n7.8.1.5.3 Operaciones\nDe manera similar a los vectores, en las matrices pueden realizarse operaciones aritméticas y relacionales.\n\na <- matrix(1:4, nrow=2, ncol=2)\na\n##      [,1] [,2]\n## [1,]    1    3\n## [2,]    2    4\n\nb <- matrix(5:8, nrow=2, ncol=2)\nb\n##      [,1] [,2]\n## [1,]    5    7\n## [2,]    6    8\n\n# Suma de matrices\na + b\n##      [,1] [,2]\n## [1,]    6   10\n## [2,]    8   12\n\n# Multiplicación de matrices\na * b\n##      [,1] [,2]\n## [1,]    5   21\n## [2,]   12   32\n\n# Comparación de matrices con el operador >\na > b\n##       [,1]  [,2]\n## [1,] FALSE FALSE\n## [2,] FALSE FALSE\n\n\n\n\n\n7.8.2 Tipos compuestos\n\n7.8.2.1 Data Frames\nUn data frame es una estructura bidimensional similar a lo que comúnmente se conoce como una tabla. Sus filas corresponden a las observaciones de un conjunto de datos y sus columnas a las variables. Internamente, se componen de varios vectores, factores y/o matrices de la misma longitud. La definición de un data frame puede incluir nombres para cada observación y para cada variable. Los data frames implementan un conjunto de funciones similares a las de una hoja electrónica o una tabla de una base de datos relacional. Son fundamentales para el manejo de datos en R.\n\n7.8.2.1.1 Definición\nLa función data.frame() crea un data frame a partir de vectores que serán las columnas del data frame.\n\n# Vector de nombres de países\npaises <-\n  c(\"Panamá\",\n    \"Costa Rica\",\n    \"Nicaragua\",\n    \"El Salvador\",\n    \"Honduras\",\n    \"Guatemala\",\n    \"Belice\")\n\n# Vector de cantidades de habitantes de cada país (en millones)\npoblaciones <- c(4.1, 5.0, 6.2, 6.4, 9.2, 16.9, 0.3)\n\n# Creación de un data frame a partir de los dos vectores\npoblaciones_paises <- \n  data.frame(\n    pais = paises, \n    poblacion = poblaciones\n  )\n\n# Impresión del data frame\npoblaciones_paises\n##          pais poblacion\n## 1      Panamá       4.1\n## 2  Costa Rica       5.0\n## 3   Nicaragua       6.2\n## 4 El Salvador       6.4\n## 5    Honduras       9.2\n## 6   Guatemala      16.9\n## 7      Belice       0.3\n\n\n\n7.8.2.1.2 Indexación\nLos datos de un data frame pueden accederse principalmente de dos formas. La primera es mediante la misma sintaxis [fila, columna] que se utiliza en las matrices.\n\n# Fila 1\npoblaciones_paises[1, ]\n##     pais poblacion\n## 1 Panamá       4.1\n\n# Filas 1, 5 y 7\npoblaciones_paises[c(1, 5, 7), ]\n##       pais poblacion\n## 1   Panamá       4.1\n## 5 Honduras       9.2\n## 7   Belice       0.3\n\n# Columna 2\npoblaciones_paises[, 2]\n## [1]  4.1  5.0  6.2  6.4  9.2 16.9  0.3\n\n# Fila 1, columna 2\npoblaciones_paises[1, 2]\n## [1] 4.1\n\n# Filas 1:4, columna 2\npoblaciones_paises[1:4, 2]\n## [1] 4.1 5.0 6.2 6.4\n\nAdemás, mediante el operador $, es posible acceder a las columnas (i.e. variables) del data frame.\n\n# Columna de nombres de países\npoblaciones_paises$pais\n## [1] \"Panamá\"      \"Costa Rica\"  \"Nicaragua\"   \"El Salvador\" \"Honduras\"   \n## [6] \"Guatemala\"   \"Belice\"\n\n# Modificación de los valores de toda una columna\npoblaciones_paises$poblacion = poblaciones_paises$poblacion*2\npoblaciones_paises\n##          pais poblacion\n## 1      Panamá       8.2\n## 2  Costa Rica      10.0\n## 3   Nicaragua      12.4\n## 4 El Salvador      12.8\n## 5    Honduras      18.4\n## 6   Guatemala      33.8\n## 7      Belice       0.6\n\n\n\n7.8.2.1.3 Operaciones\nR proporciona una gran variedad de funciones para manejar data frames. Las siguientes son algunas de las más utilizadas.\nLa función read.table() lee los datos contenidos en un archivo de texto y los retorna en un data frame. read.csv() es una función derivada, con valores por defecto orientados a los archivos de valores separados por comas (CSV, Comma Separated Values). Como argumento principal, read.csv() recibe la ruta del archivo CSV, el cual puede encontrarse en un disco local, en la Web o en otra ubicación.\n\n# Lectura de archivo CSV ubicado en la Web\ncovid <-\n  read.csv(\n    \"https://raw.githubusercontent.com/pf0953-programacionr/2022-ii/main/datos/cepredenac/covid/covid-20210422.csv\"\n  )\n\n# Despliegue de los datos del data frame\ncovid\n##          pais fallecidos recuperados activos positivos\n## 1      Panamá       6198      351949    3845    361992\n## 2  Costa Rica       3125      199779   32370    235274\n## 3   Guatemala       7345      194075   16725    218145\n## 4    Honduras       4981       77020  121358    203359\n## 5 El Salvador       2089       64208    1864     68161\n## 6      Belice        318       12164     114     12596\n## 7   Nicaragua        181        5212      57      5450\n\nLa función str() despliega la estructura de un data frame u otro objeto R.\n\n# Estructura del data frame\nstr(poblaciones_paises)\n\n'data.frame':   7 obs. of  2 variables:\n $ pais     : chr  \"Panamá\" \"Costa Rica\" \"Nicaragua\" \"El Salvador\" ...\n $ poblacion: num  8.2 10 12.4 12.8 18.4 33.8 0.6\n\n\nLa función summary() proporciona un resumen de los contenidos de un data frame:\n\n# Resumen de los contenidos del data frame\nsummary(poblaciones_paises)\n\n     pais             poblacion    \n Length:7           Min.   : 0.60  \n Class :character   1st Qu.: 9.10  \n Mode  :character   Median :12.40  \n                    Mean   :13.74  \n                    3rd Qu.:15.60  \n                    Max.   :33.80  \n\n\nLa función View() invoca un visor de datos que permite visualizar un objeto R en un formato de tabla en una hoja de cálculo. Ejecute en su computadora la siguiente línea de código para apreciar el funcionamiento de View().\n\n# Vista de los casos de COVID-19\nView(covid, \"Casos de COVID-19 en Centramérica\")\n\n\n\n\n7.8.2.2 Factores\nLos factores se utilizan para representar datos categóricos. Un factor corresponde a un conjunto de categorías correspondientes a un concepto (ej. [“Sí”, “No”], [“Casado”, “Soltero”], [“Alto”, “Medio”, “Bajo”]).\nInternamente, los factores se representan en R como números enteros con etiquetas asociadas. A pesar de que los factores parecen (y pueden funcionar como) hileras de caracteres, en realidad son números y debe tenerse cuidado de no manejarlos como caracteres.\nLos elementos de un factor se denominan niveles (levels) y, por defecto, se almacenan en orden alfabético.\n\n7.8.2.2.1 Definición\nUn factor se crea con la función factor().\n\n# Factor de valores de sexo\nsexo <- factor(c(\"Masculino\", \"Femenino\", \"Femenino\", \"Masculino\"))\n\n\n\n7.8.2.2.2 Operaciones\nR proporciona una gran variedad de funciones para manejar factores. Seguidamente, se ejemplifican algunas de estas.\n\n# Etiquetas de los niveles\nlevels(sexo)\n## [1] \"Femenino\"  \"Masculino\"\n\n# Cantidad de niveles\nnlevels(sexo)\n## [1] 2\n\n# Conteo de elementos de cada uno de los niveles del factor\ntable(sexo)\n## sexo\n##  Femenino Masculino \n##         2         2\n\n\n\n\n\n7.8.3 Otros\n\n7.8.3.1 Fechas\nLas fechas se manejan en R mediante un tipo especial que permite realizar operaciones como diferencias, agrupamientos y otras. Internamente, una fecha en R se almacena como un número que representa la cantidad de días transcurridos desde el 1 de enero de 1970 (1970-01-01).\n\n7.8.3.1.1 Operaciones\nLa función Sys.Date() retorna la fecha actual.\n\n# Fecha actual\nfecha_actual <- Sys.Date()\nfecha_actual\n## [1] \"2023-06-18\"\n\n# Tipo de datos\ntypeof(fecha_actual)\n## [1] \"double\"\n\n# Clase\nclass(fecha_actual)\n## [1] \"Date\"\n\nLa función as.Date() convierte datos entre los tipos fecha y carácter, de acuerdo con un formato. El formato que se usa por defecto (y el recomendado) es el que corresponde a la norma ISO 8601 (ej. 2023-12-03), pero pueden emplearse otros también.\n\n# Conversión de fecha en formato año-mes-día\nfecha_caracter_01 <- \"2020-01-01\"\nfecha_01 <- as.Date(fecha_caracter_01, format=\"%Y-%m-%d\")\nfecha_01\n\n[1] \"2020-01-01\"\n\n# Conversión de fecha en formato día/mes/año\nfecha_caracter_02 <- \"31/01/2020\"\nfecha_02 <- as.Date(fecha_caracter_02, format=\"%d/%m/%Y\")\nfecha_02\n\n[1] \"2020-01-31\"\n\n# Diferencia entre fechas\nfecha_02 - fecha_01\n\nTime difference of 30 days\n\n\nHay una lista de formatos de fechas en Date Formats in R - R-bloggers."
  },
  {
    "objectID": "07-r.html#definición-de-funciones",
    "href": "07-r.html#definición-de-funciones",
    "title": "7  R - lenguaje de programación para análisis estadístico",
    "section": "7.9 Definición de funciones",
    "text": "7.9 Definición de funciones\nAdemás de todas las funciones disponibles en la distribución base de R y en sus diferentes paquetes, R permite que los programadores definan sus propias funciones.\nToda función tiene tres partes esenciales:\n\nUn nombre.\nUn conjunto de argumentos.\nUn conjunto de líneas de código, también llamado el cuerpo de la función.\n\nPara programar una función, debe definirse cada una de esas partes por medio de la palabra reservada function function().\nPor ejemplo, la siguiente función calcula la nota final de un curso con base en los argumentos correspondientes a los promedios de exámenes, proyectos y tareas.\n\n# Función que calcula la nota final de un curso\nnota_final <- function(promedio_examenes,\n                       promedio_proyectos,\n                       promedio_tareas) {\n  factor_examenes <- promedio_examenes * 0.5\n  factor_proyectos <- promedio_proyectos * 0.4\n  factor_tareas <- promedio_tareas * 0.1\n  \n  return(factor_examenes + factor_proyectos + factor_tareas)\n}\n\nLa función return() es la que define el valor de retorno de la función. Si no se incluye, la función retorna la última expresión evaluada.\nAhora que está definida, la función nota_final() puede ser “llamada”, con diferentes argumentos:\n\n# Si ni se incluyen los nombres de los argumentos, \n# la función asume que se ingresan en el mismo orden en el que fueron definidos\nnota_final(100, 50, 0)\n## [1] 70\n\n# El uso de los nombres de argumentos \n# permite modificar su orden\nnota_final(promedio_examenes =  100, promedio_tareas =  0, promedio_proyectos = 50)\n## [1] 70\n\nSi se desea darle al usuario la opción de omitir algunos argumentos, se les puede asignar un valor por defecto.\nSeguidamente, la función nota_final() se redefine asignando valores por defecto a algunos de los argumentos:\n\n# Redefinición de la función nota final,\n# con valores por defecto para los argumentos\nnota_final <- function(promedio_examenes,\n                       promedio_proyectos = 0,\n                       promedio_tareas = 0) {\n  factor_examenes <- promedio_examenes * 0.5\n  factor_proyectos <- promedio_proyectos * 0.4\n  factor_tareas <- promedio_tareas * 0.1\n  \n  # Al no llamarse a la función return(), se retorna la última expresión:\n  factor_examenes + factor_proyectos + factor_tareas\n}\n\n# Se utiliza el valor por defecto (0) para el argumento promedio_tareas\nnota_final(promedio_examenes = 100, promedio_proyectos = 50)\n## [1] 70\n\n# Se llama la función usando la posición del primer argumento y el nombre del segundo\nnota_final(100, promedio_proyectos = 50)\n## [1] 70\n\n\n7.9.1 Ejercicios\n\nDefina una función con nombre celsius_a_fahrenheit() que reciba como argumento una cantidad en grados Celsius y retorne el equivalente en grados Fahrenheit.\n\nDefina una función con nombre fahrenheit_a_celsius() que reciba como argumento una cantidad en grados Fahrenheit y retorne el equivalente en grados Celsius.\n\nDefina una función con nombre imc() para calcular el índice de masa corporal (IMC) de una persona con base en su peso (en kilogramos) y su estatura (en metros)."
  },
  {
    "objectID": "07-r.html#condicionales",
    "href": "07-r.html#condicionales",
    "title": "7  R - lenguaje de programación para análisis estadístico",
    "section": "7.10 Condicionales",
    "text": "7.10 Condicionales\nLas sentencias condicionales evalúan una expresión lógica (i.e. condición) y ejecutan, o no, un bloque de intrucciones dependiendo de si la expresión es verdadera (TRUE) o falsa (FALSE). Permiten que los programas “tomen decisiones” y varíen su curso de acción.\nLos condicionales en R se implementa mediante la sentencia if y sus cláusulas else y else if.\n\n7.10.1 La sentencia if\nLa sentencia if evalúa una condición (i.e. una expresión lógica) y ejecuta un bloque de instrucciones, si es verdadera. El bloque se delimita con los caracteres de “llaves”: {}.\n\n# Sintaxis de la sentencia if\nif (condicion) {\n  # bloque de instrucciones a ejecutar si la condicion es verdadera\n}\n\nPor ejemplo:\n\n# Edad de una persona\nedad <- 25\n\n# Se utiliza la sentencia if para determinar \n# si la persona es adulta\nif (edad >= 18) {\n  print(\"Adulto\")\n}\n## [1] \"Adulto\"\n\nYa sea que se ejecute o no el bloque del if, el programa continúa con las instrucciones que siguen al bloque, si las hay.\n\n\n7.10.2 La cláusula else\nUna sentencia if puede ir seguida de una cláusula else, la cual define un bloque que se ejecuta si la condición es falsa. Por ejemplo:\n\nedad <- 15\n\nif (edad >= 18) {\n  print(\"Adulto\")\n} else {\n  print(\"Menor\")\n}\n\n[1] \"Menor\"\n\n\n\n\n7.10.3 La cláusula else if\nUna sentencia if también puede ir seguida de una o varias cláusulas else if, las cuales evalúan condiciones adicionales.\n\nedad <- 70\n\nif (edad < 18) {\n  print(\"Menor\")\n} else if (edad < 65) {\n  print(\"Adulto\")\n} else {\n  print(\"Adulto mayor\")\n}\n\n[1] \"Adulto mayor\"\n\n\nLas cláusulas else if deben escribirse antes de la cláusula else, la cual es siempre la última, si es que está presente. Tanto las cláusulas else if como la cláusula else son opcionales.\n\n\n7.10.4 Ejercicios\n\nDefina una función con nombre interpretacion_imc() que reciba como argumento un número correspondiente al índice de masa corporal (IMC) de una persona. Debe retornar una hilera de caracteres correspondiente a la interpretación del IMC (“Bajo peso”, “Normal”, “Sobrepeso”, “Obesidad”), de acuerdo con la tabla disponible en Índice de masa corporal - Wikipedia."
  },
  {
    "objectID": "07-r.html#ciclos",
    "href": "07-r.html#ciclos",
    "title": "7  R - lenguaje de programación para análisis estadístico",
    "section": "7.11 Ciclos",
    "text": "7.11 Ciclos\nLos ciclos permiten ejecutar tareas de manera repetitiva en un programa. Algunos ciclos se ejecutan una cantidad definida de veces, mientras que otros lo hacen mientras se cumple una condición lógica. Pueden usarse en combinación con sentencias que terminan anticipadamente el ciclo o que omiten algunas de sus iteraciones.\nLos ciclos en R se implementan mediante las sentencias for, while y repeat, en combinación con las sentencias break y next.\nR provee varias funciones que implementan ciclos de manera implícita, tales como apply(), tapply() y lapply(). Adicionalmente, hay muchas operaciones (ej. las aritméticas) que están “vectorizadas”, por lo que no es necesario utilizarlas en ciclos. El uso de código vectorizado es muy recomendado en R, por ser muy eficiente.\n\n7.11.1 La sentencia for\nLa sentencia for repite las instrucciones contenidas en un bloque para cada uno de los elementos de un vector o lista. En cada iteración (i.e. cada “vuelta” del ciclo), el valor del elemento que está siendo procesado se almacena en una variable.\n\n# Sintaxis de la sentencia for\nfor (variable in vector) {\n  # bloque de instrucciones\n}\n\nPor ejemplo, el siguiente bloque de código utiliza un ciclo de tipo for para recorrer un vector de nombres e imprimir un saludo para cada uno.\n\n# Vector con nombres de personas\nvector_nombres <- c(\"Andrés\", \"Beatriz\", \"Carlos\", \"Marta\", \"Pedro\", \"Sara\")\n\n# Recorrido del vector\nfor (nombre in vector_nombres) {\n  cat(\"Hola\", nombre, \"\\n\")\n}\n## Hola Andrés \n## Hola Beatriz \n## Hola Carlos \n## Hola Marta \n## Hola Pedro \n## Hola Sara\n\nEn el siguiente ejemplo, se utiliza otro ciclo for para recorrer un vector de números y sumar sus elementos.\n\n# Vector de números\nvector_numeros <- c(29.6, -36.81, 31.85, 25.71, 90.2, 0.4)\n\n# Variable para la suma de los números\nsuma <- 0\n\n# Recorrido del vector\nfor (x in vector_numeros) {\n  suma <- suma + x\n}\n\n# Impresión de la suma\ncat(\"Suma:\", suma)\n## Suma: 140.95\n\nSeguidamente, se utiliza dos for “anidados” para sumar los elementos de cada una de las columnas de una matriz.\n\n# Matriz de números\nmatriz_numeros <- matrix(1:12, nrow=3, ncol=4)\nmatriz_numeros\n##      [,1] [,2] [,3] [,4]\n## [1,]    1    4    7   10\n## [2,]    2    5    8   11\n## [3,]    3    6    9   12\n\n# Ciclo externo para recorrer las columnas de la matriz\nfor (j in 1:ncol(matriz_numeros)) {\n  suma_columna <- 0\n  # Ciclo interno para recorrer las elementos de cada columna\n  for (i in 1:nrow(matriz_numeros)) {\n    suma_columna <- suma_columna + matriz_numeros[i, j]\n  }\n  print(suma_columna)\n}\n## [1] 6\n## [1] 15\n## [1] 24\n## [1] 33\n\n\n7.11.1.1 Ejercicios\nUtilice un ciclo for para recorrer el vector vector_numeros y calcular el promedio de sus elementos.\nUtilice dos ciclos for anidados para recorrer la matriz vector_numeros y calcular el promedio de cada una de sus columnas.\n\n\n\n7.11.2 La sentencia while\nLa sentencia while evalúa una condición (i.e. una expresión lógica) en cada iteración de un ciclo y ejecuta las intrucciones del bloque mientras la condición sea verdadera. Generalmente, en algún momento la condición se vuelve falsa y así finaliza el ciclo.\n\n# Sintaxis de la sentencia while\nwhile (condicion) {\n  # bloque de instrucciones \n}\n\nEn el siguiente ejemplo, se utiliza un ciclo while para preguntarle al usuario cuál es la respuesta definitiva al sentido de la vida, el universo y todo lo demás y se continúa haciendo la pregunta hasta que responda correctamente:\n\n# Función para leer una respuesta desde la pantalla\nleer_respuesta <- function() {\n  readline(prompt=\"¿Cual es la respuesta definitiva al sentido de la vida, el universo y todo lo demás? \")\n}\n\n# Si la respuesta es incorrecta, se repite la pregunta hasta que el usuario conteste correctamente\nwhile (leer_respuesta() != \"42\") {   \n  print(\"¡Su respuesta es incorrecta!\")\n}\n\n\n7.11.2.1 Ejercicios\nUtilice un ciclo while para implementar el cálculo del promedio de los elementos de un vector. Sugerencia: utilice la función length() para obtener la longitud del vector y así saber cuando terminar de recorrerlo.\n\n\n\n7.11.3 La sentencia repeat\nLa sentencia repeat implementa un ciclo que se repite indefinidamente. Puede interrumpirse con una sentencia break.\n\n# Sintaxis de la sentencia repeat\nrepeat {\n  # bloque de instrucciones \n}\n\nLos ciclos repeat tienen una estructura más sencilla que los while. Algo que los diferencia es que los bloques de los ciclos repeat se ejecutan al menos una vez.\nEn el siguiente ejemplo, se utiliza un ciclo repeat para implementar la pregunta y lectura de la respuesta que anteriormente se implementó con un ciclo while.\n\n# Función para leer una respuesta desde la pantalla\nleer_respuesta <- function() {\n  readline(prompt=\"¿Cual es la respuesta definitiva al sentido de la vida, el universo y todo lo demás? \")\n}\n\n# Ciclo para imprimir la pregunta y leer la respuesta hasta que esta sea correcta\nrepeat {\n  respuesta <- leer_respuesta()\n  if (respuesta != \"42\") {\n    # Respuesta incorrecta\n    print(\"¡Su respuesta es incorrecta!\")\n  } else {\n    # Respuesta correcta. Se interrumpe el ciclo.\n    break\n  }\n}\n\n\n\n7.11.4 Las sentencias break y next\nLa sentencia break interrumpe un ciclo. La ejecución del programa continúa con la instrucción siguiente al bloque del ciclo.\nEn el siguiente ciclo for, se suman uno a uno los números de un vector, pero se usa un break para interrumpir el ciclo cuando el acumulado es mayor que 100.\n\nvector_numeros <- c(17, 23, 37, 41, 52, 64, 75)\n\nacumulado <- 0\n\nfor (x in vector_numeros) {\n  acumulado <- acumulado + x\n  cat(\"Acumulado:\", acumulado, \"\\n\")\n  if (acumulado >= 100) {\n    cat(\"Se superó el límite de 100 en el acumulado\")\n    break\n  }\n}\n## Acumulado: 17 \n## Acumulado: 40 \n## Acumulado: 77 \n## Acumulado: 118 \n## Se superó el límite de 100 en el acumulado\n\nPor su parte, la sentencia next retorna el control al principio del bloque. Las instrucciones que hay después del next no se ejecutan. La siguiente iteración del ciclo (si la hay), se inicia entonces.\nEl siguiente ciclo recorre un vector de números. Se utiliza la sentencia next para “saltar” los números impares y sumar solo los pares.\n\nvector_numeros <- c(17, 23, 37, 41, 52, 64, 75)\n\nsuma_pares <- 0\n\nfor (x in vector_numeros) {\n  if (x %% 2 == 0) {\n    # Número par: se suma\n    suma_pares <- suma_pares + x\n  } else {\n    # Número impar: se \"salta\" al siguiente número\n    next\n  }\n}\n\ncat(\"Suma de los números pares:\", suma_pares)\n## Suma de los números pares: 116\n\n\n\n7.11.5 La familia de funciones apply()\nEsta es una familia de funciones que manipulan subconjuntos de datos obtenidos a partir de matrices, listas y data frames, los cuales son recorridos de una forma repetitiva. Pueden funcionar como una alternativa a los ciclos y aplicar funciones en los subconjuntos de datos como, por ejemplo, funciones estadísticas en las columnas de una matriz o de un data frame. Su uso es muy recomendado por su eficiencia, flexibilidad y simplicidad.\nEntre estas funciones, pueden mencionarse apply(), lapply(), sapply(), vapply(), mapply(), rapply() y tapply().\n\n7.11.5.1 La función apply()\nLa función apply() toma como entrada un arreglo o una matriz y aplica alguna función sobre sus filas o columnas.\nLa sintaxis de la función es:\n\n# Sintaxis de la función apply()\napply(X, MARGIN, FUN, ...)\n\nEn donde:\n- X: es un arreglo o matriz.\n- MARGIN: MARGIN = 1 significa que la función actúa en las filas, MARGIN = 2 significa que la función actúa en las columnas y MARGIN = c(1, 2) significa que la función actúa en las filas y en las columnas.\n- FUN: es la función que se aplicará a cada uno de los elementos de X.\nEn el siguiente ejemplo, se utiliza la función apply() para sumar los elementos de las columnas de una matriz.\n\nm <- matrix(1:12, nrow=3, ncol=4)\nm\n\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n\n# Suma de las columnas\napply(m, 2, sum)\n\n[1]  6 15 24 33\n\n\n\n7.11.5.1.1 Ejercicios\nUtilice la función apply() para obtener el promedio de los elementos de cada columna de la matriz del ejemplo anterior.\n\n\n\n7.11.5.2 La función lapply()\nLa función lapply() toma como entrada un vector o lista y retorna una lista de la misma longitud en la que cada uno de sus elementos es el resultado de aplicar una función al vector o lista de entrada.\nLa sintaxis de la función es:\n\n# Sintaxis de la función lapply()\nlapply(X, FUN, ...)\n\nEn donde:\n- X: es un vector o lista.\n- FUN: es la función que se aplicará a cada elemento de X. Algunas funciones predefinidas que pueden utilizarse incluyen mean(), median(), sum(), min() y max(). También pueden usarse funciones definidas por el usuario.\nEn los siguientes ejemplos, se utiliza lapply() para aplicar diferentes funciones a un vector de nombres de personas.\n\nnombres <- c(\"Andrés\", \"Beatriz\", \"Carlos\", \"Marta\", \"Pedro\", \"Sara\")\n\n# Los nombres de la lista se transforman a minúscula\nnombres_en_minuscula <- lapply(nombres, tolower)\nnombres_en_minuscula\n\n[[1]]\n[1] \"andrés\"\n\n[[2]]\n[1] \"beatriz\"\n\n[[3]]\n[1] \"carlos\"\n\n[[4]]\n[1] \"marta\"\n\n[[5]]\n[1] \"pedro\"\n\n[[6]]\n[1] \"sara\"\n\n# Se genera un saludo para cada nombre\nnombres_con_saludo <- lapply(nombres, function(arg1, arg2) paste(arg1, arg2), arg1=\"Hola\")\nnombres_con_saludo\n\n[[1]]\n[1] \"Hola Andrés\"\n\n[[2]]\n[1] \"Hola Beatriz\"\n\n[[3]]\n[1] \"Hola Carlos\"\n\n[[4]]\n[1] \"Hola Marta\"\n\n[[5]]\n[1] \"Hola Pedro\"\n\n[[6]]\n[1] \"Hola Sara\"\n\n\n\n\n7.11.5.3 La función tapply()\nLa función tapply() aplica una función a cada nivel de un factor.\nLa sintaxis de la función es:\n\n# Sintaxis de la función tapply()\ntapply(X, INDEX, FUN)\n\nEn donde:\n- X: es un objeto, tipicamente un vector.\n- INDEX: es una lista que contiene un factor.\n- FUN: es la función que se aplicará a cada elemento de X.\nEn el siguiente ejemplo, se utiliza tapply() para calcular la mediana del ancho del sépalo para cada especie del conjunto de datos iris.\n\ndata(iris)\ntapply(iris$Sepal.Width, iris$Species, median)\n\n    setosa versicolor  virginica \n       3.4        2.8        3.0 \n\n\n\n7.11.5.3.1 Ejercicios\nUtilice la función tapply() para obtener el promedio de las longitudes de los pétalos para cada especie del conjunto de datos iris.\n\n\n\n\n7.11.6 Vectorización\nEn R, muchas operaciones y funciones pueden ser vectorizadas, lo que significa que pueden aplicarse a los elementos de un vector sin necesidad de iterar uno por uno en estos.\nPor ejemplo, considérese el siguiente fragmento de código no vectorizado, que utiliza un ciclo para convertir los números de un vector a sus valores absolutos:\n\nvector_numeros <- c(23, -17, 34, 0, -12, 55)\n\nfor (i in 1:length(vector_numeros)) {\n  if (vector_numeros[i] < 0) {\n    vector_numeros[i] <- -vector_numeros[i]\n  }\n}\n\nvector_numeros\n## [1] 23 17 34  0 12 55\n\nEl siguiente fragmento de código realiza la misma tarea, pero de forma vectorizada:\n\nvector_numeros <- c(23, -17, 34, 0, -12, 55)\n\n# Se usa una expresión lógica para seleccionar los elementos del vector < 0\nnegativos <- vector_numeros < 0\nnegativos\n## [1] FALSE  TRUE FALSE FALSE  TRUE FALSE\n\n# Se cambian los elementos seleccionados en el paso anterior sin utilizar el for\nvector_numeros[negativos] <- vector_numeros[negativos] * -1\n\nvector_numeros\n## [1] 23 17 34  0 12 55\n\n\n7.11.6.1 Ejercicios\nUtilice código vectorizado para implementar una función que reciba como argumento un vector de números y retorne el mismo vector con los elementos impares (solo los impares) elevados al cuadrado."
  },
  {
    "objectID": "07-r.html#recursos-de-interés",
    "href": "07-r.html#recursos-de-interés",
    "title": "7  R - lenguaje de programación para análisis estadístico",
    "section": "7.12 Recursos de interés",
    "text": "7.12 Recursos de interés\nFind Open Datasets and Machine Learning Projects | Kaggle. (s. f.). Recuperado 24 de abril de 2022, de https://www.kaggle.com/datasets\nIndicators | Data. (s.f.). Recuperado 11 de septiembre de 2022, de https://data.worldbank.org/indicator\nNewest «r» Questions. (s. f.). Stack Overflow. Recuperado 24 de abril de 2022, de https://stackoverflow.com/questions/tagged/r\nPapers with Code—Machine Learning Datasets. (s.f.). Recuperado 11 de septiembre de 2022, de https://paperswithcode.com/datasets\nR Language Definition. (s. f.). Recuperado 24 de abril de 2022, de https://cran.r-project.org/doc/manuals/r-release/R-lang.html\nR Package Documentation. (s.f.). Recuperado 11 de septiembre de 2022, de https://rdrr.io/"
  },
  {
    "objectID": "08-quarto.html",
    "href": "08-quarto.html",
    "title": "8  Quarto - sistema de publicación técnica y científica",
    "section": "",
    "text": "Quarto es un sistema de publicación de documentos técnicos y científicos, basado en código abierto. Estos documentos combinan código en R, y sus salidas (ej. tablas, gráficos, mapas), con la sintaxis de Markdown."
  },
  {
    "objectID": "08-quarto.html#trabajo-previo",
    "href": "08-quarto.html#trabajo-previo",
    "title": "8  Quarto - sistema de publicación técnica y científica",
    "section": "8.2 Trabajo previo",
    "text": "8.2 Trabajo previo\n\n8.2.1 Lecturas\nQuarto - Tutorial: Hello, Quarto. (s.f.). Recuperado 22 de agosto de 2022, de https://quarto.org/docs/get-started/hello/rstudio.html"
  },
  {
    "objectID": "08-quarto.html#introducción",
    "href": "08-quarto.html#introducción",
    "title": "8  Quarto - sistema de publicación técnica y científica",
    "section": "8.3 Introducción",
    "text": "8.3 Introducción\nQuarto es un sistema de publicación de documentos técnicos y científicos, basado en código abierto. Entre sus principales capacidades están:\n\nCrear contenido dinámico con los lenguajes R, Python, Julia y Observable.\nCrear documentos Markdown de texto plano o cuadernos de notas de Jupyter.\nPublicar artículos académicos, reportes, presentaciones, sitios web, blogs y libros en HTML, PDF, MS Word, ePub y otros formatos.\nCrear contenido científico, incluyendo ecuaciones, citas bibliográficas, referencias cruzadas, figuras y otros elementos.\n\nQuarto es la siguiente generación de R Markdown, un formato que permite insertar código en R, y sus salidas, en documentos escritos en Markdown. R Markdown fue introducido por Yihui Xie en 2012, junto con el paquete knitr, cuyo propósito es facilitar la investigación reproducible en R a través de la programación literaria (literate programming), un paradigma de programación propuesto por Donald Knuth en 1984.\nLos programas “literarios” (o “letrados”) están escritos como una exposición lógica en un lenguaje humano similar a la explicación de las fórmulas y ecuaciones empleadas para representar y resolver un problema en un texto de física o de matemáticas. En estos programas, se describe el análisis del problema, su solución y su implementación, intercalando código fuente entre los párrafos (y otros contenidos como imágenes, tablas, gráficos estadísticos y mapas), de forma similar a como en los textos de matemáticas se intercalan las fórmulas y las ecuaciones. La programación literaria puede mejorar enormemente un programa, ya que permite documentar ampliamente en qué consiste el problema a resolver, cómo se resuelve, cómo y por qué se adoptó cierto diseño, cómo se optimizó y cómo se implementó en un lenguaje de programación."
  },
  {
    "objectID": "08-quarto.html#anatomía-de-un-documento-quarto",
    "href": "08-quarto.html#anatomía-de-un-documento-quarto",
    "title": "8  Quarto - sistema de publicación técnica y científica",
    "section": "8.4 Anatomía de un documento Quarto",
    "text": "8.4 Anatomía de un documento Quarto\nUn documento Quarto tiene tres tipos de contenido:\n\nMetadatos en YAML.\nNarrativa en Markdown.\nBloques de código fuente.\n\n\n8.4.1 Metadatos en YAML\nTodo documento Quarto inicia con un encabezado en la sintaxis YAML (YAML Ain’t Markup Language), el cual contiene metadatos del documento como el título, el autor, la fecha de creación, el formato de salida y la estructura de la tabla de contenidos, entre muchos otros.\nUn encabezado YAML comienza y termina con tres guiones (---) y contiene un conjunto de campos y valores de la forma:\n---\ncampo01: valor01\ncampo02: valor02\ncampo0n: valor0n\n---\nPor ejemplo, un encabezado YAML típico puede ser el siguiente:\n---\ntitle: Mi primer documento Quarto\nformat:\n  html:\n    toc: true\n    toc_float: true\n---\nLos campos del encabezado que dependen de otros campos se anidan con sangrías de dos espacios.\nLos elementos de metadatos que pueden especificarse en el encabezado, pueden variar de acuerdo al formato de salida, como puede verse en los siguientes enlaces:\n\nElementos de metadatos para HTML\nElementos de metadatos para PDF\nElementos metadatos para MS Word\n\nExisten elementos de metadatos para muchos otros formatos de salida (OpenOffice, ePub, presentaciones, wikis, etc.), como puede apreciarse en la Referencia de Quarto.\n\n\n8.4.2 Narrativa en Markdown\nLa narrativa proporciona estructura y contenido al documento en la forma de encabezados, párrafos, enlaces y otros elementos de la sintaxis de Markdown.\n\n\n8.4.3 Bloques de código fuente\nEn Quarto, los bloques (chunks) de código fuente se delimitan con tres backticks, tanto al inicio como al final del bloque. Los bloques de código en R se identifican con {r} y diferentes opciones identificadas con #|. Los bloques de otros lenguajes de programación se identifican con {python} y {julia}, por ejemplo.\nEl siguiente es un ejemplo de bloque de código en R y su salida:\n```{r}\n#| label: graficacion-cars\n#| include: true\n#| echo: false\n\nplot(\n  x = cars$speed,\n  y = cars$dist,\n  main = \"Velocidad vs distancia de frenado\",\n  xlab = \"Velocidad (MPH)\",\n  ylab = \"Distancia (pies)\"\n)\n```\n\n\n\n\n\nLa opción label se utiliza para etiquetar el bloque y la de include para especificar si se desea que el bloque y sus resultados se incluyan en el documento de salida."
  },
  {
    "objectID": "08-quarto.html#cómo-funciona-quarto",
    "href": "08-quarto.html#cómo-funciona-quarto",
    "title": "8  Quarto - sistema de publicación técnica y científica",
    "section": "8.5 ¿Cómo funciona Quarto?",
    "text": "8.5 ¿Cómo funciona Quarto?\nQuarto se apoya en knitr y en Pandoc. knitr ejecuta el código en R (u otro lenguaje) y convierte los documentos a Markdown. Por su parte, Pandoc exporta los documentos Markdown al formato de salida deseado (ej. HTML, PDF, MS Word, MS PowerPoint). Este proceso se ilustra en la Figura 8.1.\n\n\n\n\n\nFigura 8.1: Conversión de un documento Quarto (.qmd) a su formato de salida. Imagen de quarto.org."
  },
  {
    "objectID": "08-quarto.html#ejercicios",
    "href": "08-quarto.html#ejercicios",
    "title": "8  Quarto - sistema de publicación técnica y científica",
    "section": "8.6 Ejercicios",
    "text": "8.6 Ejercicios\nCon R y Quarto, cree un sitio web en GitHub Pages que contenga visualizaciones de los datos de homicidios ocurridos en Costa Rica en 2022, de acuerdo con las estadísticas publicadas en el sitio de datos abiertos del Organismo de Investigación Judicial (OIJ).\nSeguidamente, se sugiere una serie de pasos para elaborar el sitio. Puede encontrar el código fuente de una solución parcial en https://github.com/gf0604-procesamientodatosgeograficos/2023-i-delitos-graficosbase.\n\nCree un repositorio vacío en su cuenta en GitHub (ej. delitos-graficosbase).\nClone el nuevo repositorio en su computadora con la opción File - New Project - Version Control - Git de RStudio.\nCopie en el repositorio clonado el archivo CSV con los datos de delitos.\nCree un nuevo documento Quarto con la opción File - New File - Quarto Document de RStudio. Llene los metadatos (título, autor, etc.). Elija HTML como formato de salida.\nGuarde el documento en el repositorio clonado, con el nombre index.qmd (RStudio asigna la extensión automáticamente).\nAl inicio del documento, agregue texto Markdown que explique su contenido, la fuente de los datos y la dirección del repositorio en GitHub con el código fuente.\nEn un bloque de código en R, cargue el archivo CSV en un dataframe. Se recomienda asignar una etiqueta al bloque con la opción #| label:. Considere el uso de otras etiquetas Quarto para, por ejemplo, controlar el despliegue de las salidas y del código fuente. Despliegue una muestra de los datos en una tabla.\nEscriba bloques adicionales de código en R que generen los siguientes gráficos (en cada uno, agregue título, fuente y procure que luzca bien mediante colores, tamaños de letras y otros elementos estéticos):\n\nCantidad de delitos por provincia.\n\nGráfico de barras verticales.\nGráfico de barras horizontales.\nGráfico de pastel.\n\nCantidad de delitos por cantón en los 20 cantones con más delitos - gráfico de barras (verticales u horizontales).\nCantidad de delitos por edad de la víctima - gráfico de pastel.\nCantidad de delitos por provincia y edad de la víctima (una barra por provincia con colores según las edades) - gráfico de barras apiladas.\nCantidad de homicidios por provincia y edad de la víctima (una barra por provincia con colores según las edades) - gráfico de barras apiladas.\nCantidad de homicidios por cantón y edad de la víctima en los 20 cantones con más homicidios (una barra por provincia con colores según las edades) - gráfico de barras apiladas.\n\nPresione el botón Render de RStudio para generar el archivo index.html. Este será el arhivo que se desplegará en GitHub Pages.\nSincronice el repositorio local con el repositorio en GitHub, ya sea con comandos de Git o subiendo manualmente los archivos. Si lo hace manualmente, asegúrese de actualizar:\n\nEl documento HTML (index.html).\nEl documento Quarto (index.qmd).\nEl archivo CSV (estadisticaspoliciales2022.csv).\nArchivos temporales (ej. directorio index_files).\n\nGenere el sitio en GitHub Pages con la opción Settings - Pages de GitHub.\nRepita los pasos del 8 al 10 para cada modificación que realice en el documento Quarto."
  },
  {
    "objectID": "09-tidyverse.html",
    "href": "09-tidyverse.html",
    "title": "9  Tidyverse - colección de paquetes para ciencia de datos",
    "section": "",
    "text": "Tidyverse es una colección de paquetes de R orientados a ciencia de datos y que apoya los procesos de importación, organización, transformación, visualización, modelado y comunicación.\nLos paquetes de Tidyverse trabajan con datos tidy (i.e. ordenados, organizados), los cuales deben cumplir con tres características:\n\nCada variable debe tener su propia columna.\nCada observación debe tener su propia fila.\nCada valor debe tener su propia celda.\n\nLas funciones de Tidyverse pueden encadenarse a través del operador pipe (tubo), ya sea el del paquete magrittr (%>%) o el del paquete base de R (|>). Los procesos se enlazan con pipes para formar pipelines (tuberías). En este contexto, un pipeline consiste de una cadena de procesos conectados de forma tal que la salida de cada proceso de la cadena es la entrada del próximo. Esto permite la comunicación y sincronización entre los procesos y evita la anidación de funciones."
  },
  {
    "objectID": "09-tidyverse.html#trabajo-previo",
    "href": "09-tidyverse.html#trabajo-previo",
    "title": "9  Tidyverse - colección de paquetes para ciencia de datos",
    "section": "9.2 Trabajo previo",
    "text": "9.2 Trabajo previo\n\n9.2.1 Lecturas\nWickham, H., & Grolemund, G. (2017). R for Data Science: Import, Tidy, Transform, Visualize, and Model Data (1st ed.). O’Reilly Media. https://r4ds.had.co.nz/\nWickham, H., & Grolemund, G. (s. f.). R para Ciencia de Datos (1era ed.). Recuperado 14 de mayo de 2022, de https://es.r4ds.hadley.nz/\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (s. f.). R for Data Science (2nd ed.). Recuperado 16 de octubre de 2022, de https://r4ds.hadley.nz/"
  },
  {
    "objectID": "09-tidyverse.html#introducción",
    "href": "09-tidyverse.html#introducción",
    "title": "9  Tidyverse - colección de paquetes para ciencia de datos",
    "section": "9.3 Introducción",
    "text": "9.3 Introducción\nTidyverse es una colección de paquetes de R enfocados en ciencia de datos, una discipina que permite convertir datos no procesados en entendimiento, comprensión y conocimiento.\nLa Figura 9.1 ilustra el modelo de un proyecto típico de ciencia de datos, el cual incluye los procesos de importar, ordenar, transformar, visualizar, modelar y comunicar. Todos se articulan mediante programación de computadoras.\n\n\n\n\n\nFigura 9.1: Modelo de ciencia de datos. Imagen de Hadley Wickham.\n\n\n\n\n\nImportar los datos típicamente implica leerlos de un archivo, una base de datos o una interfaz de programación de aplicaciones (API) y cargarlos en un data frame.\nOrdenar u organizar (to tidy) los datos significa colocarlos en estructuras rectangulares de filas y columnas, similares a tablas, de manera que cada fila sea una observación y cada columna una variable.\nTransformar los datos implica la generación de algún subconjunto de filas y columnas, la creación de nuevas variables o el cálculo de estadísticas (ej. conteos, promedios, mínimos, máximos).\nVisualizar los datos (en tablas, gráficos, mapas, etc.) permite encontrar patrones inesperados o formular nuevas preguntas.\nModelar es crear una representación abstracta y estructurada de los datos, con el fin de facilitar su análisis y realizar predicciones.\nComunicar es el último paso y es una actividad crítica de cualquier proyecto de análisis de datos o de ciencia en general.\n\nLos paquetes de Tidyverse comparten filosofía de diseño, gramática y estructuras de datos para apoyar estos procesos del modelo de ciencia de datos. El concepto de Tidyverse fue introducido por Hadley Wickham, quien también ha programado varios de sus paquetes."
  },
  {
    "objectID": "09-tidyverse.html#paquetes",
    "href": "09-tidyverse.html#paquetes",
    "title": "9  Tidyverse - colección de paquetes para ciencia de datos",
    "section": "9.4 Paquetes",
    "text": "9.4 Paquetes\nEl núcleo de Tidyverse está compuesto por ocho paquetes base, los cuales proveen las funcionalidades utilizadas más frecuentemente en análisis de datos:\n\ndplyr: gramática que proporciona un conjunto consistente de “verbos” que resuelven los retos más comunes de transformación de datos.\nggplot2: sistema para la creación declarativa de gráficos, basado en el libro The Grammar of Graphics, de Wilkinson et al..\ntidyr: conjunto de funciones para organizar (to tidy) datos, colocando las observaciones, variables y valores en filas, columnas y celdas de estructuras rectangulares.\nreadr: conjunto de funciones para cargar datos de estructuras rectangulares (ej. archivos CSV) en memoria.\npurr: conjunto de herramientas de programación funcional para trabajar con funciones y vectores.\ntibble: un tibble es una redefinición del concepto de data frame, para hacerlos más eficientes y fáciles de usar.\nstringr: colección de funciones para facilitar el trabajo con hileras de caracteres.\nforcats: colección de funciones para facilitar el trabajo con factores.\n\nHay otros paquetes para tareas más especifícas relacionadas con importación, limpieza y modelado de datos, entre otras. Los paquetes de Tidyverse son de los más descargados, entre la totalidad de paquetes del lenguaje de programación R."
  },
  {
    "objectID": "09-tidyverse.html#instalación-y-carga",
    "href": "09-tidyverse.html#instalación-y-carga",
    "title": "9  Tidyverse - colección de paquetes para ciencia de datos",
    "section": "9.5 Instalación y carga",
    "text": "9.5 Instalación y carga\nLos paquetes de Tidyverse pueden instalarse con la función install.packages(), ya sea de manera conjunta (todos los paquetes básicos) o individualmente:\n\n# Instalación conjunta (toma más tiempo)\ninstall.packages(\"tidyverse\")\n\n# Instalación de paquetes individuales\ninstall.packages(\"ggplot2\")\ninstall.packages(\"dplyr\")\n\nUna vez instalados, los paquetes también pueden cargarse conjunta o separadamente con la función library():\n\n# Carga conjunta\nlibrary(tidyverse)\n\n# Carga de paquetes individuales\nlibrary(ggplot2)\nlibrary(dplyr)\n\nTambién es posible utilizar la notación paquete::funcion() para llamar una función sin necesidad de cargar todo el paquete (siempre y cuando este haya sido instalado):\n\n# Llamado a la función glimpse() del paquete dplyr\ndplyr::glimpse(iris)\n\nRows: 150\nColumns: 5\n$ Sepal.Length <dbl> 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…\n$ Sepal.Width  <dbl> 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…\n$ Petal.Length <dbl> 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…\n$ Petal.Width  <dbl> 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…\n$ Species      <fct> setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…"
  },
  {
    "objectID": "09-tidyverse.html#el-conjunto-de-datos-palmerpenguins",
    "href": "09-tidyverse.html#el-conjunto-de-datos-palmerpenguins",
    "title": "9  Tidyverse - colección de paquetes para ciencia de datos",
    "section": "9.6 El conjunto de datos palmerpenguins",
    "text": "9.6 El conjunto de datos palmerpenguins\npalmerpenguins es un paquete de datos de R ampliamente utilizado para ejemplificar funciones de exploración y visualización, como las de Tidyverse. Es muy popular en ciencia de datos en general y también está disponible para otros lenguajes de programación (ej. Python, Julia). Se utiliza como una alternativa a otros conjuntos de datos usualmente usados para ejemplos como, por ejemplo, iris.\nLos datos de palmerpenguins fueron recolectados entre 2007 y 2009 por la Dr. Kristen Gorman y el Programa de Investigación Ecológica de Largo Plazo (LTER) de la Estación Palmer. Consisten de 344 observaciones de pingüinos de tres especies, las cuales habitan en tres islas del archipiélago Palmer, en la Antártida. Para cada individuo se registraron variables como especie, sexo, masa (peso), longitud de la aleta (flipper), longitud del pico (bill) y profundidad del pico, entre otras.\nEn R, el paquete puede instalarse con la función install.packages():\n\n# Instalación de palmerpenguins\ninstall.packages(\"palmerpenguins\")\n\nUna vez instalado, el paquete puede cargarse con la función library():\n\n# Carga de palmerpenguins\nlibrary(palmerpenguins)\n\nEl paquete contiene dos conjuntos de datos:\n\npenguins_raw: datos sin procesar.\npenguins: subconjunto curado de los datos sin procesar.\n\npalmerpinguins se utilizará en este capítulo, y en los siguientes, para ejemplificar varias de las funcionalidades de Tidyverse.\n\n9.6.1 Ejemplos de visualizaciones\nSeguidamente se muestran varios tipos de gráficos estadísticos generados con la función ggplot() del paquete ggplot2.\n\n9.6.1.1 Gráficos de dispersión\nEste tipo de gráficos muestra relaciones entre variables.\n\n# Gráfico de dispersión de longitud del pico vs masa (peso)\npenguins |>\n  ggplot(aes(x = bill_length_mm, y = body_mass_g)) +\n  geom_point(size = 2) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  ggtitle(\"Longitud del pico vs. masa\") +\n  xlab(\"Longitud del pico (mm)\") +\n  ylab(\"Masa (g)\") +\n  labs(color = \"Especie\", shape = \"Especie\")\n\n\n\n\n\n# Gráfico de dispersión de longitud del pico vs masa (peso) por especie\npenguins |>\n  ggplot(aes(x = bill_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species,\n                 shape = species),\n             size = 2) +\n  geom_smooth(method = \"lm\", se = FALSE, aes(color = species)) +\n  scale_color_manual(values = c(\"darkorange\", \"darkorchid\", \"cyan4\")) +\n  ggtitle(\"Longitud del pico vs. masa por especie\") +\n  xlab(\"Longitud del pico (mm)\") +\n  ylab(\"Masa (g)\") +\n  labs(color = \"Especie\", shape = \"Especie\")\n\n\n\n\n\n\n9.6.1.2 Histogramas\nEste tipo de gráficos muestra distribuciones de variables numéricas.\n\n# Distribución de la variable de masa (peso)\npenguins |>\n  ggplot(aes(x = body_mass_g)) +\n  geom_histogram() +\n  ggtitle(\"Distribución de la variable masa (peso)\") +\n  xlab(\"Masa (g)\") +\n  ylab(\"n\")\n\n\n\n\n\n# Distribución de la variable de masa (peso) por especie\npenguins |>\n  ggplot(aes(x = body_mass_g)) +\n  geom_histogram(aes(fill = species), alpha = 0.5, position = \"identity\") +\n  scale_fill_manual(values = c(\"darkorange\", \"darkorchid\", \"cyan4\")) +\n  ggtitle(\"Distribución de la variable masa (peso) por especie\") +\n  xlab(\"Masa (g)\") +\n  ylab(\"n\") +\n  labs(fill = \"Especie\")\n\n\n\n\n\n\n9.6.1.3 Diagramas de caja\nEste tipo de gráficos muestra datos a través de sus cuartiles.\n\n# Diagrama de caja de la variable masa (peso)\npenguins |>\n  ggplot(aes(y = body_mass_g)) +\n  geom_boxplot() +\n  ylab(\"Masa (g)\")\n\n\n\n\n\n# Diagrama de caja de la variable masa (peso) por especie\npenguins |>\n  ggplot(aes(x = species, y = body_mass_g)) +\n  geom_boxplot(aes(color = species), width = 0.3, show.legend = FALSE) +\n  scale_color_manual(values = c(\"darkorange\", \"purple\", \"cyan4\")) +\n  xlab(\"Especie\") +\n  ylab(\"Masa (g)\")"
  },
  {
    "objectID": "09-tidyverse.html#datos-tidy",
    "href": "09-tidyverse.html#datos-tidy",
    "title": "9  Tidyverse - colección de paquetes para ciencia de datos",
    "section": "9.7 Datos tidy",
    "text": "9.7 Datos tidy\nLos paquetes de Tidyverse trabajan con datos tidy (i.e. ordenados, organizados), un concepto también introducido por Hadley Wickham y que está relacionado con la organización de los datos en estructuras rectangulares de filas y columnas, similares a las tablas o matrices.\nSegún Wickham, los datos tidy deben cumplir con tres características:\n\nCada variable debe tener su propia columna.\nCada observación debe tener su propia fila.\nCada valor debe tener su propia celda.\n\nEstas características se ilustran en la Figura 9.2.\n\n\n\n\n\nFigura 9.2: Datos tidy. Imagen de Hadley Wickham.\n\n\n\n\nEl empleo de este modelo de datos es común en todos los paquetes de Tidyverse, lo que posibilita aprender y usar sus funciones con mayor facilidad. Además, permite invertir menos esfuerzo en lidiar con diferentes modelos de datos y así dedicar más tiempo y esfuerzo en los problemas de análisis a resolver."
  },
  {
    "objectID": "09-tidyverse.html#pipes",
    "href": "09-tidyverse.html#pipes",
    "title": "9  Tidyverse - colección de paquetes para ciencia de datos",
    "section": "9.8 Pipes",
    "text": "9.8 Pipes\nLas funciones de Tidyverse pueden encadenarse a través del operador pipe (tubo), ya sea el del paquete magrittr (%>%) o el del paquete base de R (|>). Los procesos se enlazan con pipes para formar pipelines (tuberías). En este contexto, un pipeline consiste de una cadena de procesos conectados de forma tal que la salida de cada proceso de la cadena es la entrada del próximo. Esto permite la comunicación y sincronización entre los procesos y evita la anidación (nesting) de llamados a funciones.\nEl siguiente ejemplo implementa un pipeline de dos funciones de Tidyverse:\n\n# Cadena de \"pipes\" entre funciones de Tidyverse\npenguins |>\n  dplyr::filter(species == \"Gentoo\") %>% # subconjunto de observaciones\n  select(species, bill_length_mm, flipper_length_mm) # subconjunto de columnas\n\n# A tibble: 124 × 3\n   species bill_length_mm flipper_length_mm\n   <fct>            <dbl>             <int>\n 1 Gentoo            46.1               211\n 2 Gentoo            50                 230\n 3 Gentoo            48.7               210\n 4 Gentoo            50                 218\n 5 Gentoo            47.6               215\n 6 Gentoo            46.5               210\n 7 Gentoo            45.4               211\n 8 Gentoo            46.7               219\n 9 Gentoo            43.3               209\n10 Gentoo            46.8               215\n# ℹ 114 more rows\n\n\nUna alternativa a los pipes es la anidación de llamados a funciones:\n\n# Llamados anidados a funciones\nselect(filter(penguins, species == \"Gentoo\"),\n       species,\n       bill_length_mm,\n       flipper_length_mm)\n\n# A tibble: 124 × 3\n   species bill_length_mm flipper_length_mm\n   <fct>            <dbl>             <int>\n 1 Gentoo            46.1               211\n 2 Gentoo            50                 230\n 3 Gentoo            48.7               210\n 4 Gentoo            50                 218\n 5 Gentoo            47.6               215\n 6 Gentoo            46.5               210\n 7 Gentoo            45.4               211\n 8 Gentoo            46.7               219\n 9 Gentoo            43.3               209\n10 Gentoo            46.8               215\n# ℹ 114 more rows\n\n\nEl uso de pipes permite un funcionamiento homogéneo de las funciones de Tidyverse:\n\nEl primer argumento es un data frame. Puede omitirse si la función recibe el data frame a través del operador pipe.\nLos argumentos siguientes describen que hacer con el data frame, utilizando los nombres de las columnas (sin comillas).\n\nEl resultado es un nuevo data frame."
  },
  {
    "objectID": "09-tidyverse.html#recursos-de-interés",
    "href": "09-tidyverse.html#recursos-de-interés",
    "title": "9  Tidyverse - colección de paquetes para ciencia de datos",
    "section": "9.9 Recursos de interés",
    "text": "9.9 Recursos de interés\nCanelón, S. (s.f.). Slides | Silvia Canelón—An Antarctic Tour of the Tidyverse. Recuperado 16 de octubre de 2022, de https://slides.silviacanelon.com/tour-of-the-tidyverse-v2/#/title-slide\nWickham, H. (2014). Tidy Data. Journal of Statistical Software, 59(1), 1-23. https://doi.org/10.18637/jss.v059.i10"
  },
  {
    "objectID": "10-dplyr.html",
    "href": "10-dplyr.html",
    "title": "10  dplyr - gramática para manipulación de datos",
    "section": "",
    "text": "El paquete dplyr proporciona un conjunto de funciones que ayudan a solucionar las tareas de transformación de datos más comunes, entre las que están la selección de columnas, el ordenamiento de filas, el filtrado de filas, la creación o modificación de columnas y los cálculos en grupos de filas. Estas transformaciones son usualmente requeridas antes de la visualización y el modelado de los datos."
  },
  {
    "objectID": "10-dplyr.html#trabajo-previo",
    "href": "10-dplyr.html#trabajo-previo",
    "title": "10  dplyr - gramática para manipulación de datos",
    "section": "10.2 Trabajo previo",
    "text": "10.2 Trabajo previo\n\n10.2.1 Lecturas\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (s. f.). R for Data Science (2nd ed.) Chapter 4 - Data transformation. Recuperado 28 de abril de 2023, de https://r4ds.hadley.nz/data-transform.html"
  },
  {
    "objectID": "10-dplyr.html#introducción",
    "href": "10-dplyr.html#introducción",
    "title": "10  dplyr - gramática para manipulación de datos",
    "section": "10.3 Introducción",
    "text": "10.3 Introducción\nEl paquete dplyr de Tidyverse es descrito como una gramática para la manipulación de datos, la cual proporciona un conjunto consistente de verbos que ayuda a solucionar los retos de procesamiento de datos más comunes. Los principales “verbos” (i.e. funciones) de esta gramática son:\n\nselect(): selecciona columnas con base en sus nombres.\nfilter(): selecciona filas con base en sus valores.\narrange(): cambia el orden de las filas.\nmutate(): crea nuevas columnas, las cuales se expresan como funciones de columnas existentes.\nsummarize(): agrupa y resume valores.\n\nTodas estas operaciones pueden combinarse con la función group_by(), la cual ejecuta cualquiera de las operaciones anteriores “en grupo”. Además, dplyr proporciona funciones adicionales para tareas más específicas.\nLas funciones de dplyr pueden encadenarse a través del operador pipe (tubo), ya sea el del paquete magrittr (%>%) o el del paquete base de R (|>). Los procesos se enlazan con pipes para formar pipelines (tuberías).\nTodas las funciones de dplyr trabajan de manera similar:\n\nEl primer argumento siempre es un data frame. Puede omitirse si la función recibe el data frame a través del operador pipe.\nLos argumentos siguientes describen que hacer con el data frame, utilizando los nombres de las columnas (sin comillas).\n\nEl resultado siempre es un nuevo data frame.\n\nYa que cada función de dplyr se especializa en una sola tarea, usualmente es necesario encadenar funciones mediante pipes para lograr un objetivo de procesamiento de datos. Por ejemplo, el siguiente bloque de código usa tres verbos, o funciones, de dplyr para obtener la masa promedio de cada especie de pingüinos que habita en la isla Biscoe.\n\n# Cálculo de la masa promedio para cada especie de pingüinos\n# que habita en la isla Biscoe\npenguins |>\n  filter(island == \"Biscoe\") |> \n  group_by(species) |> \n  summarize(\n    body_mass_g_mean = mean(body_mass_g, na.rm = TRUE)\n  )\n\nA tibble: 2 × 2\nspecies body_mass_g_mean\n<fct>              <dbl>\nAdelie          3710.659\nGentoo          5076.016"
  },
  {
    "objectID": "10-dplyr.html#instalación-y-carga",
    "href": "10-dplyr.html#instalación-y-carga",
    "title": "10  dplyr - gramática para manipulación de datos",
    "section": "10.4 Instalación y carga",
    "text": "10.4 Instalación y carga\nEl paquete dplyr puede instalarse junto con todos los demás paquete de Tidyverse o de manera individual:\n\n# Instalación conjunta de Tidyverse\ninstall.packages(\"tidyverse\")\n\n# Instalación individual\ninstall.packages(\"dplyr\")\n\nUna vez instalado, dplyr puede cargarse con la función library():\n\n# Carga conjunta de Tidyverse\nlibrary(tidyverse)\n\n# Carga individual\nlibrary(dplyr)\n\nSeguidamente, se cargan algunos paquetes adicionales que se utilizan en este capítulo.\n\n# Carga de readr, paquete para lectura de datos\nlibrary(readr)\n\n# Carga de tidyr, paquete para creación de datos \"tidy\"\nlibrary(tidyr)"
  },
  {
    "objectID": "10-dplyr.html#conjuntos-de-datos-para-ejemplos",
    "href": "10-dplyr.html#conjuntos-de-datos-para-ejemplos",
    "title": "10  dplyr - gramática para manipulación de datos",
    "section": "10.5 Conjuntos de datos para ejemplos",
    "text": "10.5 Conjuntos de datos para ejemplos\nEn los ejemplos de este capítulo, se utilizan dos conjunto de datos:\n\npenguins, contenido en el paquete palmerpenguins.\nEstadísticas de delitos cometidos en 2022, disponibles en el sitio de datos abiertos del Organismo de Investigación Judicial (OIJ).\n\n\n10.5.1 penguins\nPara cargar el conjunto de datos penguins, basta con cargar el paquete palmerpenguins.\n\n# Carga del paquete de datos palmerpenguins\nlibrary(palmerpenguins)\n\nLa función glimpse() despliega la estructura de un conjunto de datos, incluyendo los nombres de las columnas, sus tipos de datos y una muestra de estos:\n\n# Estructura del conjunto de datos penguins\nglimpse(penguins)\n\nRows: 344\nColumns: 8\n$ species           <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            <fct> Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    <dbl> 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm <int> 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       <int> 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               <fct> male, female, female, NA, female, male, female, male…\n$ year              <int> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nUn conjunto de datos puede visualizarse al escribir su nombre en la consola de R o en un programa:\n\n# Despliegue de los datos de penguins\npenguins\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n\n\npenguins es un tibble, un tipo especial de data frame que se utiliza en Tidyverse. La diferencia más importante entre un tibble y un data frame es la manera en la que se imprimen: los tibbles están diseñados para conjuntos de datos grandes, por lo que solo muestran los primeros registros y las columnas que caben en la pantalla. Un data frame regular muestra todas sus columnas y muchos más registros, lo que dificulta su visualización. En general, un data frame regular y un tibble pueden tratarse indistintamente.\n\n\n10.5.2 Estadísticas de delitos cometidos en 2022\nSe utiliza la función readr::read_csv() para leer un archivo CSV almacenado en el repositorio GitHub de este curso, con los datos de las estadísticas policiales proporcionados por el OIJ en formato Excel. readr::read_csv() es más eficiente que read.csv() (del paquete base de R) y tiene otras ventajas como detección automática de tipos de datos y mejor integración con otros paquetes de Tidyverse (ej. dplyr, tidyr, ggplot2).\n\n# Carga de los datos de delitos cometidos en 2022\ndelitos_2022 <-\n  read.csv(\n    \"https://raw.githubusercontent.com/gf0604-procesamientodatosgeograficos/2023-i/main/datos/oij/estadisticas-policiales/estadisticaspoliciales2022.csv\"\n  )\n\nEstructura del conjunto de datos:\n\n# Estructura de los datos de delitos cometidos en 2022\nglimpse(delitos_2022)\n\nRows: 96,651\nColumns: 12\n$ Delito       <chr> \"DELITOS CONTRA LA ADMINISTRACION DE JUSTICIA\", \"DELITOS …\n$ SubDelito    <chr> \"FALSAS ACUSACIONES\", \"AMENAZA A UN FUNCIONARIO PUBLICO\",…\n$ Fecha        <chr> \"12/31/2022\", \"12/31/2022\", \"12/31/2022\", \"12/31/2022\", \"…\n$ Hora         <chr> \"09:00:00 - 11:59:59\", \"12:00:00 - 14:59:59\", \"15:00:00 -…\n$ Victima      <chr> \"VEHICULO\", \"PERSONA\", \"PERSONA\", \"PERSONA\", \"PERSONA\", \"…\n$ SubVictima   <chr> \"SERVICIO PUBLICO/TAXI LEGAL O PIRATA/AUTOBUS\", \"OTRO O I…\n$ Edad         <chr> \"Adulto Mayor\", \"Mayor de edad\", \"Mayor de edad\", \"Mayor …\n$ Genero       <chr> \"Adulto Mayor\", \"Mayor de edad\", \"Mayor de edad\", \"Mayor …\n$ Nacionalidad <chr> \"COSTA RICA\", \"COSTA RICA\", \"COSTA RICA\", \"COSTA RICA\", \"…\n$ Provincia    <chr> \"SAN JOSE\", \"SAN JOSE\", \"LIMON\", \"CARTAGO\", \"PUNTARENAS\",…\n$ Canton       <chr> \"SAN JOSE\", \"PEREZ ZELEDON\", \"SIQUIRRES\", \"CARTAGO\", \"QUE…\n$ Distrito     <chr> \"HOSPITAL\", \"DANIEL FLORES\", \"SIQUIRRES\", \"GUADALUPE\", \"Q…\n\n\nDespliegue de los datos (debido a que delitos_2022 es un data frame, pero no un tibble, se limitan las filas y columnas que se muestran):\n\n# Despliegue de una muestra de los datos de delitos cometidos en 2022\ndelitos_2022[1:10, c(\"Delito\", \"Victima\", \"Provincia\")]\n\n                                         Delito  Victima  Provincia\n1  DELITOS CONTRA LA ADMINISTRACION DE JUSTICIA VEHICULO   SAN JOSE\n2           DELITOS CONTRA LA AUTORIDAD PUBLICA  PERSONA   SAN JOSE\n3                    DELITOS CONTRA LA LIBERTAD  PERSONA      LIMON\n4                    DELITOS CONTRA LA LIBERTAD  PERSONA    CARTAGO\n5                    DELITOS CONTRA LA LIBERTAD  PERSONA PUNTARENAS\n6                    DELITOS CONTRA LA LIBERTAD  PERSONA   SAN JOSE\n7                    DELITOS CONTRA LA LIBERTAD  PERSONA   SAN JOSE\n8                    DELITOS CONTRA LA LIBERTAD  PERSONA   SAN JOSE\n9                    DELITOS CONTRA LA LIBERTAD  PERSONA   SAN JOSE\n10                   DELITOS CONTRA LA LIBERTAD  PERSONA   SAN JOSE\n\n\nEn RStudio, un conjunto de datos completo puede verse más cómodamente con la función View()."
  },
  {
    "objectID": "10-dplyr.html#funciones",
    "href": "10-dplyr.html#funciones",
    "title": "10  dplyr - gramática para manipulación de datos",
    "section": "10.6 Funciones",
    "text": "10.6 Funciones\nEn esta sección, se describen y ejemplifican las principales funciones de dplyr.\n\n10.6.1 select()\nLa función select() selecciona (y opcionalmente renombra) columnas de un data frame con base en sus nombres.\n\n# Selección de las columnas species, bill_length_mm y sex\npenguins |>\n  select(species, bill_length_mm, sex)\n\n# A tibble: 344 × 3\n   species bill_length_mm sex   \n   <fct>            <dbl> <fct> \n 1 Adelie            39.1 male  \n 2 Adelie            39.5 female\n 3 Adelie            40.3 female\n 4 Adelie            NA   <NA>  \n 5 Adelie            36.7 female\n 6 Adelie            39.3 male  \n 7 Adelie            38.9 female\n 8 Adelie            39.2 male  \n 9 Adelie            34.1 <NA>  \n10 Adelie            42   <NA>  \n# ℹ 334 more rows\n\n\nCambio de nombres de columnas:\n\n# Selección y cambio de nombre de las columnas \n# species, bill_length_mm y sex\npenguins |>\n  select(especie = species,\n         longitud_pico_mm = bill_length_mm,\n         sexo = sex)\n\n# A tibble: 344 × 3\n   especie longitud_pico_mm sexo  \n   <fct>              <dbl> <fct> \n 1 Adelie              39.1 male  \n 2 Adelie              39.5 female\n 3 Adelie              40.3 female\n 4 Adelie              NA   <NA>  \n 5 Adelie              36.7 female\n 6 Adelie              39.3 male  \n 7 Adelie              38.9 female\n 8 Adelie              39.2 male  \n 9 Adelie              34.1 <NA>  \n10 Adelie              42   <NA>  \n# ℹ 334 more rows\n\n\nEl operador : permite seleccionar un rango de columnas continuas:\n\n# Selección de las columnas desde species a flipper_length_mm\npenguins |>\n  select(species:flipper_length_mm)\n\n# A tibble: 344 × 5\n   species island    bill_length_mm bill_depth_mm flipper_length_mm\n   <fct>   <fct>              <dbl>         <dbl>             <int>\n 1 Adelie  Torgersen           39.1          18.7               181\n 2 Adelie  Torgersen           39.5          17.4               186\n 3 Adelie  Torgersen           40.3          18                 195\n 4 Adelie  Torgersen           NA            NA                  NA\n 5 Adelie  Torgersen           36.7          19.3               193\n 6 Adelie  Torgersen           39.3          20.6               190\n 7 Adelie  Torgersen           38.9          17.8               181\n 8 Adelie  Torgersen           39.2          19.6               195\n 9 Adelie  Torgersen           34.1          18.1               193\n10 Adelie  Torgersen           42            20.2               190\n# ℹ 334 more rows\n\n\nSelección de todas las columnas que cumplen una condición:\n\n# Selección de las columnas numéricas\npenguins |>\n  select(where(is.numeric))\n\n# A tibble: 344 × 5\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n            <dbl>         <dbl>             <int>       <int> <int>\n 1           39.1          18.7               181        3750  2007\n 2           39.5          17.4               186        3800  2007\n 3           40.3          18                 195        3250  2007\n 4           NA            NA                  NA          NA  2007\n 5           36.7          19.3               193        3450  2007\n 6           39.3          20.6               190        3650  2007\n 7           38.9          17.8               181        3625  2007\n 8           39.2          19.6               195        4675  2007\n 9           34.1          18.1               193        3475  2007\n10           42            20.2               190        4250  2007\n# ℹ 334 more rows\n\n\n\n\n10.6.2 filter()\nLa función filter() retorna un subconjunto de un data frame con todas las filas que satisfacen una condición (i.e. expresión lógica).\nPuede utilizar los operadores relacionales:\n\n== (igual que) Note la diferencia con el operador de asignación: =\n!= (diferente de)\n> (estrictamente mayor que), >= (mayor o igual que)\n< (estrictamente menor que), <= (menor o igual que)\n\nY los operadores lógicos:\n\n& (AND o Y lógico)\n| (OR u O lógico)\n! (NOT o NO lógico)\n\nEjemplos de uso de expresiones y operadores lógicos:\n\n# Pingüinos de la especie 'Adelie' \n# con longitud del pico mayor o igual a 45 mm\npenguins |>\n  filter(species == 'Adelie' & bill_length_mm >= 45)\n\n# A tibble: 3 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           46            21.5               194        4200\n2 Adelie  Torgersen           45.8          18.9               197        4150\n3 Adelie  Biscoe              45.6          20.3               191        4600\n# ℹ 2 more variables: sex <fct>, year <int>\n\n\n\n# Pingüinos de las especies 'Adelie' o 'Gentoo'\npenguins |>\n  filter(species == 'Adelie' | species == 'Gentoo')\n\n# A tibble: 276 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 266 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n\n\n\n# Pingüinos de especies diferentes a 'Chinstrap'\npenguins |>\n  filter(!(species == 'Chinstrap'))\n\n# A tibble: 276 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 266 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n\n\n\n# Homicidios cometidos en el cantón de Esparza\ndelitos_2022 |>\n  filter(SubDelito == \"HOMICIDIO\" & Canton == \"ESPARZA\") |>\n  select(SubDelito, Canton, Fecha, Victima, Edad, Nacionalidad)\n\n  SubDelito  Canton      Fecha Victima          Edad Nacionalidad\n1 HOMICIDIO ESPARZA 12/24/2022 PERSONA Mayor de edad   COSTA RICA\n2 HOMICIDIO ESPARZA 06/13/2022 PERSONA Mayor de edad   COSTA RICA\n3 HOMICIDIO ESPARZA 05/13/2022 PERSONA   Desconocido  Desconocido\n4 HOMICIDIO ESPARZA 04/08/2022 PERSONA Mayor de edad     COLOMBIA\n5 HOMICIDIO ESPARZA 03/20/2022 PERSONA Mayor de edad   COSTA RICA\n6 HOMICIDIO ESPARZA 01/06/2022 PERSONA Menor de edad   COSTA RICA\n\n\n\n# Homicidios cometidos en el cantón de Esparza \n# a personas no costarricenses\ndelitos_2022 |>\n  filter(SubDelito == \"HOMICIDIO\" &\n      Canton == \"ESPARZA\" & Nacionalidad != \"COSTA RICA\") |>\n  select(SubDelito, Canton, Fecha, Victima, Edad, Nacionalidad)\n\n  SubDelito  Canton      Fecha Victima          Edad Nacionalidad\n1 HOMICIDIO ESPARZA 05/13/2022 PERSONA   Desconocido  Desconocido\n2 HOMICIDIO ESPARZA 04/08/2022 PERSONA Mayor de edad     COLOMBIA\n\n\n\n# Pingüinos con longitud del pico mayor o igual al promedio\n#   El argumento lógico na.rm de mean() \n#   indica si los valores NA (\"not available\") \n#   deben ser removidos antes del cálculo\npenguins |>\n  filter(bill_length_mm >= mean(bill_length_mm, na.rm = TRUE))\n\n# A tibble: 175 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           46            21.5               194        4200\n 2 Adelie  Dream               44.1          19.7               196        4400\n 3 Adelie  Torgersen           45.8          18.9               197        4150\n 4 Adelie  Biscoe              45.6          20.3               191        4600\n 5 Adelie  Torgersen           44.1          18                 210        4000\n 6 Gentoo  Biscoe              46.1          13.2               211        4500\n 7 Gentoo  Biscoe              50            16.3               230        5700\n 8 Gentoo  Biscoe              48.7          14.1               210        4450\n 9 Gentoo  Biscoe              50            15.2               218        5700\n10 Gentoo  Biscoe              47.6          14.5               215        5400\n# ℹ 165 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n\n\nCondiciones relacionadas con valores NA (nulos):\n\n# Filas con valor NA en la columna sex\npenguins |>\n  select(species, island, sex) |>\n  filter(is.na(sex))\n\n# A tibble: 11 × 3\n   species island    sex  \n   <fct>   <fct>     <fct>\n 1 Adelie  Torgersen <NA> \n 2 Adelie  Torgersen <NA> \n 3 Adelie  Torgersen <NA> \n 4 Adelie  Torgersen <NA> \n 5 Adelie  Torgersen <NA> \n 6 Adelie  Dream     <NA> \n 7 Gentoo  Biscoe    <NA> \n 8 Gentoo  Biscoe    <NA> \n 9 Gentoo  Biscoe    <NA> \n10 Gentoo  Biscoe    <NA> \n11 Gentoo  Biscoe    <NA> \n\n\nLa función tidyr::drop_na() remueve las filas con valores NA en una o varias columnas.\n\n# Filas con valor diferente a NA en la columna sex\npenguins |>\n  select(species,\n         bill_length_mm,\n         bill_depth_mm,\n         flipper_length_mm,\n         body_mass_g,\n         sex) |>\n  drop_na(sex)\n\n# A tibble: 333 × 6\n   species bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex   \n   <fct>            <dbl>         <dbl>             <int>       <int> <fct> \n 1 Adelie            39.1          18.7               181        3750 male  \n 2 Adelie            39.5          17.4               186        3800 female\n 3 Adelie            40.3          18                 195        3250 female\n 4 Adelie            36.7          19.3               193        3450 female\n 5 Adelie            39.3          20.6               190        3650 male  \n 6 Adelie            38.9          17.8               181        3625 female\n 7 Adelie            39.2          19.6               195        4675 male  \n 8 Adelie            41.1          17.6               182        3200 female\n 9 Adelie            38.6          21.2               191        3800 male  \n10 Adelie            34.6          21.1               198        4400 male  \n# ℹ 323 more rows\n\n\n\n# Filas con valor diferente a NA en cualquier columna\npenguins |>\n  select(species,\n         bill_length_mm,\n         bill_depth_mm,\n         flipper_length_mm,\n         body_mass_g,\n         sex) |>\n  drop_na()\n\n# A tibble: 333 × 6\n   species bill_length_mm bill_depth_mm flipper_length_mm body_mass_g sex   \n   <fct>            <dbl>         <dbl>             <int>       <int> <fct> \n 1 Adelie            39.1          18.7               181        3750 male  \n 2 Adelie            39.5          17.4               186        3800 female\n 3 Adelie            40.3          18                 195        3250 female\n 4 Adelie            36.7          19.3               193        3450 female\n 5 Adelie            39.3          20.6               190        3650 male  \n 6 Adelie            38.9          17.8               181        3625 female\n 7 Adelie            39.2          19.6               195        4675 male  \n 8 Adelie            41.1          17.6               182        3200 female\n 9 Adelie            38.6          21.2               191        3800 male  \n10 Adelie            34.6          21.1               198        4400 male  \n# ℹ 323 more rows\n\n\n\n\n10.6.3 arrange()\nLa función arrange() cambia el orden de las filas de un data frame de acuerdo con los valores de las columnas seleccionadas.\n\n# Ordenamiento ascendente por las columnas \n# bill_length_mm y bill_depth_mm\npenguins |>\n  arrange(bill_length_mm, bill_depth_mm)\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Dream               32.1          15.5               188        3050\n 2 Adelie  Dream               33.1          16.1               178        2900\n 3 Adelie  Torgersen           33.5          19                 190        3600\n 4 Adelie  Dream               34            17.1               185        3400\n 5 Adelie  Torgersen           34.1          18.1               193        3475\n 6 Adelie  Torgersen           34.4          18.4               184        3325\n 7 Adelie  Biscoe              34.5          18.1               187        2900\n 8 Adelie  Torgersen           34.6          17.2               189        3200\n 9 Adelie  Torgersen           34.6          21.1               198        4400\n10 Adelie  Biscoe              35            17.9               190        3450\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n\n\nPor defecto, las columnas se ordenan de manera acendente. Si se desea un orden descendente, puede utilizarse la función desc().\n\n# Ordenamiento descendente por las columnas \n# bill_length_mm y bill_depth_mm\npenguins |>\n  arrange(desc(bill_length_mm), desc(bill_depth_mm))\n\n# A tibble: 344 × 8\n   species   island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>     <fct>           <dbl>         <dbl>             <int>       <int>\n 1 Gentoo    Biscoe           59.6          17                 230        6050\n 2 Chinstrap Dream            58            17.8               181        3700\n 3 Gentoo    Biscoe           55.9          17                 228        5600\n 4 Chinstrap Dream            55.8          19.8               207        4000\n 5 Gentoo    Biscoe           55.1          16                 230        5850\n 6 Gentoo    Biscoe           54.3          15.7               231        5650\n 7 Chinstrap Dream            54.2          20.8               201        4300\n 8 Chinstrap Dream            53.5          19.9               205        4500\n 9 Gentoo    Biscoe           53.4          15.8               219        5500\n10 Chinstrap Dream            52.8          20                 205        4550\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n\n\nNótese que los valores NA se ubican al final de cualquier ordenamiento.\n\n\n10.6.4 mutate()\nLa función mutate() crea o modifica columnas en un data frame.\n\n# Creación de la columna body_mass_kg,\n# correspondiente al valor de body_mass_g, pero expresado en kg\npenguins |>\n  select(species, body_mass_g) |>\n  mutate(body_mass_kg = body_mass_g/1000)\n\n# A tibble: 344 × 3\n   species body_mass_g body_mass_kg\n   <fct>         <int>        <dbl>\n 1 Adelie         3750         3.75\n 2 Adelie         3800         3.8 \n 3 Adelie         3250         3.25\n 4 Adelie           NA        NA   \n 5 Adelie         3450         3.45\n 6 Adelie         3650         3.65\n 7 Adelie         3625         3.62\n 8 Adelie         4675         4.68\n 9 Adelie         3475         3.48\n10 Adelie         4250         4.25\n# ℹ 334 more rows\n\n\n\n# Creación de las columnas body_mass_g_mean (promedio de masa) y\n# body_mass_g_normalized (masa normalizada con respecto al promedio)\npenguins |>\n  select(species, body_mass_g) |>\n  mutate(body_mass_g_mean = mean(body_mass_g, na.rm = TRUE)) |>\n  mutate(body_mass_g_normalized = body_mass_g / body_mass_g_mean)\n\n# A tibble: 344 × 4\n   species body_mass_g body_mass_g_mean body_mass_g_normalized\n   <fct>         <int>            <dbl>                  <dbl>\n 1 Adelie         3750            4202.                  0.892\n 2 Adelie         3800            4202.                  0.904\n 3 Adelie         3250            4202.                  0.773\n 4 Adelie           NA            4202.                 NA    \n 5 Adelie         3450            4202.                  0.821\n 6 Adelie         3650            4202.                  0.869\n 7 Adelie         3625            4202.                  0.863\n 8 Adelie         4675            4202.                  1.11 \n 9 Adelie         3475            4202.                  0.827\n10 Adelie         4250            4202.                  1.01 \n# ℹ 334 more rows\n\n\n\n# Creación de las columnas \n# Fecha_Date (tipo Date), Anio, Mes y Dia (enteros)\ndelitos_2022 |>\n  select(Fecha) |>\n  mutate(Fecha_Date = as.Date(delitos_2022$Fecha, format=\"%m/%d/%Y\")) |>\n  mutate(Anio = as.integer(format(as.Date(delitos_2022$Fecha, format=\"%m/%d/%Y\"), \"%Y\"))) |>  \n  mutate(Dia = as.integer(format(as.Date(delitos_2022$Fecha, format=\"%m/%d/%Y\"), \"%m\"))) |>\n  mutate(Mes = as.integer(format(as.Date(delitos_2022$Fecha, format=\"%m/%d/%Y\"), \"%d\"))) |>\n  slice_head(n = 10)\n\n        Fecha Fecha_Date Anio Dia Mes\n1  12/31/2022 2022-12-31 2022  12  31\n2  12/31/2022 2022-12-31 2022  12  31\n3  12/31/2022 2022-12-31 2022  12  31\n4  12/31/2022 2022-12-31 2022  12  31\n5  12/31/2022 2022-12-31 2022  12  31\n6  12/31/2022 2022-12-31 2022  12  31\n7  12/31/2022 2022-12-31 2022  12  31\n8  12/31/2022 2022-12-31 2022  12  31\n9  12/31/2022 2022-12-31 2022  12  31\n10 12/31/2022 2022-12-31 2022  12  31\n\n\nLa función group_by() agrupa una o más columnas. Generalmente, esto se hace con el objetivo de rea\n\n# Creación de la columnas \n# body_mass_g_mean_species (promedio de masa de la especie) y\n# body_mass_g_species_normalized (masa normalizada con respecto al promedio de la especie)\npenguins |>\n  select(species, body_mass_g) |>\n  group_by(species) |>\n  mutate(body_mass_g_mean_species = mean(body_mass_g, na.rm = TRUE)) |>\n  mutate(body_mass_g_species_normalized = body_mass_g / body_mass_g_mean_species)\n\n# A tibble: 344 × 4\n# Groups:   species [3]\n   species body_mass_g body_mass_g_mean_species body_mass_g_species_normalized\n   <fct>         <int>                    <dbl>                          <dbl>\n 1 Adelie         3750                    3701.                          1.01 \n 2 Adelie         3800                    3701.                          1.03 \n 3 Adelie         3250                    3701.                          0.878\n 4 Adelie           NA                    3701.                         NA    \n 5 Adelie         3450                    3701.                          0.932\n 6 Adelie         3650                    3701.                          0.986\n 7 Adelie         3625                    3701.                          0.980\n 8 Adelie         4675                    3701.                          1.26 \n 9 Adelie         3475                    3701.                          0.939\n10 Adelie         4250                    3701.                          1.15 \n# ℹ 334 more rows\n\n\n\n\n10.6.5 summarize()\nLa función summarize() se utiliza generalmente junto con la función group_by() para realizar cálculos en grupos de filas de un data frame. group_by() agrupa las filas y summarize() realiza los cálculos (ej. sumas, promedios) en las columnas, para cada grupo. El resultado es un nuevo data frame con una fila por grupo. Si no hay agrupación, se retorna una sola fila correspondiente a los cálculos para todo el data frame.\nEjemplos de cálculos en grupos:\n\n# Creación de un data frame con las columnas calculadas de \n# mínimo, máximo y promedio de masa,\n# y cantidad de individuos para cada especie\npenguins |>\n  group_by(species) |>\n  summarize(\n    body_mass_g_min = min(body_mass_g, na.rm = TRUE),\n    body_mass_g_max = max(body_mass_g, na.rm = TRUE),\n    body_mass_g_mean = mean(body_mass_g, na.rm = TRUE),\n    n = n()\n  )\n\n# A tibble: 3 × 5\n  species   body_mass_g_min body_mass_g_max body_mass_g_mean     n\n  <fct>               <int>           <int>            <dbl> <int>\n1 Adelie               2850            4775            3701.   152\n2 Chinstrap            2700            4800            3733.    68\n3 Gentoo               3950            6300            5076.   124\n\n\nLa función n() cuenta la cantidad de filas en un grupo.\n\n# Creación de un data frame con la cantidad de homicidios \n# por provincia, cantón\ndelitos_2022 |>\n  filter(SubDelito == \"HOMICIDIO\") |>\n  group_by(Provincia, Canton) |>\n  summarize(\n    homicidios_2022 = n()\n  ) |>\n  arrange(desc(homicidios_2022)) |>\n  print(n = Inf)\n\n# A tibble: 68 × 3\n# Groups:   Provincia [7]\n   Provincia  Canton        homicidios_2022\n   <chr>      <chr>                   <int>\n 1 SAN JOSE   SAN JOSE                   48\n 2 LIMON      LIMON                      47\n 3 PUNTARENAS PUNTARENAS                 43\n 4 ALAJUELA   ALAJUELA                   42\n 5 LIMON      POCOCI                     38\n 6 LIMON      MATINA                     25\n 7 LIMON      GUACIMO                    17\n 8 ALAJUELA   SAN CARLOS                 16\n 9 ALAJUELA   SAN RAMON                  15\n10 CARTAGO    CARTAGO                    15\n11 SAN JOSE   GOICOECHEA                 15\n12 HEREDIA    SARAPIQUI                  14\n13 PUNTARENAS CORREDORES                 14\n14 CARTAGO    LA UNION                   12\n15 HEREDIA    HEREDIA                    12\n16 PUNTARENAS GARABITO                   11\n17 GUANACASTE LIBERIA                    10\n18 GUANACASTE SANTA CRUZ                 10\n19 LIMON      SIQUIRRES                   9\n20 GUANACASTE NICOYA                      8\n21 LIMON      TALAMANCA                   8\n22 SAN JOSE   ASERRI                      8\n23 HEREDIA    SANTO DOMINGO               7\n24 PUNTARENAS BUENOS AIRES                7\n25 SAN JOSE   DESAMPARADOS                7\n26 SAN JOSE   TIBAS                       7\n27 GUANACASTE CARRILLO                    6\n28 GUANACASTE LA CRUZ                     6\n29 PUNTARENAS ESPARZA                     6\n30 SAN JOSE   ALAJUELITA                  6\n31 ALAJUELA   GRECIA                      5\n32 GUANACASTE BAGACES                     5\n33 GUANACASTE CANAS                       5\n34 PUNTARENAS GOLFITO                     5\n35 PUNTARENAS OSA                         5\n36 PUNTARENAS PARRITA                     5\n37 PUNTARENAS QUEPOS                      5\n38 SAN JOSE   PEREZ ZELEDON               5\n39 ALAJUELA   LOS CHILES                  4\n40 ALAJUELA   POAS                        4\n41 CARTAGO    TURRIALBA                   4\n42 HEREDIA    BARVA                       4\n43 HEREDIA    SAN RAFAEL                  4\n44 PUNTARENAS COTO BRUS                   4\n45 PUNTARENAS MONTES DE ORO               4\n46 ALAJUELA   ATENAS                      3\n47 ALAJUELA   NARANJO                     3\n48 ALAJUELA   RIO CUARTO                  3\n49 CARTAGO    EL GUARCO                   3\n50 CARTAGO    OREAMUNO                    3\n51 CARTAGO    PARAISO                     3\n52 GUANACASTE TILARAN                     3\n53 SAN JOSE   ESCAZU                      3\n54 SAN JOSE   MORAVIA                     3\n55 ALAJUELA   OROTINA                     2\n56 ALAJUELA   SARCHÍ                      2\n57 ALAJUELA   UPALA                       2\n58 SAN JOSE   CURRIDABAT                  2\n59 SAN JOSE   SANTA ANA                   2\n60 SAN JOSE   TURRUBARES                  2\n61 ALAJUELA   PALMARES                    1\n62 ALAJUELA   ZARCERO                     1\n63 CARTAGO    JIMENEZ                     1\n64 HEREDIA    FLORES                      1\n65 HEREDIA    SAN ISIDRO                  1\n66 HEREDIA    SANTA BARBARA               1\n67 SAN JOSE   MONTES DE OCA               1\n68 SAN JOSE   PURISCAL                    1\n\n\nLa función print() se utiliza para especificar la cantidad de filas que se imprimirán (Inf quiere decir que se imprimirán todas).\n\n# Creación de un data frame con la cantidad de registros \n# por delito y subdelito\ndelitos_2022 |>\n  group_by(Delito, SubDelito) |>\n  summarize(\n    n = n()\n  ) |>\n  arrange(desc(n)) |>\n  print(n = Inf)\n\n# A tibble: 112 × 3\n# Groups:   Delito [27]\n    Delito                                                       SubDelito     n\n    <chr>                                                        <chr>     <int>\n  1 DELITOS CONTRA LA PROPIEDAD                                  HURTO     15744\n  2 DELITOS CONTRA LA PROPIEDAD                                  ROBO      14228\n  3 DELITOS CONTRA LA PROPIEDAD                                  ASALTO    10794\n  4 ESTAFAS Y OTRAS DEFRAUDACIONES                               TIMOS     10430\n  5 ESTAFAS Y OTRAS DEFRAUDACIONES                               ESTAFA     6746\n  6 DELITOS CONTRA LA PROPIEDAD                                  ROBO DE …  4225\n  7 DELITOS CONTRA LA LIBERTAD                                   DELITOS …  4081\n  8 DELITOS CONTRA LA VIDA                                       AGRESION   3424\n  9 DELITOS INFORMATICOS                                         ESTAFA I…  3002\n 10 OTROS DELITOS                                                OTRO O I…  2745\n 11 OTROS DELITOS CONTRA LA PROPIEDAD                            DAÑOS      2559\n 12 DELITOS CONTRA LA VIDA                                       LESIONES   2218\n 13 OTROS DELITOS CONTRA LA PROPIEDAD                            ADMINIST…  1336\n 14 DELITOS SEXUALES                                             VIOLACIO…  1285\n 15 OTROS DELITOS CONTRA LA PROPIEDAD                            EXTORSIO…  1249\n 16 DELITOS CONTRA LOS DEBERES DE LA FUNCION PUBLICA             ABUSO DE…  1234\n 17 ESTAFAS Y OTRAS DEFRAUDACIONES                               FRAUDE     1084\n 18 DELITOS CONTRA LA PROPIEDAD                                  ROBO DE …   863\n 19 DELITOS INFORMATICOS                                         SUPLANTA…   771\n 20 DELITOS CONTRA LA VIDA                                       HOMICIDI…   654\n 21 DELITOS CONTRA LA VIDA                                       HOMICIDIO   604\n 22 DELITOS CONTRA LA ADMINISTRACION DE JUSTICIA                 ENCUBRIM…   526\n 23 DELITOS CONTRA LA VIDA                                       MUERTE I…   522\n 24 NO DELITO                                                    DESAPARI…   476\n 25 INFRACCION A LA LEY DE PSICOTROPICOS                         TRAFICO …   434\n 26 DELITOS CONTRA LA SEGURIDAD COMUN                            INCENDIO…   410\n 27 DELITOS SEXUALES                                             CORRUPCI…   378\n 28 NO DELITO                                                    DESAPARI…   376\n 29 DELITOS CONTRA LA FAMILIA                                    VIOLENCI…   279\n 30 DELITOS INFORMATICOS                                         SUPLANTA…   276\n 31 OTROS DELITOS CONTRA LA PROPIEDAD                            USURPACI…   272\n 32 LEY CONTRA EL ACOSO SEXUAL CALLEJERO                         LEY CONT…   240\n 33 DELITOS CONTRA LA SEGURIDAD COMUN                            DELITOS …   238\n 34 INFRACCION A LA LEY DE BIENESTAR ANIMAL                      MUERTE D…   209\n 35 DELITOS INFORMATICOS                                         OTRO O I…   206\n 36 DELITOS INFORMATICOS                                         DIFUSION…   205\n 37 DELITOS CONTRA LA VIDA                                       SUICIDIO    174\n 38 DELITOS CONTRA LA VIDA                                       MUERTE A…   163\n 39 DELITOS INFORMATICOS                                         FACILITA…   155\n 40 DELITOS CONTRA LA FAMILIA                                    SUSTRACC…   152\n 41 DELITOS CONTRA LA LIBERTAD                                   DELITOS …   140\n 42 DELITOS CONTRA EL AMBITO DE LA INTIMIDAD                     VIOLACIO…   136\n 43 DELITOS INFORMATICOS                                         ESPIONAJ…   127\n 44 DELITOS CONTRA LA VIDA                                       ABANDONO…   116\n 45 INFRACCION A LA LEY DE BIENESTAR ANIMAL                      MALTRATO…    98\n 46 DELITOS CONTRA EL HONOR                                      INJURIA,…    87\n 47 DELITOS CONTRA LA VIDA                                       MUERTE N…    84\n 48 DELITOS INFORMATICOS                                         SEDUCCIO…    80\n 49 DELITOS AMBIENTALES                                          LEY FORE…    74\n 50 DELITOS CONTRA LA FAMILIA                                    INCUMPLI…    73\n 51 INFRACCION A LA LEY DE PSICOTROPICOS                         LEGITIMA…    56\n 52 DELITOS CONTRA LA AUTORIDAD PUBLICA                          DESOBEDI…    54\n 53 INFRACCION A LA LEY DE BIENESTAR ANIMAL                      CRUELDAD…    50\n 54 DELITOS CONTRA LOS DEBERES DE LA FUNCION PUBLICA             CORRUPCI…    46\n 55 DELITOS CONTRA EL AMBITO DE LA INTIMIDAD                     VIOLACIO…    45\n 56 DELITOS INFORMATICOS                                         INSTALAC…    43\n 57 DELITOS AMBIENTALES                                          LEY DE C…    33\n 58 DELITOS CONTRA LA ADMINISTRACION DE JUSTICIA                 FALSAS A…    30\n 59 ESTAFAS Y OTRAS DEFRAUDACIONES                               ADMINIST…    28\n 60 DELITOS INFORMATICOS                                         SABOTAJE…    22\n 61 DELITOS SEXUALES                                             OTRO O I…    19\n 62 DELITOS CONTRA LOS DEBERES DE LA FUNCION PUBLICA             PECULADO…    17\n 63 DELITOS INFORMATICOS                                         DAÑO INF…    15\n 64 ESTAFAS Y OTRAS DEFRAUDACIONES                               OTRO O I…    14\n 65 DELITOS CONTRA LA AUTORIDAD PUBLICA                          RESISTEN…    13\n 66 DELITOS CONTRA LA AUTORIDAD PUBLICA                          AMENAZA …    12\n 67 DELITOS CONTRA LOS DEBERES DE LA FUNCION PUBLICA             CONCUSIO…    12\n 68 DELITOS AMBIENTALES                                          USURPACI…    10\n 69 DELITOS CONTRA LA FE PUBLICA                                 OTRO O I…    10\n 70 DELITOS CONTRA LA SEGURIDAD COMUN                            DELITOS …    10\n 71 INFRACCION A LA LEY DE PSICOTROPICOS                         TRAFICO …     9\n 72 DELITOS CONTRA LA FAMILIA                                    PROTECCI…     8\n 73 DELITOS CONTRA LA SEGURIDAD COMUN                            DELITOS …     8\n 74 DELITOS CONTRA LA VIDA                                       ABORTO        8\n 75 NO DELITO                                                    OTRO IND…     8\n 76 DELITOS CONTRA EL AMBITO DE LA INTIMIDAD                     INFRACCI…     7\n 77 OTROS DELITOS                                                INFRACCI…     7\n 78 DELITOS AMBIENTALES                                          LEY DE G…     6\n 79 INFRACCION A LA LEY DE BIENESTAR ANIMAL                      PELEA EN…     5\n 80 TRATA DE PERSONAS                                            TRATA SE…     5\n 81 DELITOS CONTRA LA AUTORIDAD PUBLICA                          EJERCICI…     4\n 82 DELITOS CONTRA LA VIDA                                       OTRO O I…     4\n 83 DELITOS AMBIENTALES                                          LEY DE L…     3\n 84 DELITOS CONTRA EL AMBITO DE LA INTIMIDAD                     OTRO O I…     3\n 85 DELITOS CONTRA EL AMBITO DE LA INTIMIDAD                     TURBACIO…     3\n 86 DELITOS CONTRA LA AUTORIDAD PUBLICA                          USO ILEG…     3\n 87 DELITOS CONTRA LA TRANQUILIDAD PUBLICA                       INTIMIDA…     3\n 88 OTROS DELITOS CONTRA LA PROPIEDAD                            INFRACCI…     3\n 89 DELITOS AMBIENTALES                                          LEY DE P…     2\n 90 DELITOS CONTRA LA ADMINISTRACION DE JUSTICIA                 EVASION …     2\n 91 DELITOS CONTRA LA BUENA FE DELOS NEGOCIOS                    USURA Y …     2\n 92 DELITOS CONTRA LOS DEBERES DE LA FUNCION PUBLICA             PREVARIC…     2\n 93 DESCONOCIDO                                                  DESCONOC…     2\n 94 INFRACCION A LA LEY DE PSICOTROPICOS                         OTRO O I…     2\n 95 OTROS DELITOS CONTRA LA PROPIEDAD                            OTRO O I…     2\n 96 TRAFICO DE PERSONAS                                          PERSONAS…     2\n 97 TRATA DE PERSONAS                                            OTRO O I…     2\n 98 DELITOS CONTRA LA ADMINISTRACION DE JUSTICIA                 FALSO TE…     1\n 99 DELITOS CONTRA LA AUTORIDAD PUBLICA                          FACILITA…     1\n100 DELITOS CONTRA LA AUTORIDAD PUBLICA                          VIOLACIO…     1\n101 DELITOS CONTRA LA AUTORIDAD PUBLICA                          VIOLACIO…     1\n102 DELITOS CONTRA LA BUENA FE DELOS NEGOCIOS                    DELITOS …     1\n103 DELITOS CONTRA LA FAMILIA                                    MATRIMON…     1\n104 DELITOS CONTRA LA FAMILIA                                    OTRO O I…     1\n105 DELITOS CONTRA LA FE PUBLICA                                 FALSEDAD…     1\n106 DELITOS CONTRA LA LIBERTAD                                   OTRO O I…     1\n107 DELITOS CONTRA LOS PODERES PUBLICOS Y EL ORDEN CONSTITUCION… ATENTADO…     1\n108 DELITOS CONTRA LOS PODERES PUBLICOS Y EL ORDEN CONSTITUCION… OTRO          1\n109 DELITOS INFORMATICOS                                         NARCOTRF…     1\n110 DELITOS SEXUALES                                             RAPTO         1\n111 TRATA DE PERSONAS                                            MENDICID…     1\n112 TRATA DE PERSONAS                                            TRATA LA…     1\n\n\nEjemplo de cálculos sin agrupamiento:\n\n# Creación de un data frame con las columnas \n# body_mass_g_mean (promedio de masa) y n (cantidad de registros)\npenguins |>\n  summarise(body_mass_g_mean = mean(body_mass_g, na.rm = TRUE),\n            n = n())\n\n# A tibble: 1 × 2\n  body_mass_g_mean     n\n             <dbl> <int>\n1            4202.   344\n\n\n\n\n10.6.6 Otras\n\n10.6.6.1 distinct()\nLa función distinct() retorna las combinaciones únicas de filas en un data frame.\n\n# Valores distintos de la columna Victima\n\ndelitos_2022 |>\n  distinct(Victima)\n\n      Victima\n1    VEHICULO\n2     PERSONA\n3       OTROS\n4    VIVIENDA\n5 EDIFICACION\n\n\n\n\n10.6.6.2 count()\nUna forma alternativa a summarize() para realizar un conteo es con la función count():\n\n# Conteo de delitos por tipo de Victima\ndelitos_2022 |>\n  count(Victima)\n\n      Victima     n\n1 EDIFICACION  6705\n2       OTROS  4756\n3     PERSONA 62046\n4    VEHICULO 11752\n5    VIVIENDA 11392\n\n# Expresión equivalente con summarize\ndelitos_2022 |>\n  group_by(Victima) |>\n  summarize(n = n())\n\n# A tibble: 5 × 2\n  Victima         n\n  <chr>       <int>\n1 EDIFICACION  6705\n2 OTROS        4756\n3 PERSONA     62046\n4 VEHICULO    11752\n5 VIVIENDA    11392"
  },
  {
    "objectID": "10-dplyr.html#ejercicios",
    "href": "10-dplyr.html#ejercicios",
    "title": "10  dplyr - gramática para manipulación de datos",
    "section": "10.7 Ejercicios",
    "text": "10.7 Ejercicios\nUtilice las funciones de dplyr para responder a las siguientes preguntas sobre el conjunto de datos penguins:\n\n¿Cuántos individuos de cada sexo hay en cada especie?\n¿Cuál es el mínimo, máximo y promedio de masa corporal (peso) por especie y sexo?\n¿Cuántos individuos se observaron durante cada año?\n¿Cuántos individuos de cada especie se observaron durante cada año?\n¿Cuántos individuos de cada especie y cada sexo se observaron durante cada año?\n¿Cuál es el promedio de masa corporal (peso) por año?\n¿Cuál es el promedio de masa corporal (peso) por año para cada especie?"
  },
  {
    "objectID": "10-dplyr.html#recursos-de-interés",
    "href": "10-dplyr.html#recursos-de-interés",
    "title": "10  dplyr - gramática para manipulación de datos",
    "section": "10.8 Recursos de interés",
    "text": "10.8 Recursos de interés\nRStudio. (2017). Data transformation with dplyr::Cheat Sheet. https://github.com/rstudio/cheatsheets/blob/45c1e642468695830fd8b724587ccfe8901e2185/data-transformation.pdf"
  },
  {
    "objectID": "parte-iii-graficacion.html",
    "href": "parte-iii-graficacion.html",
    "title": "III - Graficación estadística con R",
    "section": "",
    "text": "11 ggplot2 y plotly - creación declarativa de gráficos interactivos"
  },
  {
    "objectID": "11-ggplot2-plotly.html",
    "href": "11-ggplot2-plotly.html",
    "title": "11  ggplot2 y plotly - creación declarativa de gráficos interactivos",
    "section": "",
    "text": "R proporciona una gran cantidad de funciones para la elaboración de gráficos estadísticos y otros tipos de visualizaciones. El paquete base de R, por ejemplo, contiene un conjunto básico de funciones muy versátiles, especialmente para gráficos simples de conjuntos de datos relativamente pequeños. Sin embargo, para visualizaciones más avanzadas, puede ser conveniente explorar otras bibliotecas.\nggplot2 es una de las bibliotecas más populares de graficación de R. Implementa el concepto de “gramática de gráficos”, que permite crear visualizaciones complejas a partir de capas y componentes simples. Forma parte de Tidyverse, por lo que se comunica muy bien con los demás paquetes de esta familia, enfocada en conjuntos de datos grandes y en ciencia de datos.\nplotly es una biblioteca para crear gráficos interactivos y dinámicos. Contiene capacidades para agregar controles y mecanismos que le permiten al usuario interactuar con los gráficos y realizar operaciones como filtrados, acercamientos y alejamientos, entre otras.\nEl paquete DT, por su parte, permite presentar conjuntos de datos en tablas interactivas en las que se pueden realizar operaciones como ordenamientos, consultas y filtrados."
  },
  {
    "objectID": "11-ggplot2-plotly.html#trabajo-previo",
    "href": "11-ggplot2-plotly.html#trabajo-previo",
    "title": "11  ggplot2 y plotly - creación declarativa de gráficos interactivos",
    "section": "11.2 Trabajo previo",
    "text": "11.2 Trabajo previo\n\n11.2.1 Lecturas\nChang, W. (2018). R graphics cookbook: Practical recipes for visualizing data. O’Reilly. https://r-graphics.org/\nWickham, H., & Grolemund, G. (2017). R for Data Science: Import, Tidy, Transform, Visualize, and Model Data (capítulo 3). O’Reilly Media. https://r4ds.had.co.nz/\nWickham, H., & Grolemund, G. (s. f.). R para Ciencia de Datos (1era ed.) (capítulo 3). https://es.r4ds.hadley.nz/\nWickham, H., Çetinkaya-Rundel, M., & Grolemund, G. (s. f.). R for Data Science (2nd ed.) (capítulo 2). https://r4ds.hadley.nz/\nWickham, H., Navarro, D., & Pedersen, T. L. (s.f.). ggplot2: Elegant graphics for data analysis. https://ggplot2-book.org/"
  },
  {
    "objectID": "11-ggplot2-plotly.html#instalación-y-carga",
    "href": "11-ggplot2-plotly.html#instalación-y-carga",
    "title": "11  ggplot2 y plotly - creación declarativa de gráficos interactivos",
    "section": "11.3 Instalación y carga",
    "text": "11.3 Instalación y carga\nLos paquetes necesarios pueden instalarse con la función install.packages(). Ya que se usaron en capítulos anteriores, en este punto se asumen instalados los paquetes de Tidyverse.\n\n# Instalación de plotly\ninstall.packages(\"plotly\")\n\n# Instalación de DT\ninstall.packages(\"DT\")\n\nUna vez instalados, los paquetes pueden cargarse con la función library():\n\n# Carga conjunta de Tidyverse \n# (incluye ggplot2, dplyr, readr y otros)\nlibrary(tidyverse)\n\n# Carga de plotly\nlibrary(plotly)\n\n# Carga de DT\nlibrary(DT)"
  },
  {
    "objectID": "11-ggplot2-plotly.html#conjuntos-de-datos-de-ejemplo",
    "href": "11-ggplot2-plotly.html#conjuntos-de-datos-de-ejemplo",
    "title": "11  ggplot2 y plotly - creación declarativa de gráficos interactivos",
    "section": "11.4 Conjuntos de datos de ejemplo",
    "text": "11.4 Conjuntos de datos de ejemplo\n\n11.4.1 mpg\nmpg es uno de los conjuntos de datos de ejemplo que se incluyen junto con el paquete ggplot2. Contiene observaciones para 38 modelos de automóviles, recopiladas por la Agencia de Protección Ambiental de los Estados Unidos, y un conjunto de variables relacionadas con el consumo de combustible.\nEn el siguiente bloque de código, se utiliza la función datatable() del paquete DT, para desplegar las observaciones de mpg en una tabla.\n\n# Tabla de datos de mpg\nmpg |>\n  datatable(\n    options = list(\n      pageLength = 5,\n      language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')\n    )\n  )\n\n\n\n\n\n\nDT es un “envoltorio” (wrapper) de la biblioteca DataTables de JavaScript, un lenguaje ampliamente utilizado en el desarrollo de páginas web interactivas.\n\n\n11.4.2 diamonds\ndiamonds es otro de los conjuntos de datos de ejemplo de ggplot2. Contiene observaciones de más de 50000 diamantes, incluyendo su precio, color, claridad y otros atributos.\n\n# Tabla de datos de diamonds\ndiamonds |>\n  datatable(\n    options = list(\n      pageLength = 5,\n      language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')\n    )\n  )\n\n\n\n\n\n\n\n\n11.4.3 gapminder\nEste conjunto es un extracto de los datos disponibles en Gapminder.org, una organización son fines de lucro que promueve el desarrollo global y el cumplimiento de los Objetivos de Desarrollo del Milenio de las Naciones Unidas, a través de la estadística y la información general sobre desarrollo social, económico y ambiental a nivel local, nacional y global.\nSe distribuye en el paquete gapminder, el cual contiene el data frame gapminder, que incluye datos de esperanza de vida, producto interno bruto y población de 142 países, para cada cinco años, entre 1952 y 2007.\n\n# Instalación de gapminder\ninstall.packages(\"gapminder\")\n\n\n# Carga de gapminder\nlibrary(gapminder)\n\nLa siguiente tabla muestra los datos de gapminder para el año 2007.\n\n# Tabla de datos de gapminder\ngapminder |>\n  filter(year == 2007) |> # filtro para el año 2007\n  datatable(\n    options = list(\n      pageLength = 5,\n      language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')\n    )\n  )\n\n\n\n\n\n\n\n\n11.4.4 Casos de COVID-19 en Costa Rica\nEstos datos fueron publicados por el Ministerio de Salud de Costa Rica en https://geovision.uned.ac.cr/oges/ (a la fecha de escritura de este documento, el enlace no está funcionando). Se distribuyen en archivos CSV, incluyendo un archivo de datos generales para todo el país y varios archivos con datos por cantón. La fecha de la última actualización es 2022-05-30.\nPuede encontrar el archivo que se necesita para este capítulo en https://raw.githubusercontent.com/gf0604-procesamientodatosgeograficos/2023-i/main/datos/ministerio-salud/covid/05_30_22_CSV_GENERAL.csv.\nEl siguiente bloque de código, carga y transforma los datos generales de COVID-19 con funciones de los paquetes readr y dplyr. La función read_delim() de readr, lee datos de formatos tabulares (ej. CSV, TSV) y, entre otras ventajas, permite cargar solo las columnas especificadas en el argumento col_select. Las funciones read_csv(), read_csv2() y read_tsv() son casos especiales de read_delim().\n\n# Carga del archivo CSV de entrada en un dataframe\n# con la función read_delim() de readr\ncovid_general <-\n  read_delim(\n    file = \"https://raw.githubusercontent.com/gf0604-procesamientodatosgeograficos/2023-i/main/datos/ministerio-salud/covid/05_30_22_CSV_GENERAL.csv\",\n    col_select = c(\n      \"FECHA\",\n      \"positivos\",\n      \"activos\",\n      \"RECUPERADOS\",\n      \"fallecidos\",\n      \"nue_posi\",\n      \"nue_falleci\",\n      \"salon\",\n      \"UCI\"\n    )\n  )\n\n# Cambio de nombre de columnas\ncovid_general <-\n  covid_general |>\n  rename(\n    fecha = FECHA,\n    recuperados = RECUPERADOS,\n    nuevos_positivos = nue_posi,\n    nuevos_fallecidos = nue_falleci,\n    uci = UCI\n  )\n\n# Cambio de tipo de datos de la columna fecha, de str a date\ncovid_general <-\n  covid_general |>\n  mutate(fecha = as.Date(fecha, format = \"%d/%m/%Y\"))\n\nLa siguiente tabla muestra los datos generales de COVID-19.\n\n# Tabla de datos de COVID generales\ncovid_general |>\n  datatable(\n    options = list(\n      pageLength = 5,\n      language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')\n    )\n  )\n\n\n\n\n\n\n\n\n11.4.5 Delitos cometidos en 2022 en Costa Rica\nContiene estadísticas policiales de 2022, publicadas en el sitio de datos abiertos del Organismo de Investigación Judicial (OIJ).\nPuede encontrar el archivo que se necesita para este capítulo en https://raw.githubusercontent.com/gf0604-procesamientodatosgeograficos/2023-i/main/datos/oij/estadisticas-policiales/estadisticaspoliciales2022.csv\n\n# Carga de datos\ndelitos_2022 <-\n  read_delim(\n    file = \"https://raw.githubusercontent.com/gf0604-procesamientodatosgeograficos/2023-i/main/datos/oij/estadisticas-policiales/estadisticaspoliciales2022.csv\"\n  )\n\n# Tabla de datos\ndelitos_2022 |>\n  datatable(\n    options = list(\n      pageLength = 5,\n      language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')\n    )\n  )"
  },
  {
    "objectID": "11-ggplot2-plotly.html#introducción",
    "href": "11-ggplot2-plotly.html#introducción",
    "title": "11  ggplot2 y plotly - creación declarativa de gráficos interactivos",
    "section": "11.5 Introducción",
    "text": "11.5 Introducción\nSe introducen los paquetes de graficación estadística ggplot2 y plotly. Se utiliza ggplot2 para elaborar los gráficos y plotly para hacerlos interactivos.\n\n11.5.1 ggplot2\nggplot2 es un sistema para la creación declarativa de gráficos, creado por Hadley Wickham en 2005. Está basado en el libro The Grammar of Graphics, de Leland Wilkinson, un esquema general para visualización de datos que descompone un gráfico en sus principales componentes semánticos, tales como capas y geometrías.\n\n11.5.1.1 Principales componentes de un gráfico\nDe acuerdo con The Grammar of Graphics, los tres principales componentes de un gráfico son:\n\nDatos (observaciones y variables).\nConjunto de mapeos de las variables del conjunto de datos a propiedades visuales (aesthetics) del gráfico, tales como posición en el eje x, posición en el eje y, color, tamaño y forma, entre otras.\nAl menos una capa, la cual describe como graficar cada observación. Por lo general, las capas se crean con funciones de geometrías (ej. puntos, líneas, barras).\n\n\n\n11.5.1.2 Opciones básicas\nggplot2 implementa un gráfico estadístico por medio de la función ggplot(), cuya sintaxis básica puede resumirse de la siguiente forma:\nggplot(data = <DATOS>) + \n    <FUNCION_GEOMETRIA>(mapping = aes(<MAPEOS>))\nEl llamado a ggplot() crea un sistema de coordenadas (i.e. un “canvas”), al cual se le agregan capas. Su primer argumento es <DATOS>, el cual es usualmente un dataframe o un tibble.\nLa función aes() realiza los mapeos (<MAPEOS>) de las variables del conjunto de datos a las propiedades visuales del gráfico. Las capas se crean con funciones de geometrías (<FUNCION_GEOMETRIA>) como geom_point(), geom_bar() o geom_histogram(), entre muchas otras. Note el uso del operador + para agregar las capas al gráfico.\nComo ejemplo, seguidamente se crea un gráfico de dispersión que muestra la variable engine displacement o cilindrada (displ) en el eje X, y la variable highway miles per gallon o millas por galón en autopista (hwy) en el eje Y.\n\n# Gráfico de dispersión de cilindrada vs millas por galón en autopista\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy))\n\n\n\n\nEl bloque de código anterior puede reescribirse mediante un pipe, para pasar el conjunto de datos a ggplot(). También puede llamarse a aes() como un argumento de ggplot() y no de la función de geometría. Esto último acostumbra hacerse cuando los mapeos de las variables a las propiedades estéticas son los mismos en todas las capas del gráfico.\n\n# Gráfico de dispersión de cilindrada vs millas por galón en autopista\nmpg |>\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point()\n\n\n\n\nEl gráfico muestra una relación negativa entre el tamaño del motor (displ) y la eficiencia en el uso del combustible (hwy). En otras palabras, los vehículos con motores grandes usan más combustible.\n\n\n11.5.1.3 Variables adicionales\nSe pueden incluir variables adicionales en el gráfico mediante su mapeo a otras propiedades visuales. En el siguiente bloque de código, la variable correspondiente al tipo de automóvil (class), se mapea a la propiedad color.\n\n# Gráfico de dispersión de cilindrada vs millas por galón en autopista\n# coloreado por tipo de automóvil\nmpg |>\n  ggplot(aes(x = displ, y = hwy, color = class)) +\n  geom_point()\n\n\n\n\nLa misma variable puede mapearse a la propiedad visual shape (forma).\n\n# Gráfico de dispersión de cilindrada vs millas por galón en autopista\n# con formas de puntos correspondientes al tipo de automóvil\nmpg |>\n  ggplot(aes(x = displ, y = hwy, shape = class)) +\n  geom_point()\n\n\n\n\nLa categoría de los SUV no se incluye en el gráfico debido a que ggplot() solo muestra, por defecto, seis formas diferentes cuando se asignan de manera automática. Esto puede solucionarse si se asigna explícitamente una forma a cada categoría. En el siguiente bloque de código, se asignan manualmente tanto formas como colores a cada categoría de vehículo, mediante las funciones scale_shape_manual() y scale_color_manual().\n\n# Gráfico de dispersión de cilindrada vs millas por galón en autopista\n# con formas y colores correspondientes al tipo de automóvil\nmpg |>\n  ggplot(aes(x = displ, y = hwy, shape = class, color = class)) +\n  geom_point() +\n  scale_shape_manual(values = c(0, 1, 2, 3, 4, 5, 6)) +\n  scale_color_manual(values = c(\"red\", \"blue\", \"green\", \"purple\", \"orange\", \"brown\", \"pink\"))\n\n\n\n\nEl siguiente bloque de código mapea la variable de la cilindrada con la propiedad visual tamaño (size) y compara el rendimiento en autopista de los automóviles con el rendimiento en ciudad.\n\n# Gráfico de dispersión de rendimiento en autopista vs rendimiento en ciudad\n# con tamaño de puntos correspondiente a la cilindrada\nmpg |>\n  ggplot(aes(x = hwy, y = cty, size = displ)) +\n  geom_point()\n\n\n\n\nEl gráfico muestra que, ya sea en autopista o en ciudad, los motores con mayor cilindrada requieren de más combustible que los motores de menor cilindrada.\n\n\n11.5.1.4 Capas adicionales\nUn mismo gráfico puede contener múltiples capas, cada una con su propia función de geometría. El siguiente bloque de código agrega una capa con la función geom_smooth(), la cual muestra una curva de tendencia.\n\n# Gráfico de dispersión de cilindrada vs millas por galón en autopista\n# + curva de tendencia\nmpg |>\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth()\n\n\n\n\nEn el siguiente ejemplo, se mapea la variable tipo de tracción (drv) a la propiedad visual del color, tanto para la capa de puntos como para la de la curva de tendencia.\n\n# Gráfico de dispersión de cilindrada vs millas por galón en autopista\n# coloreado por tipo de tracción\n# + curva de tendencia\nmpg |>\n  ggplot(aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  geom_smooth()\n\n\n\n\n\n\n11.5.1.5 Paneles\nComo se mostró anteriormente, una forma de mostrar variables adicionales en un gráfico es mediante propiedades visuales (color, forma, tamaño, etc.). Otra forma es mediante el uso de paneles (facets), los cuales dividen un gráfico en subgráficos, de acuerdo con los valores de una variable. Este método es particularmente apropiado cuando la variable adicional es categórica o discreta.\nLa función facet_wrap() divide un gráfico en paneles de acuerdo con una sola variable. El primer argumento es una fórmula, la cual se crea con el caracter ~ (tilde) seguido por el nombre de la variable.\nEn el siguiente bloque de código, se generan paneles para el gráfico de dispersión de cilindrada vs millas por galón en autopista, de acuerdo con el tipo de automóvil. Es decir, un panel (subgráfico) por cada tipo de automóvil.\n\n# Gráfico de dispersión de cilindrada vs millas por galón en autopista\n# + paneles por tipo de automóvil\nmpg |>\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  facet_wrap(~ class, nrow = 2)\n\n\n\n\nLa función facet_grid() genera paneles con la combinación de dos variables. El primer argumento es también una fórmula, la cual contiene dos variables separadas por ~.\nEn el siguiente bloque de código, se generan paneles para el gráfico de dispersión de cilindrada vs millas por galón en autopista, de acuerdo con el tipo de automóvil y el tipo de tracción.\n\n# Gráfico de dispersión de cilindrada vs millas por galón en autopista\n# + paneles por tipo de automóvil y tipo de tracción\nmpg |>\n  ggplot(aes(x = displ, y = hwy)) +\n  geom_point() +\n  facet_grid(class ~ drv)\n\n\n\n\n\n\n11.5.1.6 Títulos, etiquetas, estilos y colores\n\n11.5.1.6.1 Titulos, subtítulos y etiquetas\nggplot2 incluye las funciones ggtitle(), xlab(), ylab() y labs(), las cuales permiten agregar títulos, subtítulos, etiquetas en los ejes y de otros tipos a un gráfico.\nAlgunas de las opciones que ofrecen estas funciones se ilustran en el siguiente gráfico.\n\n# Gráfico de dispersión de cilindrada vs millas por galón en autopista\n# coloreado por tipo de tracción con título, subtítulo y etiquetas\nmpg |>\n  ggplot(aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  geom_smooth() +\n  ggtitle(\"Cilindrada vs rendimiento en autopista por tipo de tracción\") +\n  xlab(\"Cilindrada (l)\") +\n  ylab(\"Rendimiento en autopista (mpg)\") +\n  labs(subtitle = \"Datos de 38 modelos de automóviles de años entre 1999 y 2008\", \n       caption = \"Fuente: United States Environmental Protection Agency (EPA)\",\n       color = \"Tipo de tracción\")\n\n\n\n\nEl títulos y las etiquetas de los ejes se pueden agregar también mediante argumentos de labs().\n\n\n11.5.1.6.2 Estilos\nggplot2 incluye un conjunto de estilos (themes) que pueden ayudar a mejorar el aspecto visual de los gráficos.\n\n# Gráfico de dispersión de cilindrada vs millas por galón en autopista\n# coloreado por tipo de tracción con título, subtítulo, etiquetas y estilo\nmpg |>\n  ggplot(aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  geom_smooth() +\n  ggtitle(\"Cilindrada vs rendimiento en autopista\") +\n  xlab(\"Cilindrada (l)\") +\n  ylab(\"Rendimiento en autopista (mpg)\") +\n  labs(subtitle = \"Datos de 38 modelos de automóviles de años entre 1999 y 2008\", \n       caption = \"Fuente: United States Environmental Protection Agency (EPA)\",\n       color = \"Tipo de tracción\") +\n  theme_bw() # tema de ggplot2\n\n\n\n\nExisten paquetes que ofrecen estilos adicionales como, por ejemplo, ggthemes.\n\n# Instalación de ggthemes\ninstall.packages(\"ggthemes\")\n\n\n# Carga de ggthemes\nlibrary(ggthemes)\n\n\n# Gráfico de dispersión de cilindrada vs millas por galón en autopista\n# coloreado por tipo de tracción con título, subtítulo, etiquetas y estilo de ggthemes\nmpg |>\n  ggplot(aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  geom_smooth() +\n  ggtitle(\"Cilindrada vs rendimiento en autopista\") +\n  xlab(\"Cilindrada (l)\") +\n  ylab(\"Rendimiento en autopista (mpg)\") +\n  labs(subtitle = \"Datos de 38 modelos de automóviles de años entre 1999 y 2008\", \n       caption = \"Fuente: United States Environmental Protection Agency (EPA)\",\n       color = \"Tipo de tracción\") +\n  theme_economist() # estilo de ggthemes\n\n\n\n\nOtro paquete de estilos y recursos relacionados (escalas de colores, fuentes, etc.) es hrbrthemes.\n\n# Instalación de hbrthemes\ninstall.packages(\"hrbrthemes\")\n\n\n# Carga de hbrthemes\nlibrary(hrbrthemes)\n\n\n# Gráfico de dispersión de cilindrada vs millas por galón en autopista\n# coloreado por tipo de tracción con título, subtítulo, etiquetas y estilo de hbrthemes\nmpg |>\n  ggplot(aes(x = displ, y = hwy, color = drv)) +\n  geom_point() +\n  geom_smooth() +\n  ggtitle(\"Cilindrada vs rendimiento en autopista\") +\n  xlab(\"Cilindrada (l)\") +\n  ylab(\"Rendimiento en autopista (mpg)\") +\n  labs(subtitle = \"Datos de 38 modelos de automóviles de años entre 1999 y 2008\", \n       caption = \"Fuente: United States Environmental Protection Agency (EPA)\",\n       color = \"Tipo de tracción\") +\n  theme_ipsum() # tema de hrbrthemes\n\n\n\n\n\n\n11.5.1.6.3 Colores\nggplot2 incluye múltiples funciones para escalas de colores, entre las que pueden mencionarse:\n\nscale_color_brewer(): para escalas de colores secuenciales, divergentes y cualitativas de ColorBrewer.\nscale_color_viridis_d(): para escalas viridis, diseñadas para mejorar la legibilidad de gráficos para lectores con formas comunes de daltonismo y discapacidades relacionadas con la percepción de colores.\nscale_color_manual(): para especificar directamente los colores a utilizar.\n\nEl siguiente bloque de código genera un gráfico de dispersión para los datos de diamonds. Muestra el peso en quilates (carat) de los diamantes en el eje X y su precio (price) en el eje Y. La variable correspondiente a su claridad (clarity) se muestra mediante el color de los puntos, de acuerdo con una escala de ColorBrewer.\n\n# Gráfico de dispersión de peso vs precio de diamantes\n# coloreado por claridad\ndiamonds |>\n  ggplot(aes(x = carat, y = price, color = clarity)) +\n  geom_point() +\n  ggtitle(\"Peso vs precio de diamantes\") +\n  xlab(\"Peso (quilates)\") +\n  ylab(\"Precio ($ EE.UU.)\") +\n  labs(color = \"Claridad\\n(I1=peor IF=mejor)\") +\n  scale_colour_brewer(palette = \"YlOrBr\", direction = -1) +\n  theme_ipsum() # estilo de hrbrthemes\n\n\n\n\nPara más información sobre etiquetas, estilos, colores y otros temas relacionados en ggplot2, se recomienda leer ggplot2: Elegant Graphics for Data Analysis - Themes.\n\n\n\n11.5.1.7 Opciones avanzadas\nEn las secciones y ejemplos anteriores, se han estudiado las opciones básicas para crear un gráfico en ggplot2: datos, mapeos de variables a propiedades visuales y capas. También se mostró la forma de implementar paneles, como un mecanismo para visualizar variables adicionales y algunos recursos para mejorar la apariencia de los gráficos.\nggplot2 incluye otras opciones para la creación de gráficos, como transformaciones estadísticas, transformaciones de sistemas de coordenadas y posicionamiento de las geometrías, las cuales pueden esquematizarse de la siguiente forma:\nggplot(data = <DATOS>) + \n  <FUNCION_GEOMETRIA>(\n    mapping = aes(<MAPEOS>),\n    stat = <ESTADISTICA>,\n    position = <POSICION>\n  ) +\n  <FUNCION_COORDENADAS> +\n  <FUNCION_FACET>\nEn las secciones siguientes, se explicarán y ejemplificarán alguna de estas opciones.\n\n\n\n11.5.2 plotly\nplotly R es una biblioteca para gráficos interactivos que forma parte del grupo de bibliotecas de graficación de Plotly, el cual también incluye bibliotecas para otros lenguajes como Python, Julia, F# y MATLAB. Plotly fue originalmente escrita en JavaScript, por lo que es particularmente adecuada para gráficos interactivos en la Web.\nplotly implementa la función ggplotly(), la cual convierte graficos de ggplot2 a plotly, haciéndolos interactivos.\nEl siguiente bloque de código muestra un gráfico generado con ggplot2 y convertido a plotly con la función ggplotly().\n\n# Gráfico ggplot2\ngrafico_ggplot2 <-\n  mpg |>\n  ggplot(aes(x = displ, y = hwy, color = drv)) +\n  geom_point(aes(\n    # datos que se muestran al colocar el ratón sobre un punto\n    text = paste0(\n      \"Modelo: \", manufacturer, \" \", model, \" \", year, \"\\n\",\n      \"Cilindrada: \", displ, \" l\", \"\\n\",\n      \"Rendimiento en autopista: \", hwy, \" mpg\", \"\\n\",\n      \"Tipo de tracción: \", drv\n    )\n  )) +\n  geom_smooth() +\n  ggtitle(\"Cilindrada vs rendimiento en autopista\") +\n  xlab(\"Cilindrada (l)\") +\n  ylab(\"Rendimiento en autopista (mpg)\") +\n  labs(subtitle = \"Datos de 38 modelos de automóviles de años entre 1999 y 2008\",\n       caption = \"Fuente: United States Environmental Protection Agency (EPA)\",\n       color = \"Tipo de tracción\") +\n  theme_ipsum()\n\n# Gráfico plotly\nggplotly(grafico_ggplot2, tooltip = \"text\") |> \n  config(locale = 'es') # para mostrar los controles en español"
  },
  {
    "objectID": "11-ggplot2-plotly.html#tipos-de-gráficos",
    "href": "11-ggplot2-plotly.html#tipos-de-gráficos",
    "title": "11  ggplot2 y plotly - creación declarativa de gráficos interactivos",
    "section": "11.6 Tipos de gráficos",
    "text": "11.6 Tipos de gráficos\nEn esta sección, se ejemplifican varios tipos de gráficos, los cuales se construyen con ggplot2 y luego se convierten a plotly.\n\n11.6.1 Histogramas\nUn histograma es una representación gráfica de la distribución de una variable numérica en forma de barras (en este caso, llamadas en inglés bins). La longitud de cada barra representa la frecuencia de un rango de valores de la variable. La graficación de la distribución de las variables es, frecuentemente, una de las primeras tareas que se realiza cuando se explora un conjunto de datos.\nEn ggplot2, los histogramas se implementan con la función geom_histogram().\nEl siguiente bloque de código muestra, mediante un histograma, la distribución del producto interno bruto (PIB) per cápita para el año 2007, entre los países incluídos en gapminder.\n\n# Histograma ggplot2 de distribución del PIB per cápita en 2007\nhistograma_ggplot2 <- \n  gapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(x = gdpPercap)) +\n  geom_histogram(\n    aes(\n      text = paste0(\n        \"PIB per cápita (valor medio del rango): $\", round(after_stat(x), 2), \"\\n\",\n        \"Frecuencia: \", after_stat(count)\n      )\n    ), \n    bins = 10\n  ) + \n  ggtitle(\"Distribución del PIB per cápita en 2007\") +\n  xlab(\"PIB per cápita ($ EE.UU.)\") +\n  ylab(\"Frecuencia\") +\n  labs(subtitle = \"Datos de 14o países\", caption = \"Fuente: Gapminder.org\") +\n  theme_economist()\n\n# Histograma plotly\nggplotly(histograma_ggplot2, tooltip = \"text\") |> \n  config(locale = 'es')\n\n\n\n\n\nLa función geom_density() permite crear una estimación de densidad del kernel (Kernel Density Estimation o KDE), una curva que muestra la densidad de los datos.\n\n# Histograma ggplot2 de distribución del PIB per cápita en 2007\nhistograma_ggplot2 <-\n  gapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(x = gdpPercap)) +\n  geom_histogram(\n    aes(\n      text = paste0(\n        \"PIB per cápita (valor medio del rango): $\", round(after_stat(x), 2), \"\\n\",\n        \"Frecuencia: \", after_stat(count)\n      ),\n      y = after_stat(density) # argumento necesario para crear la curva KDE\n    ),\n    bins = 10\n  ) +\n  geom_density() +\n  scale_y_continuous(labels = scales::label_comma()) + # para formatear el eje y en notación decimal\n  ggtitle(\"Distribución del PIB per cápita en 2007\") +\n  xlab(\"PIB per cápita ($ EE.UU.)\") +\n  ylab(\"Densidad\") +\n  labs(subtitle = \"Datos de 140 países\", caption = \"Fuente: Gapminder.org\") +\n  theme_economist()\n\n# Histograma plotly\nggplotly(histograma_ggplot2, tooltip = \"text\") |>\n  config(locale = 'es')\n\n\n\n\n\nEn el siguiente bloque, se incluye en el gráfico anterior la variable continent a través de la propiedad visual relleno (fill).\n\n# Histograma ggplot2 de distribución del PIB per cápita en 2007 por continente\nhistograma_ggplot2 <-\n  gapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(x = gdpPercap, fill = continent)) +\n  geom_histogram(\n    aes(\n      text = paste0(\n        \"Continente: \", after_stat(fill), \"\\n\",\n        \"PIB per cápita (valor medio del rango): $\", round(after_stat(x), 2), \"\\n\",\n        \"Frecuencia: \", after_stat(count)\n      ),      \n      y = after_stat(density)\n    ),    \n    bins = 10\n  ) +\n  ggtitle(\"Distribución del PIB per cápita en 2007 por continente\") +\n  xlab(\"PIB per cápita ($ EE.UU.)\") +\n  ylab(\"Densidad\") +\n  labs(subtitle = \"Datos de 140 países\",\n       caption = \"Fuente: Gapminder.org\",\n       fill = \"Continente\") +\n  theme_economist()\n\n# Histograma plotly\nggplotly(histograma_ggplot2, tooltip = \"text\") |>\n  config(locale = 'es')\n\n\n\n\n\nEl gráfico anterior muestra como el PIB per cápita varía considerablemente entre continentes. La misma información puede mostrarse mediante paneles.\n\n# Histogramas ggplot2 de distribución del PIB per cápita en 2007 por continente\nhistograma_ggplot2 <-\n  gapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(x = gdpPercap)) +\n  geom_histogram(\n    aes(\n      text = paste0(\n        \"PIB per cápita (valor medio del rango): $\", round(after_stat(x), 2), \"\\n\",\n        \"Frecuencia: \", after_stat(count)\n      )\n    ),\n    bins = 10\n  ) +\n  ggtitle(\"Distribución del PIB per cápita en 2007 por continente\") +\n  xlab(\"PIB per cápita ($ EE.UU.)\") +\n  ylab(\"Frecuencia\") +\n  labs(subtitle = \"Datos de 140 países\",\n       caption = \"Fuente: Gapminder.org\",\n       fill = \"Continente\") +\n  facet_wrap(~ continent, nrow = 2) +\n  theme_economist()\n\n# Histograma plotly\nggplotly(histograma_ggplot2, tooltip = \"text\") |>\n  config(locale = 'es')\n\n\n\n\n\n\n\n11.6.2 Gráficos de caja\nUn gráfico de caja (boxplot) muestra información de una variable numérica a través de su mediana, sus cuartiles (Q1, Q2 y Q3) y sus valores atípicos.\nLa figura Figura 11.1 muestra los componentes de un gráfico de caja.\n\n\n\n\n\nFigura 11.1: Componentes de un diagrama de caja. Imagen de Onkel Dagobert.\n\n\n\n\nEn ggplot2, los gráficos de caja se implementan con la función geom_boxplot().\nEl siguiente bloque de código muestra, mediante un gráfico de caja, la distribución del PIB per cápita para el año 2007, entre los países incluídos en gapminder.\n\n# Gráfico de caja ggplot2 de distribución del PIB per cápita en 2007\ngrafico_caja_ggplot2 <-\ngapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(y = gdpPercap)) +\n  geom_boxplot() +\n  ggtitle(\"Distribución del PIB per cápita en 2007\") +\n  ylab(\"PIB per cápita ($ EE.UU.)\") +\n  labs(subtitle = \"Datos de 140 países\", caption = \"Fuente: Gapminder.org\") +\n  theme_economist()\n\n# Gráfico de caja plotly\nggplotly(grafico_caja_ggplot2) |> \n  config(locale = 'es')\n\n\n\n\n\nEn el siguiente bloque, se utiliza la posición en el eje X para mostrar la variable continent y apreciar la distribución del PIB per cápita en cada continente.\n\n# Gráfico de caja ggplot2 de distribución del PIB per cápita en 2007 por continente\ngrafico_caja_ggplot2 <-\ngapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(x = continent, y = gdpPercap)) +\n  geom_boxplot() +\n  ggtitle(\"Distribución del PIB per cápita en 2007 por continente\") +\n  ylab(\"PIB per cápita ($ EE.UU.)\") +\n  labs(subtitle = \"Datos de 140 países\", caption = \"Fuente: Gapminder.org\") +\n  theme_economist()\n\n# Gráfico de caja plotly\nggplotly(grafico_caja_ggplot2) |> \n  config(locale = 'es')\n\n\n\n\n\n\n\n11.6.3 Gráficos de barras\nUn gráfico de barras se compone de barras rectangulares con longitud proporcional a estadísticas (ej. frecuencias, promedios, mínimos, máximos) asociadas a una variable categórica o discreta. Las barras pueden ser horizontales o verticales y se recomienda que estén ordenadas según su longitud, a menos que exista un orden inherente a la variable (ej. el orden de los días de la semana). Es uno de los tipos de gráficos estadísticos más antiguos y comunes y tiene la ventaja de ser muy fácil de comprender.\nEn ggplot2, los gráficos de barras se implementan con las funciones geom_bar(), que se utiliza en gráficos que requieren transformaciones estadísticas, y geom_col(), para gráficos que no requieren estas transformaciones.\n\n11.6.3.1 Barras con transformaciones estadísticas\nLos gráficos de barras y otros tipos de gráficos (ej. histogramas, gráficos de caja, líneas de ajuste) pueden requerir de alguna transformación estadística antes de presentar la información. Esta transformación estadística puede ser un conteo, el cálculo de un promedio, un mínimo o un máximo, entre otras opciones.\nPor ejemplo, el siguiente gráfico muestra la cantidad de países por continente presentes en el conjunto de datos gapminder para el año 2007. Nótese que este conteo no está presente en ninguna de las variables del conjunto de datos.\n\n# Gráfico de barras con conteo de países por continente para el año 2007\ngrafico_barras_ggplot2 <-\ngapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(x = continent)) +\n  geom_bar(\n    aes(\n      text = paste0(\n        \"Cantidad de países: \", after_stat(count)\n      )\n    ),    \n  ) +\n  ggtitle(\"Cantidad de países por continente\") +\n  xlab(\"Continente\") +\n  ylab(\"Cantidad de países\") +\n  labs(caption = \"Fuente: Gapminder.org\") +\n  theme_economist()\n\n# Gráfico de barras plotly\nggplotly(grafico_barras_ggplot2, tooltip = \"text\") |> \n  config(locale = 'es')\n\n\n\n\n\nPara ordenar las barras de acuerdo con el conteo, puede utilizarse la función fct_infreq() del paquete forcats de Tidyerse, para manejo de factores. Tenga en cuenta que la columna continent está definida como un factor.\n\n# Gráfico de barras con conteo de países por continente para el año 2007\ngrafico_barras_ggplot2 <-\ngapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(x = fct_infreq(continent))) +\n  geom_bar(\n    aes(\n      text = paste0(\n        \"Cantidad de países: \", after_stat(count)\n      )\n    )    \n  ) +\n  ggtitle(\"Cantidad de países por continente\") +\n  xlab(\"Continente\") +\n  ylab(\"Cantidad de países\") +\n  labs(caption = \"Fuente: Gapminder.org\") +\n  theme_economist()\n\n# Gráfico de barras plotly\nggplotly(grafico_barras_ggplot2, tooltip = \"text\") |> \n  config(locale = 'es')\n\n\n\n\n\nSi se prefiere el orden inverso, puede utilizarse la función fct_rev() (ej. fct_rev(fct_infreq(continent))). Para más información sobre el ordenamiento en gráficos, se recomienda consultar FAQ: Reordering - ggplot2.\nEn un ejemplo similar, se cuenta la cantidad de diamantes por tipo de corte (cut), para el conjunto de datos diamonds.\n\n# Gráfico de barras con conteo de diamantes por corte\ngrafico_barras_ggplot2 <-\ndiamonds |>\n  ggplot(aes(x = fct_rev(cut))) +\n  geom_bar(\n    aes(\n      text = paste0(\n        \"Cantidad de diamantes: \", after_stat(count)\n      )\n    )\n  ) +\n  ggtitle(\"Cantidad de diamantes por corte\") +\n  xlab(\"Corte\") +\n  ylab(\"Cantidad de diamantes\") +\n  theme_economist()\n\n# Gráfico de barras plotly\nggplotly(grafico_barras_ggplot2, tooltip = \"text\") |> \n  config(locale = 'es')\n\n\n\n\n\nEl cálculo de la cantidad de países por continente o el de la cantidad de diamantes por corte, son ejemplos de transformaciones estadísticas. La Figura 11.2 muestra como se realiza este proceso para el gráfico anterior.\n\n\n\n\n\nFigura 11.2: Transformación estadística para un gráfico de barras de ggplot2. Imagen de Hadley Wickham.\n\n\n\n\nLas barras pueden mostrar otras transformaciones estadísticas a través del uso de los argumentos stat y fun.y de geom_bar(). Por ejemplo, stat = \"summary\" y fun.y = \"mean\"generan un gráfico que muestra el promedio de esperanza de vida (lifeExp) para cada continente para el año 2007.\n\n# Gráfico de barras con promedio de esperanza de vida\n# para cada continente para el año 2007\ngrafico_barras_ggplot2 <-\n  gapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(x = fct_infreq(continent), y = lifeExp)) +\n  geom_bar(\n    stat = \"summary\", \n    fun.y = \"mean\",\n    aes(\n      text = paste0(\n        \"Promedio de esperanza de vida: \", round(after_stat(y), 2)\n      )\n    )\n  ) +\n  ggtitle(\"Promedio de esperanza de vida por continente en 2007\") +\n  xlab(\"Continente\") +\n  ylab(\"Promedio de esperanza de vida\") +\n  labs(caption = \"Fuente: Gapminder.org\") +\n  theme_economist()\n\n# Gráfico de barras plotly\nggplotly(grafico_barras_ggplot2, tooltip = \"text\") |>\n  config(locale = 'es')\n\n\n\n\n\nNota:  la función fct_infreq() no está ordenando en este caso las columnas (se desconoce la razón). El ordenamiento aún puede conseguirse si se realiza primero el cálculo del promedio y luego se grafica la columna correspondiente, como en el siguiente bloque de código.\n\n# Cálculo del promedio de esperanza de vida por continente\ngapminder_mean_lifeExp_continent <-\n  gapminder |>\n  filter(year == 2007) |>\n  group_by(continent) |>\n  summarize(lifeExp_mean = mean(lifeExp))\n\n# Despliegue por orden descendente del promedio de esperanza de vida\ngapminder_mean_lifeExp_continent |>\n  arrange(desc(lifeExp_mean))\n\n# A tibble: 5 × 2\n  continent lifeExp_mean\n  <fct>            <dbl>\n1 Oceania           80.7\n2 Europe            77.6\n3 Americas          73.6\n4 Asia              70.7\n5 Africa            54.8\n\n\nLuego se dibuja luego el gráfico con geom_col() y se ordenan las barras con la función reorder().\n\n# Gráfico de barras con promedio de esperanza de vida\n# para cada continente para el año 2007\ngrafico_barras_ggplot2 <-\n  gapminder_mean_lifeExp_continent |>\n  ggplot(aes(x = reorder(continent,-lifeExp_mean), y = lifeExp_mean)) +\n  geom_col(\n    aes(\n      text = paste0(\n        \"Promedio de esperanza de vida: \", round(after_stat(y), 2)\n      )\n    )    \n  ) +\n  ggtitle(\"Promedio de esperanza de vida por continente en 2007\") +\n  xlab(\"Continente\") +\n  ylab(\"Promedio de esperanza de vida\") +\n  labs(caption = \"Fuente: Gapminder.org\") +\n  theme_economist()\n\n# Gráfico de barras plotly\nggplotly(grafico_barras_ggplot2, tooltip = \"text\") |>\n  config(locale = 'es')\n\n\n\n\n\nEl uso de geom_col() se ampliará en la sección siguiente.\n\n\n11.6.3.2 Barras sin transformaciones estadísticas\nEn algunos conjuntos de datos, el valor que se quiere representar en la longitud de las barras ya está presente como una variable en el conjunto de datos, por lo que no es necesario que ggplot2 realice una transformación estadística. En estos casos, se utiliza la función geom_col().\nNota:  para dibujar barras sin transformaciones estadísticas, tambien es posible utilizar la función geom_bar(). En este caso, al argumento stat se le asigna el valor \"identity\" y al argumento y de aes() la variable que contiene el valor que quiere mostrarse en las barras.\nEl siguiente gráfico de barras muestra la población de los países de los países de América en 2007. Nótese que este valor se puede tomar directamente de la variable pop, después de realizar los filtros correspondientes.\n\n# Gráfico de barras con población de países \n# de América para el año 2007\ngrafico_barras_ggplot2 <-\ngapminder |>\n  filter(year == 2007 & continent == \"Americas\") |>\n  ggplot(aes(x = reorder(country, pop), y = pop/1000000)) +\n  geom_col(\n    aes(\n      text = paste0(\n        \"País: \", country, \"\\n\",\n        \"Población (millones de habitantes): \", round(pop/1000000, 2)\n      )\n    )\n  ) +\n  coord_flip() + # para mostrar barras horizontales\n  ggtitle(\"Población de países de América en 2007\") +\n  xlab(\"País\") +\n  ylab(\"Población (millones de habitantes)\") +\n  labs(caption = \"Fuente: Gapminder.org\") +\n  theme_economist()\n\n# Gráfico de barras plotly\nggplotly(grafico_barras_ggplot2, tooltip = \"text\") |> \n  config(locale = 'es')\n\n\n\n\n\n\n\n11.6.3.3 Barras apiladas\nAl usar el argumento fill de aes(), las barras de un gráfico pueden dividirse de acuerdo con una variable adicional, produciendo el efecto de barras apiladas (i.e. unas sobre otras).\nEn el siguiente bloque de código, se genera un gráfico de barras apiladas que, para el conjunto de datos diamonds, muestra las cantidades de diamantes por corte (cut) subdivididas por claridad (clarity).\n\n# Gráfico de barras apiladas por tipo de corte y claridad \ngrafico_barras_ggplot2 <-\ndiamonds |>\n  ggplot(aes(x = cut, fill = clarity)) +\n  geom_bar() +\n  ggtitle(\"Cantidad de diamantes por corte y claridad\") +\n  xlab(\"Corte\") +\n  ylab(\"Cantidad de diamantes\") +\n  labs(fill = \"Claridad\") +\n  theme_minimal()\n\n# Gráfico de barras plotly\nggplotly(grafico_barras_ggplot2) |> \n  config(locale = 'es')\n\n\n\n\n\nEl argumento position = \"fill\" de geom_bar() también genera barras apiladas, pero le asigna a todas las barras la misma longitud, facilitando así la comparación de proporciones.\n\n# Gráfico de barras apiladas por tipo de corte y claridad \ngrafico_barras_ggplot2 <-\ndiamonds |>\n  ggplot(aes(x = cut, fill = clarity)) +\n  geom_bar(position = \"fill\") +\n  ggtitle(\"Proporción de tipos de claridad en cortes de diamantes\") +\n  xlab(\"Corte\") +\n  ylab(\"Proporción\") +\n  labs(fill = \"Claridad\") +\n  theme_minimal()\n\n# Gráfico de barras plotly\nggplotly(grafico_barras_ggplot2) |> \n  config(locale = 'es')\n\n\n\n\n\n\n\n11.6.3.4 Barras agrupadas\nEl argumento position = \"dodge\" de geom_bar() genera barras agrupadas (i.e. unas al lado de otras), facilitando así la comparación de valores individuales.\n\n# Gráfico de barras agrupadas por tipo de corte y claridad \ngrafico_barras_ggplot2 <-\ndiamonds |>\n  ggplot(aes(x = cut, fill = clarity)) +\n  geom_bar(position = \"dodge\") +\n  ggtitle(\"Cantidad de diamantes por corte y claridad\") +\n  xlab(\"Corte\") +\n  ylab(\"Cantidad de diamantes\") +\n  labs(fill = \"Claridad\") +\n  theme_minimal()\n\n# Gráfico de barras plotly\nggplotly(grafico_barras_ggplot2) |> \n  config(locale = 'es')\n\n\n\n\n\n\n\n\n11.6.4 Gráficos de dispersión\nUn gráfico de dispersión (scatterplot) despliega los valores de dos variables numéricas, como puntos en un sistema de coordenadas. El valor de una variable se despliega en el eje X y el de la otra variable en el eje Y. Variables adicionales pueden ser mostradas mediante atributos de los puntos, tales como su tamaño, color o forma.\nEn ggplot2, los gráficos de dispersión se implementan con la función de geometría geom_point().\nEl siguiente bloque de código muestra la relación entre el PIB per cápita y la esperanza de vida de los países en el conjunto de datos gapminder, para el año 2007.\n\n# Gráfico de dispersión PIB per cápita vs esperanza de vida en 2007\n# + línea de tendencia\ngrafico_dispersion_ggplot2 <-\n  gapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(x = gdpPercap, y = lifeExp)) +\n  geom_point(aes(\n    text = paste0(\n      \"País: \", country, \"\\n\",\n      \"PIB per cápita: $\", round(gdpPercap, 2), \"\\n\",\n      \"Esperanza de vida: \", round(lifeExp, 2), \" años\"\n    )\n  )) +\n  geom_smooth(method = \"lm\") +\n  ggtitle(\"PIB per cápita vs esperanza de vida en 2007\") +\n  xlab(\"PIB per cápita ($ EE.UU.)\") +\n  ylab(\"Esperanza de vida (años)\") +\n  labs(caption = \"Fuente: Gapminder.org\") +\n  theme_economist()  \n\n# Gráfico de dispersión plotly\nggplotly(grafico_dispersion_ggplot2, tooltip = \"text\") |>\n  config(locale = 'es')\n\n\n\n\n\nComo se explicó anteriormente, se pueden agregar al gráfico variables adicionales mediante su mapeo a propiedades visuales. En el siguiente ejemplo, se agrega la variable de continente al gráfico anterior, mediante su mapeo a la propiedad correspondiente al color.\n\n# Gráfico de dispersión PIB per cápita vs esperanza de vida por continente en 2007\ngrafico_dispersion_ggplot2 <-\n  gapminder |>\n  filter(year == 2007) |>\n  ggplot(aes(x = gdpPercap, y = lifeExp, color = continent)) +\n  geom_point(aes(\n    text = paste0(\n      \"País: \", country, \"\\n\",\n      \"Continente: \", continent, \"\\n\",\n      \"PIB per cápita: $\", round(gdpPercap, 2), \"\\n\",\n      \"Esperanza de vida: \", round(lifeExp, 2), \" años\"      \n    )\n  )) +\n  ggtitle(\"PIB per cápita vs esperanza de vida por continente en 2007\") +\n  xlab(\"PIB per cápita ($ EE.UU.)\") +\n  ylab(\"Esperanza de vida (años)\") +\n  labs(caption = \"Fuente: Gapminder.org\", color = \"Continente\") +\n  theme_economist()  \n\n# Gráfico de dispersión plotly\nggplotly(grafico_dispersion_ggplot2, tooltip = \"text\") |>\n  config(locale = 'es')\n\n\n\n\n\n\n\n11.6.5 Gráficos de líneas\nUn gráfico de líneas muestra información en la forma de puntos de datos, llamados marcadores (markers), conectados por segmentos de líneas rectas. Es similar a un gráfico de dispersión pero, además del uso de segmentos de línea, tiene la particularidad de que los datos están ordenados, usualmente con respecto al eje X. Los gráficos de línea son usados frecuentemente para mostrar tendencias a través del tiempo.\nEn ggplot2, los gráficos de líneas se implementan con la función de geometría geom_line().\nEl siguiente gráfico de línea muestran la evolución en el tiempo de los casos positivos, fallecidos, recuperados y activos de COVID-19 en Costa Rica.\n\n# Gráfico de líneas con la evolución de los casos de COVID\ngrafico_lineas_ggplot2 <-\n  covid_general |>\n  ggplot(aes(x = fecha, y = value, color = variable)) +\n  geom_line(aes(y = positivos, color = \"Positivos\")) +\n  geom_line(aes(y = recuperados, color = \"Recuperados\")) +\n  geom_line(aes(y = activos, color = \"Activos\")) +\n  geom_line(aes(y = fallecidos, color = \"Fallecidos\")) +\n  scale_color_manual( # colores\n    \"\",\n    values = c(\n      \"Positivos\" = \"blue\",\n      \"Recuperados\" = \"green\",\n      \"Activos\" = \"red\",\n      \"Fallecidos\" = \"black\"\n    )\n  ) +\n  ggtitle(\"Casos acumulados de COVID en Costa Rica al 2022-05-30\") +\n  xlab(\"Fecha\") +\n  ylab(\"Casos\") +\n  theme_economist()  \n\n# Gráfico de dispersión plotly\nggplotly(grafico_lineas_ggplot2) |>\n  config(locale = 'es')\n\n\n\n\n\n\n\n11.6.6 Gráficos de pastel\nUn gráfico de pastel representa porcentajes y porciones en secciones (slices) de un círculo. Son muy populares, pero también criticados debido a la dificultad del cerebro humano de comparar áreas de sectores circulares, por lo que algunos expertos recomiendan sustituirlos por otros tipos de gráficos como, por ejemplo, gráficos de barras.\nEn ggplot2, los gráficos de pastel se implementan con la función de geometría geom_bar(stat = \"identity\", width = 1) y la función coord_polar(), la cual implementa un sistema de coordenadas polares.\nEl siguiente gráfico de pastel muestra la distribución de los delitos cometidos en 2022 en las provincias de Costa Rica.\n\n# Crear tabla de frecuencias\ntabla_frecuencias_delitos_2022_provincias <- table(delitos_2022$Provincia)\n\n# Convertir la tabla en un data frame\ndelitos_2022_provincias <- as.data.frame(tabla_frecuencias_delitos_2022_provincias)\n\n# Cambiar nombres de columnas del data frame\ndelitos_2022_provincias <-\n  delitos_2022_provincias |>\n  rename(Provincia = Var1, Frecuencia = Freq)\n\n# Calcular porcentajes por provincia\ndelitos_2022_provincias$Porcentaje <-\n  100 * delitos_2022_provincias$Frecuencia / sum(delitos_2022_provincias$Frecuencia)\n\n# Crear gráfico de pastel utilizando ggplot2\ngrafico_pastel_ggplot2 <-\n  delitos_2022_provincias |>\n  ggplot(aes(x = \"\", y = Porcentaje, fill = Provincia)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(\"y\", start = 0) +\n  theme_void() +\n  labs(title = \"Porcentaje de delitos cometidos en 2022 por provincia\",\n    subtitle = \"Fuente: OIJ\") +\n  scale_fill_discrete(name = \"Provincia\") +\n  geom_text(\n    aes(label = paste0(round(Porcentaje, 1), \"%\")),\n    position = position_stack(vjust = 0.5),\n    color = \"white\",\n    size = 4\n  ) \n\n# Despliegue del gráfico\ngrafico_pastel_ggplot2\n\n\n\n# Gráfico de pastel plotly (está generando un error)\n# ggplotly(grafico_pastel_ggplot2) |>\n#   config(locale = 'es')\n\nEl gráfico interactivo no se presenta en este caso, debido a que la función ggplotly() produce un error al procesar el gráfico de pastel generado por ggplot2.\n\n\n11.6.7 Otros tipos de gráficos\nggplot2 provee más de 40 tipos de geometrías para gráficos (puntos, líneas, barras, histogramas, cajas, etc.) y los paquetes de extensión proporcionan aún más (ej. https://exts.ggplot2.tidyverse.org/gallery/).\nPara una explicación resumida de ggplot2, se recomienda leer Data visualization with ggplot2::Cheat Sheet."
  },
  {
    "objectID": "11-ggplot2-plotly.html#recursos-de-interés",
    "href": "11-ggplot2-plotly.html#recursos-de-interés",
    "title": "11  ggplot2 y plotly - creación declarativa de gráficos interactivos",
    "section": "11.7 Recursos de interés",
    "text": "11.7 Recursos de interés\nDT: An R interface to the DataTables library. (s. f.). Recuperado 21 de mayo de 2022, de https://rstudio.github.io/DT/\nHealy, Y. H. and C. (s. f.). From data to Viz | Find the graphic you need. Recuperado 20 de marzo de 2022, de https://www.data-to-viz.com/\nRStudio. (2017). Data visualization with ggplot2::Cheat Sheet. https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf\nWickham, H. (2010). A Layered Grammar of Graphics. Journal of Computational and Graphical Statistics, 19(1), 3-28. https://doi.org/10.1198/jcgs.2009.07098"
  },
  {
    "objectID": "parte-iv-geoespacial.html",
    "href": "parte-iv-geoespacial.html",
    "title": "IV - El ecosistema geoespacial de R",
    "section": "",
    "text": "12 Introducción al manejo de datos geoespaciales con R\n13 Operaciones con datos de atributos\n14 Operaciones con datos espaciales"
  },
  {
    "objectID": "12-introduccion-manejo-datos-geoespaciales.html",
    "href": "12-introduccion-manejo-datos-geoespaciales.html",
    "title": "12  Introducción al manejo de datos geoespaciales con R",
    "section": "",
    "text": "El lenguaje de programación R cuenta con una gran variedad de paquetes para manejo de datos geoespaciales, entre los que están el paquete sf para datos vectoriales, el paquete terra para datos raster y el paquete leaflet para mapas en la Web.\nEl modelo vectorial se basa en puntos localizados en un sistema de referencia de coordenadas. Los puntos pueden representar objetos independientes o pueden agruparse para formar geometrías más complejas como líneas (ej. ríos, caminos) o polígonos (ej. fincas, países, provincias).\nEl modelo de datos raster usualmente consiste de un encabezado y de una matriz con celdas (también llamadas pixeles) de un mismo tamaño. Cada celda tiene una identificación (ID) y almacena un único valor, el cual puede ser numérico o categórico."
  },
  {
    "objectID": "12-introduccion-manejo-datos-geoespaciales.html#trabajo-previo",
    "href": "12-introduccion-manejo-datos-geoespaciales.html#trabajo-previo",
    "title": "12  Introducción al manejo de datos geoespaciales con R",
    "section": "12.2 Trabajo previo",
    "text": "12.2 Trabajo previo\n\n12.2.1 Lecturas\nLovelace, R., Nowosad, J., & Münchow, J. (2019). Geocomputation with R (capítulos 1 y 2). CRC Press. https://geocompr.robinlovelace.net/"
  },
  {
    "objectID": "12-introduccion-manejo-datos-geoespaciales.html#introducción",
    "href": "12-introduccion-manejo-datos-geoespaciales.html#introducción",
    "title": "12  Introducción al manejo de datos geoespaciales con R",
    "section": "12.3 Introducción",
    "text": "12.3 Introducción\nLa comunidad de programadores de R ha desarrollado un conjunto de paquetes para el manejo de datos geoespaciales, tanto en formatos vectoriales como raster. Algunos de los principales de estos paquetes son:\n\nEl paquete sf. Ofrece un conjunto de funciones para el manejo de datos vectoriales, de acuerdo con el estándar Simple Features.\nEl paquete terra. Implementa un conjunto de funciones para el manejo de datos raster. Es una reimplementación del paquete raster.\nEl paquete leaflet. Es una implementación en R de la biblioteca Leaflet para el lenguaje JavaScript para la programación de mapas interactivos en páginas web.\n\nAlgunos paquetes de graficación estadística, como ggplot2 y plotly, también cuentan con capacidades para visualización de datos geoespaciales.\nEn CRAN Task View: Analysis of Spatial Data, puede encontrarse un resumen detallado de los paquetes de R con funciones geoespaciales."
  },
  {
    "objectID": "12-introduccion-manejo-datos-geoespaciales.html#datos-vectoriales",
    "href": "12-introduccion-manejo-datos-geoespaciales.html#datos-vectoriales",
    "title": "12  Introducción al manejo de datos geoespaciales con R",
    "section": "12.4 Datos vectoriales",
    "text": "12.4 Datos vectoriales\n\n12.4.1 El modelo vectorial\nEl modelo vectorial de datos está basado en puntos localizados en un sistema de referencia de coordenadas (CRS). Los puntos individuales pueden representar objetos independientes (ej. postes eléctricos, cabinas telefónicas) o pueden también agruparse para formar geometrías más complejas como líneas (ej. ríos, caminos) o polígonos (ej. fincas, países, provincias). Por lo general, los puntos tienen solo dos dimensiones (x, y), a las que se les puede agregar una tercera dimensión z, usualmente correspondiente a la altitud sobre el nivel del mar.\n\n\n12.4.2 El estándar Simple Features\nSimple Features (o Simple Feature Access) es un estándar abierto de la Organización Internacional de Estandarización (ISO) y del Open Geospatial Consortium (OGC) que especifica un modelo común de almacenamiento y acceso para geometrías de dos dimensiones (líneas, polígonos, multilíneas, multipolígonos, etc.). El estándar es implementado por muchas bibliotecas y bases de datos geoespaciales como sf, Fiona, GDAL, PostgreSQL/PostGIS, SQLite/SpatiaLite, Oracle Spatial y Microsoft SQL Server, entre muchas otras.\nLa especificación define 17 tipos de geometrías, de las cuales siete son las más comúnmente utilizadas. Estas últimas se muestran en la Figura 12.1.\n\n\n\n\n\nFigura 12.1: Tipos de geometrías de Simple Features más usadas. Imagen de Robin Lovelace et al..\n\n\n\n\n\n\n12.4.3 El paquete sf\nEl paquete sf (de Simple Features) de R implementa los modelos de datos de las geometrías de tipo vectorial: puntos, líneas, polígonos, sus versiones múltiples y las colecciones de geometrías. Está basado en bibliotecas de sofware ampliamente utilizadas en aplicaciones geoespaciales:\n\nGeospatial Data Abstraction Library (GDAL): es una biblioteca para leer y escribir datos geoespaciales en varios formatos raster y vectoriales. Implementa un único modelo abstracto de datos raster y un único modelo abstracto de datos vectoriales, lo que permite programar aplicaciones geoespaciales sin tener que ocuparse de las particularidades de cada formato que se utilice (GeoTIFF, NetCDF, ESRI Shapefile, GeoJSON, etc.). A pesar de que GDAL está programada en C/C++, cuenta con una interfaz de programación de aplicaciones (API) para varios lenguajes de programación, incluyendo C, C++, Python y Java. Además, ofrece un conjunto de utilitarios de línea de comandos cuyas distribuciones binarias están disponibles para varios sistemas operativos, incluyendo Windows, macOS y Linux.\nGeometry Engine, Open Source (GEOS): es una implementación en C++ de la biblioteca JTS Topology Suite (desarrollada en Java) y que implementa un conjunto de operaciones y predicados geoespaciales (ej. unión, intersección, distancia, área).\nPROJ: es una biblioteca que transforma coordenadas entre diferentes CRS, incluyendo tanto proyecciones cartográficas como transformaciones geodésicas.\n\nsf provee acceso, desde un mismo paquete de R, a la funcionalidad de estas tres bibliotecas, proporcionando así una interfaz unificada para leer y escribir datos geoespaciales mediante GDAL, realizar operaciones con geometrías mediante GEOS y efectuar transformaciones entre sistemas de coordenadas mediante PROJ.\nEn sf, los conjuntos de datos geoespaciales se almacenan en objetos de una clase también llamada sf, los cuales son data frames que contiene una columna especial para las geometrías. Esta columna se denomina generalmente geom o geometry (aunque pueden tener cualquier otro nombre). El manejo de datos geoespaciales como data frames permite manipularlos con las funciones ya desarrolladas para este tipo de datos y con la misma forma de referenciar las filas (observaciones) y las columnas (variables).\n\n12.4.3.1 Instalación y carga\n\n# Instalación de sf\ninstall.packages(\"sf\")\n\n\n# Carga de sf\nlibrary(sf)\n\n\n\n12.4.3.2 Métodos\nLa lista de métodos (i.e. funciones) de la clase sf puede obtenerse a través de la función methods():\n\n# Métodos de la clase sf\nmethods(class = \"sf\")\n\n [1] [                     [[<-                  $<-                  \n [4] aggregate             as.data.frame         cbind                \n [7] coerce                dbDataType            dbWriteTable         \n[10] filter                identify              initialize           \n[13] merge                 plot                  print                \n[16] rbind                 show                  slotsFromS3          \n[19] st_agr                st_agr<-              st_area              \n[22] st_as_s2              st_as_sf              st_as_sfc            \n[25] st_bbox               st_boundary           st_buffer            \n[28] st_cast               st_centroid           st_collection_extract\n[31] st_convex_hull        st_coordinates        st_crop              \n[34] st_crs                st_crs<-              st_difference        \n[37] st_filter             st_geometry           st_geometry<-        \n[40] st_inscribed_circle   st_interpolate_aw     st_intersection      \n[43] st_intersects         st_is_valid           st_is                \n[46] st_join               st_line_merge         st_m_range           \n[49] st_make_valid         st_nearest_points     st_node              \n[52] st_normalize          st_point_on_surface   st_polygonize        \n[55] st_precision          st_reverse            st_sample            \n[58] st_segmentize         st_set_precision      st_shift_longitude   \n[61] st_simplify           st_snap               st_sym_difference    \n[64] st_transform          st_triangulate        st_union             \n[67] st_voronoi            st_wrap_dateline      st_write             \n[70] st_z_range            st_zm                 transform            \nsee '?methods' for accessing help and source code\n\n\nSeguidamente, se describen y ejemplifican algunos de los métodos básicos de la clase sf.\n\n12.4.3.2.1 st_read() - lectura de datos\nEl método st_read() lee datos vectoriales de una fuente en formato geoespacial (ej. shapefiles, archivos GeoJSON, bases de datos geoespaciales) y los recupera en un objeto sf.\nEn el siguiente bloque de código en R, se utiliza el método st_read() para leer un archivo GeoJSON con los polígonos de las provincias de Costa Rica. Este archivo proviene de un geoservicio de tipo Web Feature Service (WFS) publicado por el Instituto Geográfico Nacional (IGN).\n\n# Lectura de una capa vectorial (GeoJSON) de provincias de Costa Rica\nprovincias <-\n  st_read(\n    \"datos/ign/delimitacion-territorial-administrativa/provincias.geojson\",\n    quiet = TRUE # para evitar el despliegue de mensajes\n  )\n\nst_read() también puede crear objetos sf a partir de archivos de texto. Esta variante se utiliza principalmente cuando el archivo contiene coordenadas correspondientes a geometrías de puntos.\nEn el siguiente bloque de código, se utiliza st_read() para leer un archivo CSV con registros de presencia de felinos de Costa Rica, el cual contiene dos columnas llamadas decimalLongitude y decimalLatitude correspondientes a la longitud decimal y latitud decimal en las que fue observado cada felino. Este archivo proviene de una consulta al portal de datos de la Infraestructura Mundial de Información en Biodiversidad (GBIF).\n\n# Lectura de un archivo CSV con registros de presencia de felinos en Costa Rica\nfelinos <-\n  st_read(\n    \"datos/gbif/felinos.csv\",\n    options = c(\n      \"X_POSSIBLE_NAMES=decimalLongitude\", # columna de longitud decimal\n      \"Y_POSSIBLE_NAMES=decimalLatitude\"   # columna de latitud decimal\n    ),\n    quiet = TRUE\n  )\n\nTanto provincias como felinos son objetos de la clase sf (y además de data.frame).\n\n# Clase del objeto provincias\nclass(provincias)\n\n[1] \"sf\"         \"data.frame\"\n\n# Clase del objeto felinos\nclass(felinos)\n\n[1] \"sf\"         \"data.frame\"\n\n\nAl escribirse el nombre de un objeto sf en la consola de R, se despliega información general sobre este.\n\n# Información general sobre el objeto provincias\nprovincias\n\nSimple feature collection with 7 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 156152 ymin: 608833.8 xmax: 658879.5 ymax: 1241118\nProjected CRS: CR05 / CRTM05\n  cod_catalo cod_provin  provincia\n1     160103          6 Puntarenas\n2     160103          1   San José\n3     160103          7      Limón\n4     160103          3    Cartago\n5     160103          2   Alajuela\n6     160103          5 Guanacaste\n7     160103          4    Heredia\n                                                                                                                                                                                                                 ori_toponi\n1 En documento de 1720, se menciona la llegada del pirata Chipperton a la zona, en el cual aparece la descripcíon referente a una embarcación pequeña en la Punta de Arena, adoptando con el tiempo el nombre de Puntarenas\n2                                                                                                                                              Se remonta a la creación de la ermita dedicada al Patriarca San José en 1737\n3                                                                                         El origen del nombre de la provincia se remonta a 1852, cuando por primera vez se cita en un documento oficial el puerto de Limón\n4                                         Don Juan Vázques de Coronado escogió el sitio en el valle del Guarco para trasladar a la ciudad de Garcimuños, en 1563, bautizando al nuevo asentamiento con el nombre de Cartago\n5                                                                                                                  Se remonta al paraje llamado La Lajuela que por primera vez se cita en los Protocolos de Cartago de 1657\n6        En alegoria a un frondoso árbol de Guanacaste ubicado en la intersección de los caminos que se dirigían a Nicoya, Bagaces y Rivas, en lo que hoy día es el parque de Liberia. Esta referencia data del siglo XVIII\n7                                        En correspondiencia al Presidente  de la Real Audiencia de Guatemala, Capitán General don Alonso Fernández de Heredia, de la Inmaculada Concepción de Cubujuquí a Villa de Heredia\n      area  version                       geometry\n1 11298.51 20201222 MULTIPOLYGON (((159917.7 60...\n2  4969.73 20201222 MULTIPOLYGON (((505765.3 11...\n3  9176.96 20201222 MULTIPOLYGON (((532516.6 12...\n4  3093.23 20201222 MULTIPOLYGON (((556146.1 10...\n5  9772.27 20201222 MULTIPOLYGON (((427195 1224...\n6 10196.32 20201222 MULTIPOLYGON (((380807.3 11...\n7  2663.46 20201222 MULTIPOLYGON (((497345.1 11...\n\n\n\n\n12.4.3.2.2 st_crs() y st_transform() - manejo de sistemas de coordenadas\nEl método st_crs() retorna el CRS de un objeto sf.\n\n# Despliegue del CRS del objeto provincias\nst_crs(provincias)\n\nCoordinate Reference System:\n  User input: CR05 / CRTM05 \n  wkt:\nPROJCRS[\"CR05 / CRTM05\",\n    BASEGEOGCRS[\"CR05\",\n        DATUM[\"Costa Rica 2005\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",5365]],\n    CONVERSION[\"Costa Rica TM 2005\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",-84,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9999,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping (large and medium scale).\"],\n        AREA[\"Costa Rica - onshore and offshore east of 86°30'W.\"],\n        BBOX[2.21,-86.5,11.77,-81.43]],\n    ID[\"EPSG\",5367]]\n\n# Despliegue CRS del objeto felinos\nst_crs(felinos)\n\nCoordinate Reference System: NA\n\n\nst_crs() también puede asignar un CRS a un objeto sf que no lo tiene.\n\n# Asignación de un CRS al objeto felinos\nst_crs(felinos) <- 4326\n\nEl método st_transform() transforma un objeto sf a un nuevo CRS.\n\n# Transformación del CRS del objeto provincias a WGS84 (EPSG = 4326)\nprovincias <-\n  provincias |>\n  st_transform(4326)\n\n\n\n12.4.3.2.3 plot() - mapeo\nEl método plot() grafica objetos sf en un mapa.\n\n# Mapeo de las geometrías del objeto provincias\nplot(provincias$geometry)\n\n\n\n# Mapeo con argumentos adicionales de plot()\nplot(\n  provincias$geometry,\n  extent = st_bbox(c(xmin = -86.0, xmax = -82.3, ymin = 8.0, ymax = 11.3)),\n  main = \"Provincias de Costa Rica\",\n  axes = TRUE,\n  graticule = TRUE\n)\n\n\n\n\nLos argumentos reset y add de plot() permiten generar un mapa con varias capas.\n\n# Primera capa del mapa\nplot(\n  provincias$geometry,\n  extent = st_bbox(c(xmin = -86.0, xmax = -82.3, ymin = 8.0, ymax = 11.3)),\n  main = \"Registros de presencia de felinos en Costa Rica\",\n  axes = TRUE,\n  graticule = TRUE,\n  reset = FALSE\n)\n\n# Segunda capa\nplot(felinos$geometry,\n     add = TRUE,     \n     pch = 16,\n     col = \"blue\")\n\n\n\n\nPara conocer los valores del argumento pch, puede consultar R plot pch symbols.\n\n\n12.4.3.2.4 st_write() - escritura de datos\nEl método st_write() guarda en el disco un objeto sf en los diferentes formatos vectoriales de GDAL.\n\n# Especificación del directorio de trabajo (debe utilizarse una ruta existente)\nsetwd(\"/home/mfvargas\")\n\n# Escritura del objeto provincias en formato GPKG\nprovincias |>\n  st_write(\"provincias.gpkg\")\n\n# Escritura del objeto felinos en formato KML\nfelinos |>\n  st_write(\"felinos.kml\")\n\n\n\n12.4.3.2.5 Otros\n\n# Cantidad de filas de un objeto sf\nnrow(provincias)\n\n[1] 7\n\n# Cantidad de columnas de un objeto sf\nncol(provincias)\n\n[1] 7\n\n# Resumen de la columna de geometría\nsummary(provincias$geometry)\n\n MULTIPOLYGON     epsg:4326 +proj=long... \n            7             0             0 \n\n\n\n\n\n\n12.4.4 Mapeo de objetos sf con otros paquetes\n\n12.4.4.1 leaflet\nEl paquete leaflet genera mapas interactivos en lenguaje de marcado de hipertexto (HTML), el lenguaje de marcado utilizado para desarrollar páginas web.\n\n12.4.4.1.1 Instalación y carga\n\n# Instalación de leaflet\ninstall.packages(\"leaflet\")\n\n# Instalación de leaflet.extras (funciones adicionales de leaflet)\ninstall.packages(\"leaflet.extras\")\n\n# Instalación de leaflem (funciones adicionales de leaflet)\ninstall.packages(\"leafem\")\n\n\n# Carga de leaflet\nlibrary(leaflet)\n\n# Carga de leaflet.extras\nlibrary(leaflet.extras)\n\n# Carga de leafem\nlibrary(leafem)\n\nEl siguiente bloque de código muestra las capas de provincias (polígonos) y de registros de presencia de felinos (puntos) sobre una capa base de OpenStreetMap (OSM) y otra de ESRI.\n\n# Mapa leaflet básico de provincias y registros de presencia de felinos\nleaflet() |>\n  setView(# centro y nivel inicial de acercamiento\n    lng = -84.19452,\n    lat = 9.572735,\n    zoom = 7) |>\n  addTiles(group = \"Mapa general (OpenStreetMap)\") |>\n  addProviderTiles(\n    providers$Esri.WorldImagery, \n    group = \"Imágenes satelitales (ESRI World Imagery)\"\n  ) |>\n  addPolygons(\n    # capa de provincias (polígonos)\n    data = provincias,\n    color = \"black\",\n    fillColor = \"transparent\",\n    stroke = TRUE,\n    weight = 1.0,\n    group = \"Provincias\"\n  ) |>\n  addCircleMarkers(\n    # capa de registros de presencia (puntos)\n    data = felinos,\n    stroke = F,\n    radius = 4,\n    fillColor = 'blue',\n    fillOpacity = 1,\n    popup = paste(\n      paste0(\"<strong>Especie: </strong>\", felinos$species),\n      paste0(\"<strong>Localidad: </strong>\", felinos$locality),\n      paste0(\"<strong>Fecha: </strong>\", felinos$eventDate),\n      paste0(\"<strong>Fuente: </strong>\", felinos$institutionCode),\n      paste0(\"<a href='\", felinos$occurrenceID, \"'>Más información</a>\"),\n      sep = '<br/>'\n    ),\n    group = \"Felinos\"\n  ) |>\n  addLayersControl(\n    baseGroups = c(\n      \"Mapa general (OpenStreetMap)\", \n      \"Imágenes satelitales (ESRI World Imagery)\"\n    ),\n    overlayGroups = c(\"Provincias\", \"Felinos\")) |> # control de capas\n  addResetMapButton() |> # botón de reinicio\n  addSearchOSM() |> # búsqueda en OSM\n  addMouseCoordinates() |> # coordenadas del puntero del ratón\n  addScaleBar(\n    position = \"bottomleft\", \n    options = scaleBarOptions(imperial = FALSE)\n  ) |> # barra de escala\n  addMiniMap(position = \"bottomright\") |> # mapa de ubicación\n  addFullscreenControl() # mapa de pantalla completa\n\n\n\n\n\n\n\n\n\n12.4.5 Ejercicios\n\nAgregue capas base adicionales al mapa anterior, con la función leaflet::addProviderTiles() (vea Leaflet for R - Using Basemaps).\nAgrupe puntos agrupados (clusters) correspondientes a los registros de presencia mediante la función markerClusterOptions() (vea Leaflet for R - Markers).\nGenere una capa de calor (heat map) con la función leaflet.extras::addHeatmap()."
  },
  {
    "objectID": "12-introduccion-manejo-datos-geoespaciales.html#datos-raster",
    "href": "12-introduccion-manejo-datos-geoespaciales.html#datos-raster",
    "title": "12  Introducción al manejo de datos geoespaciales con R",
    "section": "12.5 Datos raster",
    "text": "12.5 Datos raster\n\n12.5.1 El modelo raster\nEl modelo de datos raster usualmente consiste de un encabezado y de una matriz con celdas (también llamadas pixeles) de un mismo tamaño. El encabezado define el CRS, la extensión y el punto de origen de una capa raster. Por lo general, el origen se ubica en la esquina inferior izquierda o en la esquina superior izquierda de la matriz. La extensión se define mediante el número de filas, el número de columnas y el tamaño (resolución) de la celda.\nCada celda tiene una identificación (ID) y almacena un único valor, el cual puede ser numérico o categórico, como se muestra en la Figura 12.2.\n\n\n\n\n\nFigura 12.2: El modelo raster: (A) ID de las celdas, (B) valores de las celdas, (C) mapa raster de colores. Imagen de Robin Lovelace et al.\n\n\n\n\nA diferencia del modelo vectorial, el modelo raster no necesita almacenar todas las coordenadas de cada geometría (i.e. las esquinas de las celdas), debido a que la ubicación de cada celda puede calcularse a partir de la información contenida en el encabezado. Esta simplicidad, en conjunto con el álgebra de mapas, permiten que el procesamiento de datos raster sea mucho más eficiente que el procesamiento de datos vectoriales. Por otra parte, el modelo vectorial es mucho más flexible en cuanto a las posibilidades de representación de geometrías y almacenamiento de valores, por medio de múltiples elementos de datos.\nLos mapas raster generalmente almacenan fenómenos continuos como elevación, precipitación, temperatura, densidad de población y datos espectrales. También es posible representar mediante raster datos discretos, tales como tipos de suelo o clases de cobertura de la tierra, como se muestra en la Figura 12.3.\n\n\n\n\n\nFigura 12.3: Ejemplos de mapas raster continuos y categóricos. Imagen de Robin Lovelace et al.\n\n\n\n\n\n\n12.5.2 El paquete terra\nEl paquete terra implementa un conjunto de funciones para la lectura, escritura, manipulación, análisis y modelado de datos raster y vectoriales. Implementa la clase SpatRaster para manejar los objetos raster.\n\n12.5.2.1 Instalación y carga\n\n# Instalación de terra\ninstall.packages(\"terra\")\n\n\n# Carga de terra\nlibrary(terra)\n\n\n\n12.5.2.2 Métodos\nLa función help() presenta la documentación del paquete terra, incluyendo sus métodos.\n\n# Ayuda sobre el paquete terra\nhelp(\"terra-package\")\n\nSeguidamente, se describen y ejemplifican algunos de los métodos básicos para manejo de datos raster del paquete terra.\n\n12.5.2.2.1 rast() - lectura de datos\nEl método rast() lee datos raster.\nEn el siguiente bloque de código en R, se utiliza el método rast() para leer un archivo GeoTIFF correspondiente a la altitud de Costa Rica. Este archivo proviene de WorldClim, un conjunto de capas climáticas disponibles en varias resoluciones espaciales.\n\n# Lectura de una capa raster de altitud\naltitud <-\n  rast(\n    \"datos/worldclim/cr/altitud.tif\"\n  )\n\naltitud es un objeto de la clase SpatRaster.\n\n# Clase del objeto altitud\nclass(altitud)\n\n[1] \"SpatRaster\"\nattr(,\"package\")\n[1] \"terra\"\n\n\nAl escribirse el nombre de un objeto SpatRaster en la consola de R, se despliega información general sobre este.\n\n# Información general sobre el objeto altitud\naltitud\n\nclass       : SpatRaster \ndimensions  : 687, 546, 1  (nrow, ncol, nlyr)\nresolution  : 0.008333333, 0.008333333  (x, y)\nextent      : -87.10189, -82.55189, 5.494651, 11.21965  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : altitud.tif \nname        : altitud \n\n\n\n\n12.5.2.2.2 crs() y project() - manejo de sistemas de coordenadas\nEl método crs() retorna el CRS de un objeto SpatRaster.\n\n# CRS del objeto altitud\ncrs(altitud)\n\n[1] \"GEOGCRS[\\\"WGS 84\\\",\\n    DATUM[\\\"World Geodetic System 1984\\\",\\n        ELLIPSOID[\\\"WGS 84\\\",6378137,298.257223563,\\n            LENGTHUNIT[\\\"metre\\\",1]]],\\n    PRIMEM[\\\"Greenwich\\\",0,\\n        ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    CS[ellipsoidal,2],\\n        AXIS[\\\"geodetic latitude (Lat)\\\",north,\\n            ORDER[1],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        AXIS[\\\"geodetic longitude (Lon)\\\",east,\\n            ORDER[2],\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n    ID[\\\"EPSG\\\",4326]]\"\n\n\ncrs() también puede asignar un CRS a un objeto SpatRaster.\n\n# Asignación de un CRS a una copia del objeto altitud\naltitud_crtm05 <- altitud\ncrs(altitud_crtm05) <- \"EPSG:5367\"\n\n# Consulta\ncrs(altitud_crtm05)\n\n[1] \"PROJCRS[\\\"CR05 / CRTM05\\\",\\n    BASEGEOGCRS[\\\"CR05\\\",\\n        DATUM[\\\"Costa Rica 2005\\\",\\n            ELLIPSOID[\\\"WGS 84\\\",6378137,298.257223563,\\n                LENGTHUNIT[\\\"metre\\\",1]]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        ID[\\\"EPSG\\\",5365]],\\n    CONVERSION[\\\"Costa Rica TM 2005\\\",\\n        METHOD[\\\"Transverse Mercator\\\",\\n            ID[\\\"EPSG\\\",9807]],\\n        PARAMETER[\\\"Latitude of natural origin\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8801]],\\n        PARAMETER[\\\"Longitude of natural origin\\\",-84,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8802]],\\n        PARAMETER[\\\"Scale factor at natural origin\\\",0.9999,\\n            SCALEUNIT[\\\"unity\\\",1],\\n            ID[\\\"EPSG\\\",8805]],\\n        PARAMETER[\\\"False easting\\\",500000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8806]],\\n        PARAMETER[\\\"False northing\\\",0,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8807]]],\\n    CS[Cartesian,2],\\n        AXIS[\\\"northing (N)\\\",north,\\n            ORDER[1],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        AXIS[\\\"easting (E)\\\",east,\\n            ORDER[2],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n    USAGE[\\n        SCOPE[\\\"Cadastre, engineering survey, topographic mapping (large and medium scale).\\\"],\\n        AREA[\\\"Costa Rica - onshore and offshore east of 86°30'W.\\\"],\\n        BBOX[2.21,-86.5,11.77,-81.43]],\\n    ID[\\\"EPSG\\\",5367]]\"\n\n\nEl método project() reproyecta un objeto SpatRaster a un nuevo CRS.\n\n# Transformación del CRS del objeto altitud\naltitud_utm17N <-\n  altitud |>\n  project(\"EPSG:8910\")\n\n# Consulta\ncrs(altitud_utm17N)\n\n[1] \"PROJCRS[\\\"CR-SIRGAS / UTM zone 17N\\\",\\n    BASEGEOGCRS[\\\"CR-SIRGAS\\\",\\n        DATUM[\\\"CR-SIRGAS\\\",\\n            ELLIPSOID[\\\"GRS 1980\\\",6378137,298.257222101,\\n                LENGTHUNIT[\\\"metre\\\",1]]],\\n        PRIMEM[\\\"Greenwich\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433]],\\n        ID[\\\"EPSG\\\",8907]],\\n    CONVERSION[\\\"UTM zone 17N\\\",\\n        METHOD[\\\"Transverse Mercator\\\",\\n            ID[\\\"EPSG\\\",9807]],\\n        PARAMETER[\\\"Latitude of natural origin\\\",0,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8801]],\\n        PARAMETER[\\\"Longitude of natural origin\\\",-81,\\n            ANGLEUNIT[\\\"degree\\\",0.0174532925199433],\\n            ID[\\\"EPSG\\\",8802]],\\n        PARAMETER[\\\"Scale factor at natural origin\\\",0.9996,\\n            SCALEUNIT[\\\"unity\\\",1],\\n            ID[\\\"EPSG\\\",8805]],\\n        PARAMETER[\\\"False easting\\\",500000,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8806]],\\n        PARAMETER[\\\"False northing\\\",0,\\n            LENGTHUNIT[\\\"metre\\\",1],\\n            ID[\\\"EPSG\\\",8807]]],\\n    CS[Cartesian,2],\\n        AXIS[\\\"(E)\\\",east,\\n            ORDER[1],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n        AXIS[\\\"(N)\\\",north,\\n            ORDER[2],\\n            LENGTHUNIT[\\\"metre\\\",1]],\\n    USAGE[\\n        SCOPE[\\\"Oil and gas exploration and production.\\\"],\\n        AREA[\\\"Costa Rica - offshore - Caribbean sea.\\\"],\\n        BBOX[9.6,-83.6,11.77,-81.43]],\\n    ID[\\\"EPSG\\\",8910]]\"\n\n\n\n\n12.5.2.2.3 plot() - mapeo\nEl método plot() muestra objetos SpatRaster en un mapa.\n\n# Mapa de la capa de altitud\nplot(altitud)\n\n\n\n\nLos argumentos reset y add de plot() permiten generar un mapa con varias capas.\n\n# Primera capa del mapa (raster)\nplot(\n  altitud,\n  main = \"Registros de presencia de felinos en Costa Rica\",\n  axes = TRUE,\n  reset = FALSE\n)\n\n# Segunda capa (vectorial)\nplot(felinos$geometry,\n     add = TRUE,     \n     pch = 16,\n     col = \"blue\")\n\n\n\n\n\n\n12.5.2.2.4 writeRaster() - escritura de datos\nLa función writeRaster() guarda en el disco un objeto SpatRaster en los diferentes formatos raster de GDAL.\n\n# Especificación del directorio de trabajo (debe utilizarse una ruta existente)\nsetwd(\"/home/mfvargas\")\n\n# Escritura del objeto altitud\naltitud |>\n  writeRaster(\"altitud.asc\")\n\n\n\n12.5.2.2.5 Otros\n\n# Cantidad de filas de un objeto SpatRaster\nnrow(altitud)\n\n[1] 687\n\n# Cantidad de columnas de un objeto SpatRaster\nncol(altitud)\n\n[1] 546\n\n# Resolución de un objeto SpatRaster\nres(altitud)\n\n[1] 0.008333333 0.008333333\n\n\n\n\n\n12.5.2.3 leaflet\nA la fecha de escritura de este documento (2023-05-21), el paquete leaflet no cuenta con soporte para combinar en un mapa objetos sf con objetos SpatRaster, pero sí puede hacerlo con objetos de tipo RasterLayer del paquete raster (antecesor de terra). Por este motivo, se utiliza aquí el método raster() de raster para realizar la conversión de SpatRaster a RasterLayer y así mapear el objeto altitud con el método addRasterImage() de leaflet. Para más información sobre el tema de conversiones entre las diferentes clases espaciales de R, puede consultarse Conversions between different spatial classes in R.\nEntonces, seguidamente se instala y carga el paquete raster. También debe cargarse e instalarse el paquete rgdal, como complemento de raster.\n\n# Instalación de raster y rgdal\ninstall.packages(\"raster\")\ninstall.packages(\"rgdal\")\n\n\n# Carga de raster y rgdal\nlibrary(raster)\nlibrary(rgdal)\n\nSe muestran en un mapa leaflet las capas de altitud (raster), provincias (polígonos) y registros de presencia de felinos (puntos) sobre una capa base de OpenStreetMap (OSM) y otra de ESRI.\n\n# Paleta de colores de altitud de Costa Rica\ncolores_altitud <-\n  colorNumeric(terrain.colors(25),\n               values(altitud),\n               na.color = \"transparent\")\n\n# Mapa leaflet básico con capas de altitud, provincias y registros de presencia de felinos\nleaflet() %>%\n  setView(# centro y nivel inicial de acercamiento\n    lng = -84.19452,\n    lat = 9.572735,\n    zoom = 7) |>  \n  addTiles(group = \"Mapa general (OpenStreetMap)\") |>\n  addProviderTiles(\n    providers$Esri.WorldImagery, \n    group = \"Imágenes satelitales (ESRI World Imagery)\"\n  ) |>\n  addRasterImage( # capa raster\n    raster(altitud), # conversión de SpatRaster a RasterLayer \n    colors = colores_altitud, # paleta de colores\n    opacity = 0.6,\n    group = \"Altitud\",\n  ) |>\n  addLegend(\n    title = \"Altitud\",\n    values = values(altitud),\n    pal = colores_altitud,\n    position = \"bottomleft\",\n    group = \"Altitud\"\n  ) |>\n  addPolygons(\n    data = provincias,\n    color = \"black\",\n    fillColor = \"transparent\",\n    stroke = TRUE,\n    weight = 1.0,\n    group = \"Provincias\"\n  ) |>\n  addCircleMarkers(\n    data = felinos,\n    stroke = F,\n    radius = 4,\n    fillColor = 'blue',\n    fillOpacity = 1,\n    popup = paste(\n      paste0(\"<strong>Especie: </strong>\", felinos$species),\n      paste0(\"<strong>Localidad: </strong>\", felinos$locality),\n      paste0(\"<strong>Fecha: </strong>\", felinos$eventDate),\n      paste0(\"<strong>Fuente: </strong>\", felinos$institutionCode),\n      paste0(\"<a href='\", felinos$occurrenceID, \"'>Más información</a>\"),\n      sep = '<br/>'\n    ),\n    group = \"Felinos\"    \n  ) |>\n  addLayersControl(\n    # control de capas\n    baseGroups = c(\n      \"Mapa general (OpenStreetMap)\", \n      \"Imágenes satelitales (ESRI World Imagery)\"\n    ),\n    overlayGroups = c(\"Altitud\", \"Provincias\", \"Felinos\")\n  ) |>\n  addResetMapButton() |> # botón de reinicio\n  addSearchOSM() |> # búsqueda en OSM\n  addMouseCoordinates() |> # coordenadas del puntero del ratón\n  addScaleBar(\n    position = \"bottomleft\", \n    options = scaleBarOptions(imperial = FALSE)\n  ) |> # barra de escala\n  addMiniMap(position = \"bottomright\") |> # mapa de ubicación\n  addFullscreenControl() # mapa de pantalla completa"
  },
  {
    "objectID": "12-introduccion-manejo-datos-geoespaciales.html#ejercicios-1",
    "href": "12-introduccion-manejo-datos-geoespaciales.html#ejercicios-1",
    "title": "12  Introducción al manejo de datos geoespaciales con R",
    "section": "12.6 Ejercicios",
    "text": "12.6 Ejercicios\nEn un documento Quarto incluya:\n\nUna tabla DT con las columnas del conjunto de datos de felinos de Costa Rica correspondientes a especie (species), fecha (eventDate), provincia (stateProvince), localidad (locality), longitud (decimalLongitude) y latitud (decimalLatitude).\n\nLas columnas deben, si es necesario, convertirse al tipo de datos adecuado (ej. Date).\nLos encabezados de las columnas en la tabla deben desplegarse en español, pero no deben alterarse los nombres de las columnas. Sugerencia: utilice el argumento colnames de la función datatable().\nLos controles de la tabla deben estar en español.\n\nUn gráfico de barras, generado con gglot2 y traducido a plotly con ggplotly(), que muestre la cantidad de registros para cada especie de felinos.\n\nLas barras deben estar ordenadas de mayor a menor.\nTodos los controles y etiquetas del gráfico deben estar en español.\n\nUn mapa leaflet con las siguientes capas:\n\nCapa base de OpenStreetMap (OSM).\nProvincias de Costa Rica (polígonos).\nRegistros de presencia de felinos (puntos).\n\n\nPublique el documento como un sitio web en GitHub Pages."
  },
  {
    "objectID": "12-introduccion-manejo-datos-geoespaciales.html#recursos-de-interés",
    "href": "12-introduccion-manejo-datos-geoespaciales.html#recursos-de-interés",
    "title": "12  Introducción al manejo de datos geoespaciales con R",
    "section": "12.7 Recursos de interés",
    "text": "12.7 Recursos de interés\nBivand, R. (2022). CRAN Task View: Analysis of Spatial Data. https://CRAN.R-project.org/view=Spatial\nR-Ladies Madrid. (2021). R-Ladies Madrid (español)—Analiza datos espaciales—Stephanie Orellana. https://www.youtube.com/watch?v=59tO2ARvVVU"
  },
  {
    "objectID": "13-operaciones-datos-atributos.html",
    "href": "13-operaciones-datos-atributos.html",
    "title": "13  Operaciones con datos de atributos",
    "section": "",
    "text": "Se les llama atributos a los elementos de datos no espaciales o geométricos de un conjunto de datos geoespaciales. Estos datos pueden ser de tipos numéricos o textuales, entre otros. Un conjunto de datos vectoriales puede tener asociados varios campos de atributos, mientras que un conjunto de datos raster tiene solamente uno.\nLas operaciones con atributos en datos vectoriales incluyen creación de subconjuntos, agregación y unión (join). Estas operaciones pueden ejecutarse con funciones del paquete base de R o con las de paquetes de Tidyverse, como dplyr. Por su parte, las operaciones con atributos en datos raster incluyen creación de subconjuntos y resumen de información."
  },
  {
    "objectID": "13-operaciones-datos-atributos.html#trabajo-previo",
    "href": "13-operaciones-datos-atributos.html#trabajo-previo",
    "title": "13  Operaciones con datos de atributos",
    "section": "13.2 Trabajo previo",
    "text": "13.2 Trabajo previo\n\n13.2.1 Lecturas\nLovelace, R., Nowosad, J., & Münchow, J. (2019). Geocomputation with R (capítulo 3). CRC Press. https://geocompr.robinlovelace.net/"
  },
  {
    "objectID": "13-operaciones-datos-atributos.html#carga-de-paquetes",
    "href": "13-operaciones-datos-atributos.html#carga-de-paquetes",
    "title": "13  Operaciones con datos de atributos",
    "section": "13.3 Carga de paquetes",
    "text": "13.3 Carga de paquetes\n\n# Carga de paquetes\nlibrary(tidyverse)\nlibrary(DT)\nlibrary(sf)\nlibrary(rgdal)\nlibrary(raster)\nlibrary(terra)\nlibrary(leaflet)\nlibrary(leaflet.extras)\nlibrary(leafem)"
  },
  {
    "objectID": "13-operaciones-datos-atributos.html#carga-de-datos-para-ejemplos",
    "href": "13-operaciones-datos-atributos.html#carga-de-datos-para-ejemplos",
    "title": "13  Operaciones con datos de atributos",
    "section": "13.4 Carga de datos para ejemplos",
    "text": "13.4 Carga de datos para ejemplos\n\n13.4.1 Cantones de Costa Rica\nEste archivo proviene de un geoservicio de tipo Web Feature Service (WFS) publicado por el Instituto Geográfico Nacional (IGN). Se utiliza una versión del año 2020 (con 82 cantones), debido a que esa es la que corresponde con los datos de COVID-19 que publicó el Ministerio de Salud durante la pandemia.\nArchivo GeoJSON de cantones de Costa Rica (del año 2020)\n\n\nCódigo\n# Carga de datos de cantones de Costa Rica\n# El argumento dsn debe tener la ruta a la fuente de datos\ncantones <-\n  st_read(\n    dsn = \"datos/ign/delimitacion-territorial-administrativa/cantones_2020.geojson\",\n    quiet = TRUE\n  )\n\n\n\n\n\n\nCódigo\n# Mapa leaflet de cantones\nleaflet() |>\n  setView(\n    lng = -84.19452,\n    lat = 9.572735,\n    zoom = 7\n  ) |>  \n  addTiles() |>\n  addPolygons(\n    data = st_transform(cantones, 4326),\n    color = \"black\",\n    fillColor = \"transparent\",\n    stroke = TRUE,\n    weight = 1.0,\n    popup = paste(\n      paste0(\"<strong>Código de cantón: </strong>\", cantones$cod_canton),\n      paste0(\"<strong>Cantón: </strong>\", cantones$canton),\n      sep = '<br/>'\n    )\n  ) |>\n  addScaleBar(\n    position = \"bottomleft\", \n    options = scaleBarOptions(imperial = FALSE)\n  ) |>\n  addFullscreenControl(position = \"topright\")\n\n\n\n\n\n\n\n\nCódigo\n# Tabla DT de cantones\ncantones |>\n  st_drop_geometry() |>\n  dplyr::select(cod_canton, canton) |>\n  arrange(cod_canton) |>\n  datatable(\n    rownames = FALSE,\n    options = list(\n      dom = 'ft',\n      pageLength = 8,\n      language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')\n    )    \n  )\n\n\n\n\n\n\n\n\n\n\nMapa y tabla de cantones de Costa Rica\n\n\n\n\n\n13.4.2 Casos positivos de COVID-19 en cantones de Costa Rica\nEstos datos fueron publicados por el Ministerio de Salud de Costa Rica en https://geovision.uned.ac.cr/oges/ (a la fecha de escritura de este documento, el enlace no está funcionando). Se distribuyen en archivos CSV, incluyendo un archivo de datos generales para todo el país y varios archivos con datos por cantón. La fecha de la última actualización es 2022-05-30.\nArchivo CSV de casos positivos de COVID-19 en cantones de Costa Rica\nEl archivo contiene una columna por cada fecha en la que se tomaron datos en el nivel de cantón. Se carga solamente la columna de la última fecha (2022-05-30).\n\n\nCódigo\n# Carga de datos de casos positivos de COVID-19 en cantones de Costa Rica\n# El argumento file debe tener la ruta al archivo de datos\ncovid_positivos_cantones <-\n  read_delim(\n    file = \"datos/ministerio-salud/covid/05_30_22_CSV_POSITIVOS.csv\",\n    locale = locale(encoding = \"WINDOWS-1252\"), # para desplegar correctamente acentos y otros caracteres\n    col_select = c(\"cod_provin\", \"provincia\", \"cod_canton\", \"canton\", \"30/05/2022\") # 30/05/2022 contiene los datos para la última fecha disponible\n)\n\n# Se remueve la fila con canton == \"Otros\"\ncovid_positivos_cantones <-\n  covid_positivos_cantones |>\n  filter(canton != \"Otros\")\n\n# Cambio de nombre de columnas\ncovid_positivos_cantones <-\n  covid_positivos_cantones %>%\n  rename(positivos_20220530 = '30/05/2022')\n\n\n\n\n\n\nCódigo\n# Tabla DT de casos positivos de COVID-19 en cantones de Costa Rica\ncovid_positivos_cantones |>\n  arrange(cod_canton) |>\n  datatable(\n    rownames = FALSE,\n    options = list(\n      pageLength = 7,\n      language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')\n    )    \n  )\n\n\n\n\n\n\n\n\n\n\nTabla de casos positivos de COVID-19 en cantones de Costa Rica"
  },
  {
    "objectID": "13-operaciones-datos-atributos.html#introducción",
    "href": "13-operaciones-datos-atributos.html#introducción",
    "title": "13  Operaciones con datos de atributos",
    "section": "13.5 Introducción",
    "text": "13.5 Introducción\nSe les llama atributos a los elementos de datos no espaciales o geométricos de un conjunto de datos geográficos. Estos datos pueden ser de tipos numéricos o textuales, entre otros. Un conjunto de datos vectoriales puede tener asociados varios campos de atributos, mientras que un conjunto de datos raster tiene solamente uno."
  },
  {
    "objectID": "13-operaciones-datos-atributos.html#datos-vectoriales",
    "href": "13-operaciones-datos-atributos.html#datos-vectoriales",
    "title": "13  Operaciones con datos de atributos",
    "section": "13.6 Datos vectoriales",
    "text": "13.6 Datos vectoriales\nLas operaciones con atributos en datos vectoriales incluyen:\n\nCreación de subconjuntos (subsetting).\n\nAgregación (aggregation).\n\nUnión (joining).\n\nSeguidamente, se explica como maneja estas operaciones el paquete sf.\n\n13.6.1 Manejo de datos de atributos con el paquete sf\nComo se mencionó en capítulos anteriores, el paquete sf define una clase, llamada sf, la cual extiende la clase data.frame del paquete base de R. Los objetos de la clase sf tienen una fila (o feature) por cada observación y una columna por cada atributo. También tienen una columna especial para almacenar las geometrías (puntos, líneas, polígonos, etc.), la cual generalmente se denomina geometry o geom (pero puede tener cualquier otro nombre). Esto permite que sf utilice métodos (i.e. funciones) de la clase data.frame, tales como plot() y summary(), entre otros.\nAdemás de data.frame, sf es compatible con la clase tibble, la cual también puede manipularse mediante los métodos de dplyr. Esto que permite un manejo tidy (i.e. ordenado, organizado) de los datos geoespaciales, de acuerdo con el enfoque de Tidyverse.\nEn la secciones siguientes, se explicará el manejo de datos de atributos en conjuntos de datos geoespaciales, mediante Tidyverse.\n\n13.6.1.1 El método st_drop_geometry()\nst_drop_geometry() es un método que remueve las geometrías de un objeto sf. Esto puede ser útil cuando se desea operar solamente con las variables no espaciales.\nSecuencia de operaciones que no incluye st_drop_geometry()\n\n\nCódigo\n# Operaciones sin st_drop_geometry()\ncantones |>\n  dplyr::select(canton, area) |>\n  filter(area >= 2000)\n\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 405620.8 ymin: 970393.7 xmax: 658879.5 ymax: 1215901\nProjected CRS: CR05 / CRTM05\n        canton    area                       geometry\n1 Buenos Aires 2382.94 MULTIPOLYGON (((574574.2 10...\n2    Talamanca 2792.23 MULTIPOLYGON (((621284.1 10...\n3       Pococí 2408.76 MULTIPOLYGON (((535055.5 12...\n4   San Carlos 3352.31 MULTIPOLYGON (((460739 1215...\n5    Sarapiquí 2144.38 MULTIPOLYGON (((482356.4 11...\n\n\nSecuencia de operaciones que incluye st_drop_geometry()\n\n\nCódigo\n# Operaciones con st_drop_geometry()\ncantones |>\n  st_drop_geometry() |>\n  dplyr::select(canton, area) |>\n  filter(area >= 2000)\n\n\n        canton    area\n1 Buenos Aires 2382.94\n2    Talamanca 2792.23\n3       Pococí 2408.76\n4   San Carlos 3352.31\n5    Sarapiquí 2144.38\n\n\nComo puede verse, la columna de geometrías se incluye como resultado de cualquier operación, a menos que se remueva explícitamente.\n\n\n13.6.1.2 Creación de subconjuntos\nFrecuentemente, es necesario extrer subconjuntos del conjunto de datos original, para facilidad de manejo y para atender requerimientos específicos de un análisis.\nEl paquete dplyr permite crear flujos de trabajo intuitivos y rápidos, debido a que se apoya en código escrito en el lenguaje C++. Esto es útil, por ejemplo, cuando se trabaja con conjuntos de datos grandes (big data) y cuando se necesita integración con bases de datos. Los principales métodos de dplyr para creación de subconjuntos son select(), slice() y filter().\n\n13.6.1.2.1 El método select()\nselect() permite seleccionar y renombrar columnas de un conjunto de datos.\nSelección y cambio de nombre de columnas\n\n\nCódigo\n# Selección de columnas canton, area (renombrada a area_km2) y provincia\ncantones |>\n  head(10) |> # para mostrar solo las 10 primeras filas\n  st_drop_geometry() |> # para remover la columna de geometrías\n  dplyr::select(canton, area_km2 = area, provincia)\n\n\n          canton area_km2  provincia\n1     Corredores   623.61 Puntarenas\n2        Golfito  1753.42 Puntarenas\n3      Coto Brus   944.24 Puntarenas\n4            Osa  1932.03 Puntarenas\n5   Buenos Aires  2382.94 Puntarenas\n6  Pérez Zeledón  1901.08   San José\n7         Quepos   557.85 Puntarenas\n8      Talamanca  2792.23      Limón\n9        Parrita   483.22 Puntarenas\n10       Tarrazú   291.27   San José\n\n\n\n\n13.6.1.2.2 El método slice()\nslice() crea un subconjunto con base en las posiciones de las filas.\nSubconjunto especificado mediante un rango de posiciones de filas\n\n\nCódigo\n# Subconjunto de filas entre las posiciones 1 y 10 del conjunto de datos de COVID-19\ncovid_positivos_cantones |>\n  slice(1:10)\n\n\n# A tibble: 10 × 5\n   cod_provin provincia cod_canton canton             positivos_20220530\n        <dbl> <chr>          <dbl> <chr>                           <dbl>\n 1          1 San José         112 Acosta                           4104\n 2          1 San José         110 Alajuelita                      18973\n 3          1 San José         106 Aserrí                          10880\n 4          1 San José         118 Curridabat                      14518\n 5          1 San José         103 Desamparados                    43283\n 6          1 San José         117 Dota                              834\n 7          1 San José         102 Escazú                          15134\n 8          1 San José         108 Goicoechea                      25497\n 9          1 San José         120 León Cortés Castro               1339\n10          1 San José         115 Montes de Oca                    9987\n\n\n\n\n13.6.1.2.3 El método filter()\nfilter() filtra filas que cumplen una expresión lógica.\nFiltrado de filas que cumplen una expresión lógica\n\n\nCódigo\n# Filtrado de cantones de la provincia de Heredia\ncantones |>\n  st_drop_geometry() |>\n  dplyr::select(provincia, canton) |>\n  filter(provincia == \"Heredia\")\n\n\n   provincia        canton\n1    Heredia Santo Domingo\n2    Heredia         Belén\n3    Heredia     San Pablo\n4    Heredia       Heredia\n5    Heredia        Flores\n6    Heredia    San Rafael\n7    Heredia         Barva\n8    Heredia    San Isidro\n9    Heredia Santa Bárbara\n10   Heredia     Sarapiquí\n\n\n\n\n\n13.6.1.3 Agregación\nLas operaciones de agregación realizan cálculos (ej. sumas, promedios, mínimos, máximos) a partir de la agrupaciones de datos. En Tidyverse y dplyr, las agregaciones de datos se realizan con las funciones group_by() y summarize().\n\n13.6.1.3.1 Las funciones group_by() y summarize()\ngroup_by() crea grupos de filas de un conjunto de datos, de acuerdo con los valores de una o varias columnas. summarize() crea columnas adicionales con cálculos para cada grupo, tales como promedios, sumas, mínimos, máximos y otros. Si summarize() se ejecuta sin group_by(), crea una única fila para todo el conjunto de datos.\nPor ejemplo, en un conjunto de datos de ventas de una cadena de tiendas, se podría usar group_by() para hacer un grupo por cada ciudad en la que una o varias tiendas. Luego con summarize(), se podría crear una columna con el total de ventas para cada ciudad (i.e. para cada grupo).\nAgrupación y sumarización\n\n\nCódigo\n# Suma de áreas de cantones por provincia\ncantones |>\n  st_drop_geometry() |>\n  group_by(provincia) |>\n  summarize(area_km2 = sum(area, na.rm = TRUE))\n\n\n# A tibble: 7 × 2\n  provincia  area_km2\n  <chr>         <dbl>\n1 Alajuela      9772.\n2 Cartago       3093.\n3 Guanacaste   10190.\n4 Heredia       2663.\n5 Limón         9177.\n6 Puntarenas   11299.\n7 San José      4970.\n\n\nCódigo\n# Suma de áreas de cantones para todo el país\ncantones |>\n  st_drop_geometry() |>\n  summarize(area_km2 = sum(area, na.rm = TRUE))\n\n\n  area_km2\n1    51164\n\n\nCódigo\n# Las tres provincias más grandes con sus respectivas áreas y cantidad de cantones\ncantones |>\n  st_drop_geometry() |>\n  dplyr::select(area, provincia) |>\n  group_by(provincia) %>%\n  summarize(\n    area = sum(area, na.rm = TRUE),\n    cantidad_cantones = n()\n  ) |>\n  arrange(desc(area)) |> # orden descendente por área\n  top_n(n = 3, wt = area) # se separan los primeros 3\n\n\n# A tibble: 3 × 3\n  provincia    area cantidad_cantones\n  <chr>       <dbl>             <int>\n1 Puntarenas 11299.                11\n2 Guanacaste 10190.                11\n3 Alajuela    9772.                16\n\n\nCódigo\n# Suma de casos positivos de COVID-19 por provincia\ncovid_positivos_cantones |>\n  group_by(provincia) |>\n  summarize(positivos_20220530 = sum(positivos_20220530, na.rm = TRUE))\n\n\n# A tibble: 7 × 2\n  provincia  positivos_20220530\n  <chr>                   <dbl>\n1 Alajuela               179754\n2 Cartago                 92933\n3 Guanacaste              61470\n4 Heredia                100766\n5 Limón                   66752\n6 Puntarenas              86938\n7 San José               315969\n\n\n\n\n\n13.6.1.4 Unión (join)\nLa unión (en inglés, join) de datos ubicados en diferentes fuentes (ej. archivos) es una tarea común en análisis de información. Este tipo de operaciones se realizan con base en columnas que son comunes en los conjuntos de datos que se desea unir.\nEl paquete dplyr proporciona varios métodos para realizar uniones de datos, los cuales se ilustran en la Figura 13.1.\n\n\n\n\n\nFigura 13.1: Tipos de uniones (join) de datos. Imagen de hostingplus.\n\n\n\n\nLas funciones que los implementan son:\n\nleft_join(): mantiene todas las filas del conjunto de datos del lado izquierdo y les agrega las columnas del conjunto de datos del lado derecho, en las filas en las que hay coincidencia.\ninner_join(): incluye las filas que coinciden en ambos conjuntos de datos.\nright_join(): mantiene todas las filas del conjunto de datos del lado derecho y agrega las columnas del conjunto de datos del lado izquierdo, en las filas en las que hay coincidencia.\nfull_join(): incluye todas las filas de ambos conjuntos de datos.\n\nTodos los tipos de joins requieren de una o varias columnas que sean comunes a ambos conjuntos de datos, llamadas llaves de unión o join keys, en inglés. Esas columnas se especifican con el argumento by. Por ejemplo, by = codigo, si la columna común se llama codigo en ambos conjuntos de datos. Si tienen diferentes nombres, se utiliza un vector (ej. by = c(\"codigo_1\" = \"codigo_2\"), en donde codigo_1 es el nombre de la columna en el conjunto de datos de la izquierda y codigo_2 en el de la derecha. Si hay columnas con nombres iguales en ambos conjuntos de datos, by utiliza esos nombres por defecto.\n\n13.6.1.4.1 Ejemplo: unión de los datos geoespaciales de cantones con los datos tabulares de COVID-19\nSe desea crear un mapa de coropletas de los cantones de Costa Rica, coloreado de acuerdo con la cantidad de casos positivos de COVID-19 acumulados al 2022-05-30. Para esto se necesita unir, a través de un left join, el conjunto de datos cantones (con las geometrías y otros datos de los cantones) con el conjunto de datos de covid_positivos_cantones (con la cantidad de casos positivos para cada cantón). Para ambas tablas, la llave de unión es un campo llamado cod_canton, que contiene el código de cantón asignado por el IGN. Se utiliza un left join porque se desea incluir en la unión todos las filas del conjunto de datos de cantones, ya sea que tengan o no tengan datos de COVID-19 asociados.\nEl siguiente bloque de código realiza el left join y almacena el resultado en un objeto sf llamado cantones_union_covid.\n\n\nCódigo\ncantones_union_covid <-\n  cantones |>\n  left_join(\n    dplyr::select(covid_positivos_cantones, cod_canton, positivos_20220530), # este select() es para no llevar columnas innecesarias a la unión\n    by = \"cod_canton\" # llave para realizar la unión\n  )\n\n\nEl siguiente bloque de código genera el mapa leaflet de coropletas.\n\n\nCódigo\n# Paleta de colores\ncolores_cantones_union_covid <-\n  colorNumeric(\n    palette = \"Reds\",\n    domain = cantones_union_covid$positivos_20220530,\n    na.color = \"transparent\"\n  )\n\n# Mapa leaflet\nleaflet() |>\n  setView(\n    lng = -84.19452,\n    lat = 9.572735,\n    zoom = 7) |>\n  addTiles(group = \"OSM\") |>\n  addPolygons(\n    data = st_transform(cantones_union_covid, 4326), # se reproyecta a WGS84\n    fillColor = ~ colores_cantones_union_covid(cantones_union_covid$positivos_20220530),\n    fillOpacity = 0.8,\n    color = \"black\",\n    stroke = TRUE,\n    weight = 1.0,\n    popup = paste(\n      paste(\"<strong>Cantón:</strong>\", cantones_union_covid$canton),\n      paste(\"<strong>Casos positivos al 2022-05-30:</strong>\", cantones_union_covid$positivos_20220530),\n      sep = '<br/>'\n    ),\n    group = \"Casos positivos al 2022-05-30\"\n  ) |>\n  addLegend(\n    position = \"bottomleft\",\n    pal = colores_cantones_union_covid,\n    values = cantones_union_covid$positivos_20220530,\n    group = \"Casos positivos al 2022-05-30\",\n    title = \"Cantidad de casos\"\n  ) |>\n  addLayersControl(\n    baseGroups = c(\"OSM\"),\n    overlayGroups = c(\"Casos positivos al 2022-05-30\")\n  )\n\n\n\n\n\n\n\n\n\n\n13.6.2 Ejercicios\n\nCree un mapa leaflet de coropletas de las provincias de Costa Rica, coloreado de acuerdo con la cantidad de casos positivos de COVID-19 acumulados al 2022-05-30. Se sugiere seguir los siguientes pasos:\n\n\nCree un data frame con la suma, por provincia, de casos positivos de cantones (para realizar la agrupación, use el código de la provincia, no el nombre).\nCon un left join, una la capa de provincias (del año 2020) y el dataframe que creó en el punto a.\nGenere el mapa leaflet de coropletas con el objeto sf que creó en el punto b."
  },
  {
    "objectID": "13-operaciones-datos-atributos.html#datos-raster",
    "href": "13-operaciones-datos-atributos.html#datos-raster",
    "title": "13  Operaciones con datos de atributos",
    "section": "13.7 Datos raster",
    "text": "13.7 Datos raster\nLas operaciones con atributos en datos raster incluyen:\n\nCreación de subconjuntos (subsetting).\n\nResumen de información (summarizing).\n\nSeguidamente, se explicará como maneja estas operaciones el paquete terra.\n\n13.7.1 Manejo de datos de atributos con el paquete terra\n\n13.7.1.1 Funciones básicas para manejo de objetos SpatRaster\nEl siguiente bloque de código crea y mapea un objeto SpatRaster llamado elevacion.\n\n\nCódigo\n# Creación de un objeto SpatRaster\nelevacion <- rast(\n  nrows = 6,\n  ncols = 6,\n  resolution = 0.5,\n  xmin = -1.5,\n  xmax = 1.5,\n  ymin = -1.5,\n  ymax = 1.5,\n  vals = 1:36\n)\n\n# Mapeo\nplot(elevacion)\n\n\n\n\n\nLos objetos SpatRaster también pueden contener valores categóricos de tipo logical o factor. El siguiente bloque de código crea y mapea un objeto SpatRaster con información sobre tipos de granos (i.e. partículas) de una porción de suelo.\n\n\nCódigo\n# Tipos de granos\ngrano_tipo <- c(\"arcilla\", \"limo\", \"arena\")\n\n# Lista de granos generada aleatoriamente\nlista_granos <- sample(grano_tipo, 36, replace = TRUE)\nlista_granos\n\n\n [1] \"arena\"   \"limo\"    \"arena\"   \"arena\"   \"limo\"    \"limo\"    \"arena\"  \n [8] \"arcilla\" \"arena\"   \"arena\"   \"limo\"    \"arcilla\" \"arena\"   \"arena\"  \n[15] \"arcilla\" \"arena\"   \"limo\"    \"arcilla\" \"arcilla\" \"limo\"    \"arcilla\"\n[22] \"limo\"    \"limo\"    \"arena\"   \"arena\"   \"limo\"    \"arcilla\" \"arcilla\"\n[29] \"arena\"   \"arena\"   \"limo\"    \"limo\"    \"arena\"   \"arcilla\" \"limo\"   \n[36] \"limo\"   \n\n\nCódigo\n# Factor de tipos de granos\ngrano_factor <- factor(lista_granos, levels = grano_tipo)\n\n# Objeto SpatRaster de tipos de granos\ngrano <- rast(\n  nrows = 6,\n  ncols = 6,\n  resolution = 0.5,\n  xmin = -1.5,\n  xmax = 1.5,\n  ymin = -1.5,\n  ymax = 1.5,\n  vals = grano_factor\n)\n\n# Mapeo\nplot(grano)\n\n\n\n\n\nAmbos objetos pueden guardados en el disco con la función writeRaster().\n\n\nCódigo\n# Especificación del directorio de trabajo (debe ser una ruta existente)\nsetwd(\"/home/mfvargas\")\n\n# Escritura de los objetos raster\nwriteRaster(elevacion, \"elevacion.asc\")\nwriteRaster(grano, \"grano.asc\")\n\n\nLa función levels() puede utilizarse para consultar la Raster Attribute Table (RAT) de un objeto SpatRaster, la cual contiene información sobre sus factores y niveles. También puede emplearse para asignar nuevos factores a un objeto.\n\n\nCódigo\n# Consulta de la RAT\nlevels(grano)\n\n\n[[1]]\n[1] \"arcilla\" \"limo\"    \"arena\"  \n\n\nCódigo\n# Nuevo factor\nlevels(grano) = data.frame(value = c(0, 1, 2), wetness = c(\"mojado\", \"húmedo\", \"seco\"))\n\n# Consulta de la RAT\nlevels(grano)\n\n\n[[1]]\n[1] \"mojado\" \"húmedo\" \"seco\"  \n\n\nLos raster categóricos también pueden almacenar información relacionada con los colores de cada valor, mediante una tabla. La tabla de colores es un data frame con tres (red, green, blue) o cuatro (alpha) columnas, en la que cada fila corresponde a un valor. Las tablas de colores en terra pueden consultarse o modificarse con la función coltab().\n\n\n13.7.1.2 Creación de subconjuntos\nLos subconjuntos se crean en objetos SpatRaster con el operador [, el cual acepta varios tipos de entradas.\n\nÍndices de filas y columnas.\nID de celdas.\nCoordenadas.\nOtros objetos espaciales.\n\nEn este capítulo, solo se tratarán las dos primeras opciones. Las restantes se cubrirán en las secciones sobre operaciones espaciales.\nLas dos primeras opciones se ilustran en el siguiente bloque de código, en el que se consulta la celda (también llamada pixel) ubicada en la esquina superior izquierda del objeto de elevación.\n\n\nCódigo\n# Celda en la fila 1, columna 1\nelevacion[1, 1]\n\n\n  lyr.1\n1     1\n\n\nCódigo\nelevacion[]\n\n\n      lyr.1\n [1,]     1\n [2,]     2\n [3,]     3\n [4,]     4\n [5,]     5\n [6,]     6\n [7,]     7\n [8,]     8\n [9,]     9\n[10,]    10\n[11,]    11\n[12,]    12\n[13,]    13\n[14,]    14\n[15,]    15\n[16,]    16\n[17,]    17\n[18,]    18\n[19,]    19\n[20,]    20\n[21,]    21\n[22,]    22\n[23,]    23\n[24,]    24\n[25,]    25\n[26,]    26\n[27,]    27\n[28,]    28\n[29,]    29\n[30,]    30\n[31,]    31\n[32,]    32\n[33,]    33\n[34,]    34\n[35,]    35\n[36,]    36\n\n\nCódigo\n# Celda con ID = 1\nelevacion[1]\n\n\n  lyr.1\n1     1\n\n\nLa totalidad de los valores de un objeto SpatRaster puede consultarse con las función values().\n\n\nCódigo\n# Valores de un objeto raster\nvalues(elevacion)\n\n\n      lyr.1\n [1,]     1\n [2,]     2\n [3,]     3\n [4,]     4\n [5,]     5\n [6,]     6\n [7,]     7\n [8,]     8\n [9,]     9\n[10,]    10\n[11,]    11\n[12,]    12\n[13,]    13\n[14,]    14\n[15,]    15\n[16,]    16\n[17,]    17\n[18,]    18\n[19,]    19\n[20,]    20\n[21,]    21\n[22,]    22\n[23,]    23\n[24,]    24\n[25,]    25\n[26,]    26\n[27,]    27\n[28,]    28\n[29,]    29\n[30,]    30\n[31,]    31\n[32,]    32\n[33,]    33\n[34,]    34\n[35,]    35\n[36,]    36\n\n\nEl operador [ también puede utilizarse para modificar los valores de las celdas un objeto SpatRaster.\n\n\nCódigo\n# Modificación de una celda\nelevacion[1, 1] = 0\n\n# Consulta de todos los valores del raster (equivalente a values())\nelevacion[]\n\n\n      lyr.1\n [1,]     0\n [2,]     2\n [3,]     3\n [4,]     4\n [5,]     5\n [6,]     6\n [7,]     7\n [8,]     8\n [9,]     9\n[10,]    10\n[11,]    11\n[12,]    12\n[13,]    13\n[14,]    14\n[15,]    15\n[16,]    16\n[17,]    17\n[18,]    18\n[19,]    19\n[20,]    20\n[21,]    21\n[22,]    22\n[23,]    23\n[24,]    24\n[25,]    25\n[26,]    26\n[27,]    27\n[28,]    28\n[29,]    29\n[30,]    30\n[31,]    31\n[32,]    32\n[33,]    33\n[34,]    34\n[35,]    35\n[36,]    36\n\n\nCódigo\n# Modificación de rangos de celdas\nelevacion[1, c(1, 2)] = 0\n\nelevacion[1, 1:6] = 0\nelevacion[2, 1:6] = 10\nelevacion[3, 1:6] = 15\nelevacion[4, 1:6] = 15\nelevacion[5, 1:6] = 20\nelevacion[6, 1:6] = 35\n\n# Consulta de los valores\nelevacion[]\n\n\n      lyr.1\n [1,]     0\n [2,]     0\n [3,]     0\n [4,]     0\n [5,]     0\n [6,]     0\n [7,]    10\n [8,]    10\n [9,]    10\n[10,]    10\n[11,]    10\n[12,]    10\n[13,]    15\n[14,]    15\n[15,]    15\n[16,]    15\n[17,]    15\n[18,]    15\n[19,]    15\n[20,]    15\n[21,]    15\n[22,]    15\n[23,]    15\n[24,]    15\n[25,]    20\n[26,]    20\n[27,]    20\n[28,]    20\n[29,]    20\n[30,]    20\n[31,]    35\n[32,]    35\n[33,]    35\n[34,]    35\n[35,]    35\n[36,]    35\n\n\n\n\n13.7.1.3 Resumen y sumarización de información\nLa escritura del nombre de un objeto SpatRaster en la consola imprime información general sobre ese objeto. La función summary() proporciona algunas estadísticas descriptivas (mínimo, máximo, cuartiles, etc.). Otras estadísticas pueden ser calculadas con la función global().\n\n\nCódigo\n# Información general\nelevacion\n\n\nclass       : SpatRaster \ndimensions  : 6, 6, 1  (nrow, ncol, nlyr)\nresolution  : 0.5, 0.5  (x, y)\nextent      : -1.5, 1.5, -1.5, 1.5  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsource      : memory \nname        : lyr.1 \nmin value   :     0 \nmax value   :    35 \n\n\nCódigo\n# Resumen de un raster de una capa\nsummary(elevacion)\n\n\n     lyr.1      \n Min.   : 0.00  \n 1st Qu.:10.00  \n Median :15.00  \n Mean   :15.83  \n 3rd Qu.:20.00  \n Max.   :35.00  \n\n\nCódigo\n# Desviación estándar\nglobal(elevacion, sd)\n\n\n            sd\nlyr.1 10.72381\n\n\nAdicionalmente, la función freq() retorna la tabla de frecuencias de valores categóricos.\n\n\nCódigo\n# Tabla de frecuencias\nfreq(grano)\n\n\n  layer  value count\n1     1 mojado     9\n2     1 húmedo    13\n3     1   seco    14\n\n\nLas estadísticas pueden ser visualizadas con funciones como hist() y density().\n\n\nCódigo\n# Histograma\nhist(elevacion)\n\n\n\n\n\nCódigo\n# Densidad\ndensity(elevacion)"
  },
  {
    "objectID": "14-operaciones-datos-espaciales.html",
    "href": "14-operaciones-datos-espaciales.html",
    "title": "14  Operaciones con datos espaciales",
    "section": "",
    "text": "Las operaciones espaciales, tales como las basadas en relaciones topológicas (ej. intersección, traslape, contención, cobertura), en el caso de los datos vectoriales, y el álgebra de mapas, en el caso de los datos raster, constituyen un componente esencial del procesamiento de datos geoespaciales. Varias de las operaciones con datos de atributos estudiadas en el capítulo anterior tienen contrapartes espaciales.\nLas operaciones espaciales para datos vectoriales incluyen creación de subconjuntos espaciales, unión de datos espaciales, agregación de datos espaciales y relaciones de distancia, entre otras. Por su parte, las operaciones espaciales para datos raster incluyen creación de subconjuntos espaciales y álgebra de mapas, entre otras."
  },
  {
    "objectID": "14-operaciones-datos-espaciales.html#trabajo-previo",
    "href": "14-operaciones-datos-espaciales.html#trabajo-previo",
    "title": "14  Operaciones con datos espaciales",
    "section": "14.2 Trabajo previo",
    "text": "14.2 Trabajo previo\n\n14.2.1 Lecturas\nLovelace, R., Nowosad, J., & Münchow, J. (2019). Geocomputation with R (capítulo 4). CRC Press. https://geocompr.robinlovelace.net/\n\n\n14.2.2 Carga de paquetes\n\n# Carga de paquetes\nlibrary(tidyverse)\nlibrary(DT)\nlibrary(sf)\nlibrary(rgdal)\nlibrary(raster)\nlibrary(terra)\nlibrary(leaflet)\nlibrary(leaflet.extras)\nlibrary(leafem)\nlibrary(viridisLite)\n\n\n\n14.2.3 Conjuntos de datos para ejemplos\n\n14.2.3.1 Carga de datos\n\n14.2.3.1.1 Cantones de Costa Rica\nEste archivo proviene de un geoservicio de tipo Web Feature Service (WFS) publicado por el Instituto Geográfico Nacional (IGN). Se utiliza una versión del año 2020 (con 82 cantones). Las geometrías se simplificaron con el método st_simplify(), para reducir el tamaño del archivo.\n\n\nCódigo para simplificar las geometrías de cantones (no es necesario ejecutarlo)\n# Simplificación de geometrías de la capa de cantones de Costa Rica\nst_read(\n  dsn = \"datos/ign/delimitacion-territorial-administrativa/cantones_2020.geojson\",\n  quiet = TRUE\n) |>\nst_simplify(dTolerance = 10, preserveTopology = TRUE) |>\nst_write(\"datos/ign/delimitacion-territorial-administrativa/cantones_2020_simp_10m.geojson\")\n\n\nArchivo GeoJSON de cantones de Costa Rica (del año 2020) con geometrías simplificadas\n\n\nCódigo para cargar los datos de cantones\n# Carga de datos de cantones de Costa Rica\n# El argumento dsn debe tener la ruta a la fuente de datos\ncantones <-\n  st_read(\n    dsn = \"datos/ign/delimitacion-territorial-administrativa/cantones_2020_simp_10m.geojson\",\n    quiet = TRUE\n  ) |>\n  st_transform(4326) # reproyección a WGS84\n\n\n\n\n14.2.3.1.2 Registros de presencia de félidos de Costa Rica\nEste archivo, con registros de presencia de especies silvestres de la familia Felidae en Costa Rica, proviene de una consulta al portal de datos de la Infraestructura Mundial de Información en Biodiversidad (GBIF).\nArchivo CSV de registros de presencia de félidos silvestres de Costa Rica)\n\n\nCódigo para cargar los datos de félidos\n# Carga de datos de félidos de Costa Rica\nfelidos <-\n  st_read(\n    \"datos/gbif/felidos.csv\",\n    options = c(\n      \"X_POSSIBLE_NAMES=decimalLongitude\", # columna de longitud decimal\n      \"Y_POSSIBLE_NAMES=decimalLatitude\"   # columna de latitud decimal\n    ),\n    quiet = TRUE\n  )\n\n# Asignación del CRS WGS84\nst_crs(felidos) <- 4326\n\n\n\n\n\n14.2.3.2 Visualización\n\n\n\n\nCódigo para generar el mapa leaflet de cantones y registros de presencia de félidos\n# Factor de color basado en los valores únicos de especies\ncolores_especies <- colorFactor(\n  palette = viridis(length(unique(felidos$species))), \n  domain = felidos$species\n)\n\n# Mapa leaflet de cantones y registros de presencia de félidos\nleaflet() |>\n  setView(\n    lng = -84.19452,\n    lat = 9.572735,\n    zoom = 7\n  ) |>  \n  addTiles(group = \"Mapa general (OpenStreetMap)\") |>\n  addProviderTiles(\n    providers$Esri.WorldImagery, \n    group = \"Imágenes satelitales (ESRI World Imagery)\"\n  ) |>  \n  addPolygons(\n    data = cantones,\n    color = \"black\",\n    fillColor = \"transparent\",\n    stroke = TRUE,\n    weight = 1.5,\n    popup = paste(\n      paste0(\"<strong>Código del cantón: </strong>\", cantones$cod_canton),\n      paste0(\"<strong>Cantón: </strong>\", cantones$canton),\n      sep = '<br/>'\n    ),\n    group = \"Cantones\"\n  ) |>  \n  addCircleMarkers(\n    data = felidos,\n    stroke = F,\n    radius = 4,\n    fillColor = ~colores_especies(felidos$species),\n    fillOpacity = 1.0,\n    popup = paste(\n      paste0(\"<strong>Especie: </strong>\", felidos$species),\n      paste0(\"<strong>Localidad: </strong>\", felidos$locality),\n      paste0(\"<strong>Fecha: </strong>\", felidos$eventDate),\n      paste0(\"<strong>Fuente: </strong>\", felidos$institutionCode),\n      paste0(\"<a href='\", felidos$occurrenceID, \"'>Más información</a>\"),\n      sep = '<br/>'\n    ),    \n    group = \"Félidos\"\n  ) |>\n  addScaleBar(\n    position = \"bottomleft\", \n    options = scaleBarOptions(imperial = FALSE)\n  ) |>  \n  addLegend(\n    position = \"bottomleft\",    \n    pal = colores_especies,\n    values = felidos$species,\n    title = \"Especies de félidos\",\n    group = \"Félidos\"    \n  ) |>  \n  addLayersControl(\n    baseGroups = c(\n      \"Mapa general (OpenStreetMap)\", \n      \"Imágenes satelitales (ESRI World Imagery)\"\n    ),\n    overlayGroups = c(\"Cantones\", \"Félidos\")\n  ) |>\n  addResetMapButton() |>\n  addSearchOSM() |>\n  addMouseCoordinates() |>\n  addMiniMap(position = \"bottomright\") |>\n  addFullscreenControl()\n\n\n\n\n\n\n\n\n\nMapa de cantones y registros de presencia de félidos de Costa Rica"
  },
  {
    "objectID": "14-operaciones-datos-espaciales.html#introducción",
    "href": "14-operaciones-datos-espaciales.html#introducción",
    "title": "14  Operaciones con datos espaciales",
    "section": "14.3 Introducción",
    "text": "14.3 Introducción\nEste capítulo brinda una visión general de las operaciones espaciales para datos vectoriales implementadas en el paquete sf, y para datos raster implementadas en el paquete terra."
  },
  {
    "objectID": "14-operaciones-datos-espaciales.html#datos-vectoriales",
    "href": "14-operaciones-datos-espaciales.html#datos-vectoriales",
    "title": "14  Operaciones con datos espaciales",
    "section": "14.4 Datos vectoriales",
    "text": "14.4 Datos vectoriales\nLas operaciones espaciales para datos vectoriales incluyen:\n\nCreación de subconjuntos espaciales (spatial subsetting).\nUnión de datos espaciales (spatial joining).\nAgregación de datos espaciales (spatial aggregation).\nRelaciones de distancia.\n\nSeguidamente, se explica como maneja estas operaciones el paquete sf. Antes, se cubre el tema de las relaciones topológicas, el cual es importante en varias operaciones espaciales.\n\n14.4.1 Relaciones topológicas\nLas relaciones topológicas o relaciones topológicas binarias son expresiones lógicas (verdaderas o falsas) sobre las relaciones espaciales entre dos objetos. Por ejemplo, si a y b son dos objetos espaciales (ej. puntos, líneas, polígonos), se pueden considerar relaciones topológicas como las siguientes:\na interseca a b\na es adyacente a b\na está dentro de b\nb está contenido en a\nLos diferentes tipos de relaciones topológicas están estandarizados en el modelo DE-9IM (Dimensionally Extended 9-Intersection Model) y se ilustran en la Figura 14.1. Esta figura muestra también los métodos del paquete sf que implementan las relaciones topológicas (ej. st_intersects(), st_overlaps(), st_winthin(), st_contains()).\n\n\n\n\n\nFigura 14.1: Relaciones topológicas entre geometrías vectoriales. Imagen de Robin Lovelace et al., basada en Egenhofer and Herring (1990).\n\n\n\n\nNótese que para algunas relaciones topológicas (ej. intersección, traslape), el orden no es importante, mientras que para otras sí lo es (ej. contención).\nA las relaciones topológicas se les conoce también como predicados espaciales y así se les denomina en la documentación de sf.\n\n\n14.4.2 Manejo de datos espaciales con el paquete sf\n\n14.4.2.1 Creación de subconjuntos espaciales\nLa creación de subconjuntos espaciales consiste en retornar objetos espaciales que cumplen con algún predicado espacial. Es análoga a la creación de subconjuntos por datos de atributos. Puede realizarse a través de los operadores [ y $ del paquete base de R o por medio de la función filter() de dplyr. Esta última opción es la que se usa en los siguiente ejemplos.\nEn este caso, la función filter() usa tres argumentos: x, y y .predicate, en donde x e y son dos conjuntos de datos espaciales y .predicate el predicado espacial que los relaciona.\n\n14.4.2.1.1 Ejemplo: registros de presencia de félidos en el cantón de Sarapiquí y sus alrededores\nEl siguiente bloque de código crea dos subconjuntos espaciales del conjunto de registros de presencia de félidos, al relacionarlo con el polígono del cantón de Sarapiquí mediante los predicados espaciales st_within() y st_is_within_distance().\n\n\nCódigo\n# Polígono del cantón de Sarapiquí\nsarapiqui <- filter(cantones, canton == \"Sarapiquí\")\n\n# Puntos de félidos ubicados dentro del cantón de Sarapiquí\nfelidos_dentro_sarapiqui <-\n  st_filter(\n    x = felidos,\n    y = sarapiqui, \n    .predicate = st_within\n  )\n\n# Puntos de félidos ubicados dentro de una distancia\n# de hasta 10 km del cantón de Sarapiquí\nfelidos_10km_sarapiqui <- st_filter(\n  x = felidos, \n  y = sarapiqui, \n  .predicate = function(a, b) st_is_within_distance(a, b, 10000)\n)\n\n\nLos subconjuntos espaciales creados se despliegan en los mapas que se muestran seguidamente.\n\n\n\n\nCódigo\n# Mapa leaflet\nleaflet() |>\n  addTiles() |>\n  addPolygons(\n    data = sarapiqui,\n    color = \"black\",\n    fillColor = \"transparent\",\n    stroke = TRUE,\n    weight = 2.0\n  ) |>\n  addCircleMarkers(\n    data = felidos_dentro_sarapiqui,\n    stroke = F,\n    radius = 4,\n    fillColor = \"blue\",\n    fillOpacity = 1.0,\n    popup = paste(\n      paste0(\"<strong>Especie: </strong>\", felidos_dentro_sarapiqui$species),\n      paste0(\"<strong>Localidad: </strong>\", felidos_dentro_sarapiqui$locality),\n      paste0(\"<strong>Fecha: </strong>\", felidos_dentro_sarapiqui$eventDate),\n      paste0(\"<strong>Fuente: </strong>\", felidos_dentro_sarapiqui$institutionCode),\n      paste0(\"<a href='\", felidos$occurrenceID, \"'>Más información</a>\"),\n      sep = '<br/>'\n    ),    \n    group = \"Félidos\"\n  ) |>  \n  addScaleBar(\n    position = \"bottomleft\", \n    options = scaleBarOptions(imperial = FALSE)\n  ) |>\n  addFullscreenControl(position = \"topright\")\n\n\n\n\n\n\n\n\nCódigo\n# Mapa leaflet\nleaflet() |>\n  addTiles() |>\n  addPolygons(\n    data = sarapiqui,\n    color = \"black\",\n    fillColor = \"transparent\",\n    stroke = TRUE,\n    weight = 2.0\n  ) |>\n  addCircleMarkers(\n    data = felidos_10km_sarapiqui,\n    stroke = F,\n    radius = 4,\n    fillColor = \"blue\",\n    fillOpacity = 1.0,\n    popup = paste(\n      paste0(\"<strong>Especie: </strong>\", felidos_10km_sarapiqui$species),\n      paste0(\"<strong>Localidad: </strong>\", felidos_10km_sarapiqui$locality),\n      paste0(\"<strong>Fecha: </strong>\", felidos_10km_sarapiqui$eventDate),\n      paste0(\"<strong>Fuente: </strong>\", felidos_10km_sarapiqui$institutionCode),\n      paste0(\"<a href='\", felidos_10km_sarapiqui$occurrenceID, \"'>Más información</a>\"),\n      sep = '<br/>'\n    ),    \n    group = \"Félidos\"\n  ) |>  \n  addScaleBar(\n    position = \"bottomleft\", \n    options = scaleBarOptions(imperial = FALSE)\n  ) |>\n  addFullscreenControl(position = \"topright\")\n\n\n\n\n\n\n\n\n\nMapa de registros de presencia de félidos localizados dentro del cantón de Sarapiquí.\n\n\nMapa de registros de presencia de félidos localizados dentro de una distancia de hasta 10 km del cantón de Sarapiquí.\n\n\n\n\n\n\n14.4.2.2 Unión de datos espaciales\nComo se estudió en el capítulo sobre operaciones de datos de atributos, la unión “no espacial” de dos conjuntos de datos se basa en una o varias columnas (llamadas llaves o keys) que están presentes en ambos conjuntos. Las uniones espaciales se basan en un principio similar pero, en lugar de columnas, la relación entre los conjuntos se realiza a través de un predicado espacial.\nEn sf, la unión de datos espaciales se implementa a través de la función st_join(), la cual tiene tres argumentos principales: x, y y join, en donde x e y son dos conjuntos de datos espaciales y join un predicado espacial que, por defecto, es st_intersects. st_join() agrega una o varias columnas a x, provenientes de y, para las filas que satisfacen el predicado.\n\n14.4.2.2.1 Ejemplo: riqueza de especies de félidos en los cantones de Costa Rica\nLos siguientes bloques de código calculan la riqueza de especies de félidos en los cantones de Costa Rica, esto es, la cantidad de especies en cada cantón.\nEl proceso se divide en los siguientes pasos:\n\nUnión espacial de félidos y cantones (esto le agrega a cada registros de félidos el código de cantón correspondiente a su ubicación).\nConteo de la cantidad de especies de félidos en cada cantón (por código de cantón).\nUnión no espacial de cantones con el dataframe con el conteo de especies en cantones (esto le agrega a cada cantón la cantidad de especies de félidos).\nGeneración del mapa de riqueza de especies.\n\n1. Unión espacial de félidos y cantones\nCon st_join(), al conjunto de registros de presencia de félidos, se le agrega la columna cod_canton del conjunto de cantones, mediante el predicado espacial st_within().\n\n\nCódigo\n# Unión espacial de félidos y cantones (solo la columna cod_canton),\n# mediante el predicado st_within().\n# Como resultado, cod_canton se une al conjunto de datos de félidos.\nfelidos_union_cantones <- \n  st_join(\n    x = felidos,\n    y = dplyr::select(cantones, cod_canton), # selección de columna cod_canton\n    join = st_within\n  )\n\n# Despliegue de los datos unidos de félidos y la columna cod_canton de cantones\nfelidos_union_cantones |>\n  st_drop_geometry() |>\n  dplyr::select(species, locality, cod_canton) |>\n  datatable(\n    colnames = c(\"Especie\", \"Localidad\", \"Código de cantón\"),\n    options = list(\n      pageLength = 5,\n      language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')\n    )\n  )\n\n\n\n\n\n\n\n2. Conteo de la cantidad de especies de félidos en cada cantón\nSe realiza una agrupación por código de cantón con group_by(cod_canton) y se crea la columna riqueza_especies_felidos con summarize(riqueza_especies_felidos = n_distinct(species, na.rm = TRUE)). La función n_distinct() cuenta la cantidad de valores diferentes de una columna; en este caso, la cantidad de especies en cada cantón.\n\n\nCódigo\n# Conteo de la cantidad de especies de félidos en cantones\nriqueza_especies_felidos_cantones <-\n  felidos_union_cantones |>\n  st_drop_geometry() |>\n  group_by(cod_canton) |>\n  summarize(riqueza_especies_felidos = n_distinct(species, na.rm = TRUE))\n\n# Despliegue de la cantidad de especies de félidos en cada cantón\nriqueza_especies_felidos_cantones |>\n  arrange(desc(riqueza_especies_felidos)) |>\n  datatable(\n    colnames = c(\"Código de cantón\", \"Riqueza de especies de félidos\"),\n    options = list(\n      pageLength = 5,\n      language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')\n    )\n  )\n\n\n\n\n\n\n\nNótese que hay registros que no están dentro del polígono de ningún cantón y tienen un valor NA en cod_canton. Esto puede deberse a errores de georreferenciación o a políticas de los publicadores de datos para no revelar la ubicación exacta de especies amenazadas.\n3. Unión no espacial de cantones con el dataframe de riqueza de especies en cantones\nCon left_join(), al conjunto de datos de cantones (incluyendo sus geometrías), se le agrega la columna riqueza_especies_felidos, con el conteo de especies por cantón. La función replace_na() se utiliza para reemplazar con 0 los registros de riqueza_especies_felidos que contienen NA.\n\n\nCódigo\n# Unión (no espacial) de cantones y riqueza de especies\ncantones_union_riqueza <-\n  left_join(\n    x = cantones,\n    y = dplyr::select(riqueza_especies_felidos_cantones, cod_canton, riqueza_especies_felidos),\n    by = \"cod_canton\"\n  ) |>\n  replace_na(list(riqueza_especies_felidos = 0))\n\n# Despliegue de los datos de riqueza de especies en cantones\ncantones_union_riqueza |>\n  st_drop_geometry() |>\n  dplyr::select(canton, riqueza_especies_felidos) |>\n  arrange(desc(riqueza_especies_felidos)) |>\n  datatable(\n    colnames = c(\"Cantón\", \"Riqueza de especies de félidos\"),\n    options = list(\n      pageLength = 5,\n      language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Spanish.json')\n    )\n  )\n\n\n\n\n\n\n\n4. Generación del mapa de riqueza de especies\nCon las geometrías de cantones y la riqueza de especies en el mismo conjunto de datos, puede generarse un mapa de coropletas.\n\n\n\n\nCódigo\n# Paleta de colores de riqueza de especies\ncolores_riqueza_especies <-\n  colorNumeric(\n    palette = \"Reds\",\n    domain = cantones_union_riqueza$riqueza_especies_felidos,\n    na.color = \"transparent\"\n  )\n\n# Paleta de colores de especies\ncolores_especies <- colorFactor(\n  palette = viridis(length(unique(felidos$species))), \n  domain = felidos$species\n)\n\n# Mapa leaflet\nleaflet() |>\n  setView(\n    lng = -84.19452,\n    lat = 9.572735,\n    zoom = 7) |>\n  addTiles(group = \"Mapa general (OpenStreetMap)\") |>\n  addProviderTiles(\n    providers$Esri.WorldImagery, \n    group = \"Imágenes satelitales (ESRI World Imagery)\"\n  ) |> \n  addPolygons(\n    data = cantones_union_riqueza,\n    fillColor = ~ colores_riqueza_especies(cantones_union_riqueza$riqueza_especies_felidos),\n    fillOpacity = 0.8,\n    color = \"black\",\n    stroke = TRUE,\n    weight = 1.0,\n    popup = paste(\n      paste(\"<strong>Cantón:</strong>\", cantones_union_riqueza$canton),\n      paste(\"<strong>Riqueza de especies:</strong>\", cantones_union_riqueza$riqueza_especies_felidos),\n      sep = '<br/>'\n    ),\n    group = \"Riqueza de especies\"\n  ) |>\n  addScaleBar(\n    position = \"bottomleft\", \n    options = scaleBarOptions(imperial = FALSE)\n  ) |>    \n  addLegend(\n    position = \"bottomleft\",\n    pal = colores_riqueza_especies,\n    values = cantones_union_riqueza$riqueza_especies_felidos,\n    group = \"Riqueza de especies\",\n    title = \"Riqueza de especies\"\n  ) |>\n  addCircleMarkers(\n    data = felidos,\n    stroke = F,\n    radius = 4,\n    fillColor = ~colores_especies(felidos$species),\n    fillOpacity = 1.0,\n    popup = paste(\n      paste0(\"<strong>Especie: </strong>\", felidos$species),\n      paste0(\"<strong>Localidad: </strong>\", felidos$locality),\n      paste0(\"<strong>Fecha: </strong>\", felidos$eventDate),\n      paste0(\"<strong>Fuente: </strong>\", felidos$institutionCode),\n      paste0(\"<a href='\", felidos$occurrenceID, \"'>Más información</a>\"),\n      sep = '<br/>'\n    ),    \n    group = \"Registros de presencia\"\n  ) |>  \n  addLegend(\n    position = \"bottomright\",    \n    pal = colores_especies,\n    values = felidos$species,\n    title = \"Especies\",\n    group = \"Registros de presencia\"    \n  ) |>  \n  addLayersControl(\n    baseGroups = c(\n      \"Mapa general (OpenStreetMap)\", \n      \"Imágenes satelitales (ESRI World Imagery)\"\n    ),\n    overlayGroups = c(\n      \"Riqueza de especies\",\n      \"Registros de presencia\"\n    )\n  ) |>\n  addResetMapButton() |>\n  addSearchOSM() |>\n  addMouseCoordinates() |>\n  addFullscreenControl() |>\n  hideGroup(\"Registros de presencia\") \n\n\n\n\n\n\n\n\n\nMapa de riqueza de especies de félidos en cantones de Costa Rica\n\n\n\n\n\n\n\n14.4.3 Ejercicios\n\nElabore un mapa de riqueza de especies de vipéridos en las provincias de Costa Rica. Impleméntelo como un mapa de coropletas en Leaflet.\n\nUtilice las siguientes fuentes de datos:\n\nArchivo GeoJSON de provincias de Costa Rica con geometrías simplificadas\nArchivo CSV de registros de presencia de vipéridos de Costa Rica"
  },
  {
    "objectID": "parte-v-aplicaciones-interactivas.html",
    "href": "parte-v-aplicaciones-interactivas.html",
    "title": "V - Aplicaciones interactivas de visualización y análisis de datos",
    "section": "",
    "text": "15 shiny - marco de trabajo para desarrollo de aplicaciones web interactivas"
  },
  {
    "objectID": "15-shiny.html",
    "href": "15-shiny.html",
    "title": "15  shiny - marco de trabajo para desarrollo de aplicaciones web interactivas",
    "section": "",
    "text": "Quarto - Shiny. (s. f.). Recuperado 20 de noviembre de 2022, de https://quarto.org/docs/interactive/shiny/"
  },
  {
    "objectID": "15-shiny.html#resumen",
    "href": "15-shiny.html#resumen",
    "title": "15  shiny - marco de trabajo para desarrollo de aplicaciones web interactivas",
    "section": "15.2 Resumen",
    "text": "15.2 Resumen\nShiny es un paquete de R que facilita el desarrollo de aplicaciones web interactivas. Las aplicaciones shiny se componen de una interfaz de usuario y de un servidor. En la interfaz de usuario, este puede realizar operaciones como filtros, búsquedas y ordenamientos de datos, entre otras. El servidor se encarga de procesar los datos de acuerdo con los parámetros especificados y de retornar los resultados a la interfaz de usuario."
  },
  {
    "objectID": "15-shiny.html#introducción",
    "href": "15-shiny.html#introducción",
    "title": "15  shiny - marco de trabajo para desarrollo de aplicaciones web interactivas",
    "section": "15.3 Introducción",
    "text": "15.3 Introducción\nEn una aplicación interactiva, el usuario puede configurar las salidas, usualmente mediante una interfaz que le permite realizar operaciones como filtros, búsquedas y ordenamientos, entre otras. Shiny es un paquete de R que facilita el desarrollo de este tipo de aplicaciones.\nLas aplicaciones shiny requieren un servidor, el cual es un proceso que puede alojarse en cualquier computador habilitado para ejecutar código en R como, por ejemplo, la estación de trabajo del programador (esta opción se usa principalmente para efectos de desarrollo y pruebas), un servidor ubicado en la red de una organización o un servidor en la nube (ej. shinyapps.io, RStudio Connect).\nPara ejemplos de aplicaciones shiny, puede visitar la siguiente galería."
  },
  {
    "objectID": "15-shiny.html#instalación-y-carga",
    "href": "15-shiny.html#instalación-y-carga",
    "title": "15  shiny - marco de trabajo para desarrollo de aplicaciones web interactivas",
    "section": "15.4 Instalación y carga",
    "text": "15.4 Instalación y carga\n\n# Instalación de shiny\ninstall.packages(\"shiny\")\n\n# Instalación de rsconnect, para conectarse a\n# shinyapps.io, RStudio Connect y otras plataformas similares\ninstall.packages(\"rsconnect\")\n\n\n# Carga de shiny\nlibrary(shiny)\n\n# Carga de rsconnect\nlibrary(rsconnect)"
  },
  {
    "objectID": "15-shiny.html#arquitectura",
    "href": "15-shiny.html#arquitectura",
    "title": "15  shiny - marco de trabajo para desarrollo de aplicaciones web interactivas",
    "section": "15.5 Arquitectura",
    "text": "15.5 Arquitectura\nUna aplicación shiny tiene dos componentes principales:\n\nInterfaz de usuario: despliega controles de entrada y salida (widgets), los cuales eventualente convierte a Lenguaje de Marcado de Hipertexto (HTML).\n\nWidgets de entrada: campos de texto, listas de selección, botones de radio, etc.\nWidgets de salida: tablas, gráficos, mapas, etc. Muchos de estos controles están incluídos en los paquetes que generan los diferentes tipos de salidas (ej. DT, plotly, leaflet).\n\nServidor: es un proceso que recibe las entradas y realiza el procesamiento necesario para generar las salidas y retornar los resultados a la interfaz de usuario.\n\nPara más información sobre la arquitectura de aplicaciones shiny, se recomienda leer The Anatomy of a Shiny Application."
  },
  {
    "objectID": "15-shiny.html#ejemplo",
    "href": "15-shiny.html#ejemplo",
    "title": "15  shiny - marco de trabajo para desarrollo de aplicaciones web interactivas",
    "section": "15.6 Ejemplo",
    "text": "15.6 Ejemplo\nEl siguiente documento Quarto contiene una aplicación shiny que muestra la distribución de la duración de los tiempos de espera entre erupciones del géiser “Old Faithful”, a través de un histograma. El usuario especifica la cantidad de bins del histograma a través de un widget de tipo sliderInput, luego el servidor genera el histograma con la cantidad de bins especificada y lo retorna a la interfaz de usuario para desplegarlo.\n---\ntitle: \"Old Faithful\"\nformat: html\nserver: shiny\n---\n\n```{r}\n#| label: interfaz-usuario\n\n# Este bloque de código dibuja la interfaz de usuario,\n# tanto los controles de entrada como los de salida\n\n# Widget de tipo \"slider\" para entrada de datos\nsliderInput(\n  inputId = \"cantidad_bins\", # \"cantidad_bins\" es el identificador del widget de entrada\n  label = 'Cantidad de bins del histograma:', \n  min = 1, max = 50, value = 30\n)\n            \n# Gráfico de salida, con el identificador \"histograma\"\nplotOutput(outputId = \"histograma\")\n```\n\n```{r}\n#| label: servidor\n#| context: server\n\n# Este bloque realiza el procesamiento en el servidor.\n\n# Generación del gráfico de salida, el cual va a ser retornado \n# por la función plotOutput() a la interfaz de usuario\noutput$histograma <- renderPlot({\n  # Vector con datos de duración de tiempos de espera entre erupciones\n  tiempo_espera <- faithful[, 2]  \n  \n  # \"Bins\" del histograma que se generan con base\n  # en el valor especificado por el usuario en el widget de entrada\n  bins <- seq(\n    from = min(tiempo_espera), \n    to = max(tiempo_espera), \n    length.out = input$cantidad_bins + 1\n  )\n  \n  # Histograma que se retorna a la interfaz de usuario\n  hist(x = tiempo_espera,\n       breaks = bins,\n       main = 'Distribución de duración de tiempos de espera entre erupciones',\n       xlab = \"Duración de los tiempos de espera (min)\",\n       ylab = \"Frecuencia\",\n       col = 'darkgray',\n       border = 'white')\n})\n```\nEs de vital importancia comprender que los dos bloques de código del ejemplo anterior se ejecutan en sesiones de R completamente separadas. Esto implica que no es posible, en principio, acceder desde el primer bloque variables definidas en el segundo, ni viceversa. Sin embargo, existen varias estrategias para compartir código, como las que se detallan en Sharing Code.\nUna forma en la que la interfaz de usuario y el servidor pueden comunicarse, es a través de las listas input y output.\n\ninput contiene la lista de widgets de entrada (listas de selección, campos de entrada de texto, botones de radio, etc.). Cada uno de estos widgets tiene un inputId único. En el ejemplo, “cantidad_bins” es el inputId del widget tipo sliderInput. Se referencia como input$cantidad_bins en el bloque del servidor.\noutput es una lista de componentes que se crean o modifican en el servidor (tablas, gráficos, mapas, etc). y que luego se envían a la interfaz de usuario para su visualización. Para crear o modificar un elemento de output, se utiliza una función render*, y para mostrarlo en la interfaz de usuario, se utiliza una función *Output. En el ejemplo, output$histograma es un gráfico que se crea con la función renderPlot() en función del valor de input$cantidad_bins, y se muestra en la interfaz de usuario con plotOutput().\n\nPor otra parte, hay diferencias importantes entre este documento y otros documentos Quarto:\n\nLa opción server: shiny: en la sección YAML, la cual le indica a Quarto que debe iniciar un servidor Shiny.\nLa opción context: server: en el segundo bloque de código, la cual indica que ese bloque debe ejecutarse en el servidor.\n\nExisten otras opciones para los bloques de código en aplicaciones Shiny:\n\ncontext: setup: para operaciones iniciales (ej. carga de bibliotecas).\ncontext: data: para datos que se desea compartir entre los bloques de código."
  },
  {
    "objectID": "15-shiny.html#ejercicios",
    "href": "15-shiny.html#ejercicios",
    "title": "15  shiny - marco de trabajo para desarrollo de aplicaciones web interactivas",
    "section": "15.7 Ejercicios",
    "text": "15.7 Ejercicios\n\nEjecute en su computadora el código de la aplicación “Old Faithful” mostrado anteriormente.\n\nCree un proyecto en RStudio.\nCree un documento Quarto.\nCopie en el nuevo documento el código de la aplicación “Old Faithful”.\nEjecute el documento con el botón Run Document.\n\nPublique la aplicación “Old Faithful” en shinyapps.io (puede consultar Quarto - Running Documents y How to Deploy R Shiny App for Free on Shinyapps.io).\n\nCree una cuenta en shinyapps.io.\nObtenga su token de autenticación de shinyapps.io en Accounts - Tokens - Show- Show secret - Copy to clipboard.\nEjecute la aplicación en su computadora y publíquela en shinyapps.io con el botón Publish. Elija la opción shinyapps.io e ingrese el token cuando se le solicite. Debe seleccionar todos los archivos requeridos para que su aplicación funciones (datos, imágenes, etc.). En este caso, solo necesita el archivo QMD.\n\nEjecute en su computadora y luego publique en shinyapps.io la aplicación Iris K-Means Clustering.\nEstudie el resto de los ejemplos en Quarto - Shiny - Examples.\nCree una aplicación Shiny para el conjunto de datos de registros de presencia de felinos de Costa Rica, y publíquela en shinyapps.io, con los siguientes componentes:\n\nUna lista de selección de especies.\nUna tabla DT que muestre los registros de la especie seleccionada en la lista.\nUn gráfico ggplot2-plotly de barras que muestre la cantidad de registros por mes de la especie seleccionada en la lista.\nUn mapa leaflet que muestre la ubicación de los registros de la especie seleccionada en la lista.\n\nPuede encontrar una solución parcial en https://github.com/pf0953-programacionr/2022-ii-felinos-shiny."
  },
  {
    "objectID": "15-shiny.html#recursos-de-interés",
    "href": "15-shiny.html#recursos-de-interés",
    "title": "15  shiny - marco de trabajo para desarrollo de aplicaciones web interactivas",
    "section": "15.8 Recursos de interés",
    "text": "15.8 Recursos de interés\nQuarto - Running Documents. (s. f.). Recuperado 20 de noviembre de 2022, de https://quarto.org/docs/interactive/shiny/running.html\nShiny. (s. f.). Recuperado 20 de noviembre de 2022, de https://shiny.rstudio.com/\nShiny - Gallery. (s. f.). Recuperado 20 de noviembre de 2022, de https://shiny.rstudio.com/gallery/\nThe Anatomy of a Shiny Application | R-bloggers. (2021). Recuperado 21 de noviembre de 2022, de https://www.r-bloggers.com/2021/04/the-anatomy-of-a-shiny-application/\n1littlecoder. (2020). How to Deploy R Shiny App for Free on Shinyapps.io. https://www.youtube.com/watch?v=2QstfyGX4ZU"
  },
  {
    "objectID": "parte-vi-evaluaciones.html",
    "href": "parte-vi-evaluaciones.html",
    "title": "Evaluaciones",
    "section": "",
    "text": "Examen corto 1\nExamen corto 2\nExamen corto 3\nExamen corto 4"
  },
  {
    "objectID": "parte-vi-evaluaciones.html#tareas",
    "href": "parte-vi-evaluaciones.html#tareas",
    "title": "Evaluaciones",
    "section": "Tareas",
    "text": "Tareas\nTarea 1\nTarea 2 Tarea 3 - Grupo 001"
  },
  {
    "objectID": "examen_corto-01.html",
    "href": "examen_corto-01.html",
    "title": "Examen corto 1",
    "section": "",
    "text": "Grupo 001: martes 28 de marzo de 2023\nGrupo 002: jueves 30 de marzo de 2023"
  },
  {
    "objectID": "examen_corto-01.html#temas-a-evaluar",
    "href": "examen_corto-01.html#temas-a-evaluar",
    "title": "Examen corto 1",
    "section": "Temas a evaluar",
    "text": "Temas a evaluar\n1 Pensamiento computacional, arquitectura de computadoras y lenguajes de programación\n2 Interacción humano-computadora\n3 GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos"
  },
  {
    "objectID": "tarea-01.html",
    "href": "tarea-01.html",
    "title": "Tarea 1",
    "section": "",
    "text": "Martes 18 de abril de 2023, 07:59 a.m.\n\n\n\nMiércoles 19 de abril de 2023, 10:59 a.m."
  },
  {
    "objectID": "tarea-01.html#objetivos",
    "href": "tarea-01.html#objetivos",
    "title": "Tarea 1",
    "section": "Objetivos",
    "text": "Objetivos\nCada estudiante debe mostrar que es capaz de:\n\nEscribir documentos en el lenguaje de marcado Markdown.\nManejar repositorios en GitHub.\nPublicar repositorios en GitHub como sitios web en GitHub Pages."
  },
  {
    "objectID": "tarea-01.html#entregables",
    "href": "tarea-01.html#entregables",
    "title": "Tarea 1",
    "section": "Entregables",
    "text": "Entregables\n\nDirección de un repositorio en GitHub (ej. https://github.com/mfvargas/tarea-01) que contenga un documento escrito en Markdown llamado README.md, con el contenido especificado en la sección Desarrollo.\nDirección de un sitio web publicado en GitHub Pages generado a partir del repositorio especificado en el punto anterior (ej. https://mfvargas.github.io/tarea-01/). Se recomienda usar un nombre más significativo que tarea-01 para el repositorio, acorde con su contenido.\n\nLa entrega debe realizarse a través de la plataforma Mediación Virtual."
  },
  {
    "objectID": "tarea-01.html#consideraciones-adicionales",
    "href": "tarea-01.html#consideraciones-adicionales",
    "title": "Tarea 1",
    "section": "Consideraciones adicionales",
    "text": "Consideraciones adicionales\nEsta tarea es estrictamente individual."
  },
  {
    "objectID": "tarea-01.html#desarrollo",
    "href": "tarea-01.html#desarrollo",
    "title": "Tarea 1",
    "section": "Desarrollo",
    "text": "Desarrollo\nDebe desarrollar con Markdown un sitio web sobre un tema de su elección (un adelanto del trabajo final de graduación, alguna temática tratada en otro curso, un proyecto personal, etc.). El sitio debe contener, como mínimo, los siguientes elementos:\n\nEncabezados: por lo menos de niveles uno y dos.\nTexto: por lo menos 500 palabras.\nNegritas: por lo menos dos palabras.\nItálicas: por lo menos dos palabras.\nListas: al menos una, ya sea numerada o no numerada.\nImágenes: al menos dos, una local (en el repositorio GitHub de la tarea) y otra remota (de un sitio web externo).\nHipervínculos: al menos dos.\n\nPuede utilizar imágenes de fuentes externas, pero debe dar los créditos apropiados y proporcionar, al menos, un enlace al origen. En el texto, puede apoyarse en fuentes externas, pero debe incluir las citas bibliográficas. No debe “copiar y pegar” texto u otros contenidos.\nEl contenido del sitio debe ser coherente y estar bien presentado."
  },
  {
    "objectID": "tarea-01.html#calificación",
    "href": "tarea-01.html#calificación",
    "title": "Tarea 1",
    "section": "Calificación",
    "text": "Calificación\nDirecciones entregadas:\n- Dirección del repositorio en GitHub: 10%\n- Dirección del sitio web publicado en GitHub Pages: 10%\nComponentes del documento escrito en Markdown:\n- Encabezados: 5%\n- Texto: 15%\n- Negritas: 5%\n- Itálicas: 5%\n- Listas: 10%\n- Imágenes: 20%\n- Hipervínculos: 10%\nCoherencia y presentación general del sitio web: 10%"
  },
  {
    "objectID": "examen_corto-02.html",
    "href": "examen_corto-02.html",
    "title": "Examen corto 2",
    "section": "",
    "text": "Grupo 001: martes 9 de mayo de 2023\nGrupo 002: jueves 11 de mayo de 2023"
  },
  {
    "objectID": "examen_corto-02.html#temas-a-evaluar",
    "href": "examen_corto-02.html#temas-a-evaluar",
    "title": "Examen corto 2",
    "section": "Temas a evaluar",
    "text": "Temas a evaluar\n7 R - lenguaje de programación para análisis estadístico (se excluye la sección 7.11 Ciclos)\n8 Quarto - sistema de publicación técnica y científica\n9 Tidyverse - colección de paquetes para ciencia de datos"
  },
  {
    "objectID": "examen_corto-03.html",
    "href": "examen_corto-03.html",
    "title": "Examen corto 3",
    "section": "",
    "text": "Grupo 001: martes 23 de mayo de 2023\nGrupo 002: jueves 25 de mayo de 2023"
  },
  {
    "objectID": "examen_corto-03.html#temas-a-evaluar",
    "href": "examen_corto-03.html#temas-a-evaluar",
    "title": "Examen corto 3",
    "section": "Temas a evaluar",
    "text": "Temas a evaluar\n10 dplyr - gramática para manipulación de datos\n11 ggplot2 y plotly - creación declarativa de gráficos interactivos"
  },
  {
    "objectID": "tarea-02.html",
    "href": "tarea-02.html",
    "title": "Tarea 2",
    "section": "",
    "text": "Martes 30 de mayo de 2023, 07:59 a.m.\n\n\n\nJueves 1 de junio de 2023, 10:59 a.m."
  },
  {
    "objectID": "tarea-02.html#descripción-general",
    "href": "tarea-02.html#descripción-general",
    "title": "Tarea 2",
    "section": "Descripción general",
    "text": "Descripción general\nEsta tarea consiste en desarrollar un documento Quarto con bloques de código en R que generen tablas y gráficos estadísticos de datos sobre calidad de café. El documento debe publicarse como una página web en GitHub Pages.\nCada estudiante debe mostrar que es capaz de:\n\nEscribir código fuente en el lenguaje de programación R y utilizar funciones contenidas en paquetes como readr, dplyr, ggplot2, plotly y DT, entre otros, para leer datos, procesarlos y generar visualizaciones como tablas y gráficos estadísticos.\nEscribir documentos en el sistema de publicación científica y técnica Quarto que combinen narrativa en Markdown con bloques de código en R.\nPublicar documentos Quarto como páginas web en GitHub Pages.\nAnalizar y corregir errores de programación.\n\nEsta tarea es ESTRICTAMENTE INDIVIDUAL."
  },
  {
    "objectID": "tarea-02.html#datos",
    "href": "tarea-02.html#datos",
    "title": "Tarea 2",
    "section": "Datos",
    "text": "Datos\nLos datos provienen del Coffee Quality Institute (CQI) y fueron extraídos de su página web por Fatih Boyar. Corresponden a muestras de café de diferentes partes del mundo, para las que se registraron propiedades como país de origen, altitud, variedad, color y método de procesamiento y se evaluaron características como aroma, sabor, acidez y puntaje total, entre otras.\nPara esta tarea, debe utilizar un archivo de datos de 206 muestras de café disponible en https://github.com/gf0604-procesamientodatosgeograficos/2023-i/blob/main/datos/cqi/coffee-quality.csv. Este archivo está basado en el trabajo de Fatih Boyar, con algunos ajustes realizados por el profesor del curso. Debe descargarlo, utilizarlo en el código R de su documento Quarto, e incluirlo en el mismo repositorio de su código fuente."
  },
  {
    "objectID": "tarea-02.html#entregables",
    "href": "tarea-02.html#entregables",
    "title": "Tarea 2",
    "section": "Entregables",
    "text": "Entregables\nDebe entregar dos direcciones web:\n\nDirección de un repositorio en GitHub (ej. https://github.com/mfvargas/coffee-quality) con el código fuente y los datos. Específicamente, el repositorio debe contener:\n\nUn documento Quarto llamado index.qmd con el código en R y la sintaxis Markdown necesarios para generar las salidas especificadas en la sección Desarrollo.\nUn documento llamado index.html generado a partir de index.qmd.\nEl archivo de datos coffee-quality.csv.\nOtros archivos necesarios (ej. el directorio index_files).\n\nDirección de un sitio web en GitHub Pages publicado a partir del repositorio GitHub del punto 1 (ej. https://mfvargas.github.io/coffee-quality/).\n\nLa entrega debe realizarse a través de la plataforma Mediación Virtual."
  },
  {
    "objectID": "tarea-02.html#desarrollo",
    "href": "tarea-02.html#desarrollo",
    "title": "Tarea 2",
    "section": "Desarrollo",
    "text": "Desarrollo\nEl documento Quarto debe cumplir con las siguientes características generales:\n\nEn general, debe estar ordenado y bien presentado (incluyendo la redacción y la ortografía).\nDebe tener una tabla de contenidos.\nDebe utilizar un estilo (theme) de Quarto para HTML.\n\nEl documento debe contener las siguientes secciones:\n\n1 - Introducción\nBreve explicación del contenido del documento (uno o dos párrafos) y mención de la fuente de los datos originales: el repositorio en GitHub de Fatih Boyar en https://github.com/fatih-boyar/coffee-quality-data-CQI.\n\n\n2 - Carga de datos y paquetes\nBloques de código en R para cargar los paquetes y los datos necesarios.\n\n\n3 - Tabla de datos\nTabla interactiva generada con el paquete DT que presente las siguientes columnas:\n\nCountry_of_Origin\nVariety\nColor\nAltitude\nTotal_Cup_Points\n\n\n\n4 - Gráficos estadísticos\nLos gráficos deben programarse con ggplot2 y convertirse a plotly con la función ggplotly(), para que sean interactivos. Todos deben tener:\n\nTítulo.\nEtiquetas en los ejes x e y.\nUn mismo estilo (theme) para todos, ya sea uno de los estilos incluídos en ggplot2, en ggthemes o en hrbrthemes.\n\nLos siguientes son los gráficos que deben elaborarse:\n\n4.1 - Histograma que muestre la distribución de la variable Total_Cup_Points (puntaje total)\n\nElija con cuidado la cantidad de barras del histograma.\nAl colocar el ratón sobre una barra, la ventana emergente debe mostrar la frecuencia correspondiente a la barra.\nAgregue una curva de estimación de densidad del kernel (Kernel Density Estimation o KDE).\n\n\n\n4.2 - Gráfico de dispersión de Altitude (altitud, en el eje x) vs Total_Cup_Points (puntaje total, en el eje y)\n\nAl colocar el ratón sobre un punto del gráfico, la ventana emergente debe mostrar los valores de Altitude y de Total_Cup_Points para ese punto.\nAgregue una línea de tendencia correspondiente a un modelo lineal.\n\n\n\n4.3 - Gráfico de caja que muestre las estadísticas (cuartiles, mínimos, máximos y valores atípicos) de la variable Total_Cup_Points (puntaje total) para cada valor de la variable Color (color).\n\nProcure que todos los componentes del gráficos sean legibles. Considere rotar los ejes, si es necesario."
  },
  {
    "objectID": "tarea-02.html#calificación",
    "href": "tarea-02.html#calificación",
    "title": "Tarea 2",
    "section": "Calificación",
    "text": "Calificación\n\nPresentación general del repositorio GitHub y de la página en GitHub Pages (tabla de contenidos, uso de estilos, código fuente, datos): 20%\nIntroducción: 5%\nTabla: 15%\nHistograma: 20%\nGráfico de dispersión: 20%\nGráfico de caja: 20%"
  },
  {
    "objectID": "examen_corto-04.html",
    "href": "examen_corto-04.html",
    "title": "Examen corto 4",
    "section": "",
    "text": "Grupo 001: lunes 19 de junio de 2023\nGrupo 002: miércoles 21 de junio de 2023"
  },
  {
    "objectID": "examen_corto-04.html#temas-a-evaluar",
    "href": "examen_corto-04.html#temas-a-evaluar",
    "title": "Examen corto 4",
    "section": "Temas a evaluar",
    "text": "Temas a evaluar\n12 Introducción al manejo de datos geoespaciales con R\n13 Operaciones con datos de atributos\n14 Operaciones con datos espaciales"
  },
  {
    "objectID": "tarea-03-grupo-001.html",
    "href": "tarea-03-grupo-001.html",
    "title": "Tarea 3 - Grupo 001",
    "section": "",
    "text": "Lunes 26 de junio de 2023, 10:59 a.m."
  },
  {
    "objectID": "tarea-03-grupo-001.html#descripción-general",
    "href": "tarea-03-grupo-001.html#descripción-general",
    "title": "Tarea 3 - Grupo 001",
    "section": "Descripción general",
    "text": "Descripción general\nEsta tarea consiste en desarrollar un documento Quarto con bloques de código en R que generen tablas, gráficos estadísticos y mapas sobre riqueza de especies (i.e. cantidad de especies) de orquídeas (familia Orchidaceae) en las áreas de conservación de Costa Rica. El documento debe publicarse como una página web en GitHub Pages.\nCada estudiante debe mostrar que es capaz de:\n\nEscribir código fuente en el lenguaje de programación R y utilizar funciones contenidas en paquetes como readr, dplyr, ggplot2, plotly, DT, sf y leaflet, entre otros, para leer datos, procesarlos y generar visualizaciones como tablas, gráficos estadísticos y mapas.\nManejar datos geoespaciales con R.\nEscribir documentos en el sistema de publicación científica y técnica Quarto que combinen narrativa en Markdown con bloques de código en R.\nPublicar documentos Quarto como páginas web en GitHub Pages.\nAnalizar y corregir errores de programación.\n\nEsta tarea puede realizarse individualmente o en parejas. En este último caso, solo un estudiante debe entregar la tarea en Mediación Virtual e indicar ahí el nombre de su compañero."
  },
  {
    "objectID": "tarea-03-grupo-001.html#datos",
    "href": "tarea-03-grupo-001.html#datos",
    "title": "Tarea 3 - Grupo 001",
    "section": "Datos",
    "text": "Datos\nPara realizar esta tarea, se requieren dos conjuntos de datos:\n\nÁreas de conservación de Costa Rica. Este archivo GeoJSON proviene de un geoservicio de tipo Web Feature Service (WFS) publicado por el Sistema Nacional de Áreas de Conservación (Sinac). Las geometrías se simplificaron para reducir el tamaño del archivo, el cual está disponible en el siguiente enlace:\n\nArchivo GeoJSON de áreas de conservación de Costa Rica\n\nRegistros de presencia de orquídeas en Costa Rica. Este archivo CSV proviene de una consulta al portal de datos de la Infraestructura Mundial de Información en Biodiversidad (GBIF). Para reducir el tamaño del archivo, se suprimieron algunas columnas no indispensables y también las filas con identificaciones en niveles superiores a especie. El archivo está disponible en el siguiente enlace:\n\nArchivo CSV de registros de presencia de orquídeas de Costa Rica"
  },
  {
    "objectID": "tarea-03-grupo-001.html#entregables",
    "href": "tarea-03-grupo-001.html#entregables",
    "title": "Tarea 3 - Grupo 001",
    "section": "Entregables",
    "text": "Entregables\nDebe entregar dos direcciones web:\n\nDirección de un repositorio en GitHub con el código fuente y los datos. Específicamente, el repositorio debe contener:\n\nUn documento Quarto llamado index.qmd con el código en R y la sintaxis Markdown necesarios para generar las salidas especificadas en la sección Desarrollo.\nUn documento llamado index.html generado a partir de index.qmd.\nLos dos archivos de datos.\nOtros archivos necesarios (ej. el directorio index_files).\n\nDirección de un sitio web en GitHub Pages publicado a partir del repositorio GitHub del punto 1.\n\nLa entrega debe realizarse a través de la plataforma Mediación Virtual."
  },
  {
    "objectID": "tarea-03-grupo-001.html#desarrollo",
    "href": "tarea-03-grupo-001.html#desarrollo",
    "title": "Tarea 3 - Grupo 001",
    "section": "Desarrollo",
    "text": "Desarrollo\nEl documento Quarto debe cumplir con las siguientes características generales:\n\nEn general, debe estar ordenado y bien presentado (incluyendo la redacción y la ortografía).\nEl código fuente debe ser legible y ordenado. Considere usar las opciones code-fold y code-summary de Quarto.\nDebe tener una tabla de contenidos.\nDebe estar completamente en español (incluyendo los controles de las tablas y los gráficos).\nDebe utilizar un estilo (theme) de Quarto para HTML.\n\nEl documento debe incluir las siguientes secciones y contenidos:\n\n1 - Introducción\nBreve explicación del contenido del documento (uno o dos párrafos) y mención y enlaces a las fuentes de datos:\n\nÁreas de conservación de Costa Rica en Web Feature Service (WFS) publicado por el Sistema Nacional de Áreas de Conservación (Sinac)\nRegistros de presencia de orquídeas de Costa Rica obtenidos a través de una consulta al portal de datos de GBIF\n\n\n\n2 - Carga de datos y paquetes\nBloques de código en R para cargar los paquetes y los datos necesarios. Recuerde que debe cargarlos una sola vez.\n\n\n3 - Mapa de riqueza de especies de orquídeas en áreas de conservación\nMapa leaflet interactivo con las siguientes capas y controles:\n\nDos capas base de tipo tiles (teselas) (ej. OSM, Stamen, ESRI).\nUna capa de áreas de conservación (polígonos) coloreada de acuerdo con la riqueza de especies de orquídeas en cada área (i.e. un mapa de coropletas). Al hacer clic sobre un polígono, la ventana emergente debe mostrar el nombre del área y su riqueza de especies de orquídeas.\nUna leyenda que muestre el significado de los colores usados en la capa de áreas de conservación.\nUna capa de registros de presencia de orquídeas (puntos). Al hacer clic sobre un punto, la ventana debe mostrar el nombre de la especie. No es necesario crear una leyenda para esta capa, ya que es difícil de leer debido que contiene muchas especies.\nUn control de capas.\n\n\n\n4 - Tabla de riqueza de especies de orquídeas en áreas de conservación\nTabla interactiva generada con el paquete DT que muestre la riqueza (i.e. cantidad) de especies de orquídeas en cada área de conservación. Debe tener una fila por cada área de conservación y dos columnas:\n\nNombre del área de conservación\nRiqueza de especies de orquídeas\n\nLos encabezados de la tabla deben estar en español y ser significativos. Sugerencia: use el argumento colnames de la función datatable() para especificar los encabezados de las columnas.\n\n\n5 - Gráficos estadísticos\nLos gráficos deben programarse con ggplot2 y convertirse a plotly con la función ggplotly(), para que sean interactivos. Todos deben tener:\n\nTítulo.\nEtiquetas en los ejes x e y.\nUn mismo estilo (theme) para todos, ya sea uno de los estilos incluídos en ggplot2, en ggthemes o en hrbrthemes.\n\nProcure que todos los componentes de los gráficos sean legibles. Considere rotar los ejes o inclinar las etiquetas, si es necesario.\nLos siguientes son los gráficos que deben elaborarse:\n\n5.1 - Gráfico de barras de riqueza de especies de orquídeas en áreas de conservación\nEste gráfico muestra los mismos datos que la tabla del punto 4. Debe contener una barra por cada área de conservación y su longitud debe mostrar su riqueza de especies de orquídeas.\n\nLas barras deben estar ordenadas por longitud (de mayor a menor o de menor a mayor).\nAl colocar el ratón sobre una barra, la ventana emergente debe mostrar el área de conservación y su riqueza de especies de orquídeas.\n\n\n\n5.2 - Gráfico de barras de cantidad de registros de presencia por especie, para las 10 especies de orquídeas con más registros\nEste gráfico debe contener una barra por cada una de 10 especies de orquídeas con mayor cantidad de registros de presencia y su longitud debe reflejar esa cantidad.\n\nLas barras deben estar ordenadas por longitud (de mayor a menor o de menor a mayor).\nAl colocar el ratón sobre una barra, la ventana emergente debe mostrar el nombre de la especie y la cantidad de registros de presencia.\n\nSugerencia: use la función top_n() para obtener las especies con mayor cantidad de registros de presencia."
  },
  {
    "objectID": "tarea-03-grupo-001.html#calificación",
    "href": "tarea-03-grupo-001.html#calificación",
    "title": "Tarea 3 - Grupo 001",
    "section": "Calificación",
    "text": "Calificación\n\nPresentación general del repositorio GitHub y de la página en GitHub Pages (tabla de contenidos, uso de estilos, código fuente, datos): 20%\nIntroducción: 5%\nMapa: 25%\nTabla: 10%\nGráfico de riqueza de especies: 20%\nGráfico de cantidad de registros de presencia por especie: 20%"
  },
  {
    "objectID": "parte-vii-varios.html",
    "href": "parte-vii-varios.html",
    "title": "Varios",
    "section": "",
    "text": "Error al ejecutar Render en documentos Quarto"
  },
  {
    "objectID": "error-render-datatable.html",
    "href": "error-render-datatable.html",
    "title": "Error al ejecutar Render en documentos Quarto",
    "section": "",
    "text": "Se describe un error que se produce al ejecutar la operación Render en documentos Quarto y su solución."
  },
  {
    "objectID": "error-render-datatable.html#descripción",
    "href": "error-render-datatable.html#descripción",
    "title": "Error al ejecutar Render en documentos Quarto",
    "section": "Descripción",
    "text": "Descripción\nAl ejecutar Render en un documento Quarto, se genera un mensaje de error similar al siguiente:\nQuitting from lines 201-207 [unnamed-chunk-5] (article_4.qmd)\nError in `add_html_caption()`:\n! unused argument (xfun::grep_sub(\"^[^<]*<[^>]+aria-labelledby[ ]*=[ ]*\\\"([^\\\"]+)\\\".*$\", \"\\\\1\", x))\nBacktrace:\n  1. global .main()\n  2. execute(...)\n  3. rmarkdown::render(...)\n  4. knitr::knit(knit_input, knit_output, envir = envir, quiet = quiet)\n  5. knitr:::process_file(text, output)\n     ...\n 14. sew(res, options)\n 15. knitr:::sew.list(x, options, ...)\n 16. base::lapply(x, sew, options, ...)\n 17. FUN(X[[i]], ...)\n 18. knitr:::sew.knit_asis(x, options, ...)\nExecution halted\nEl error está documentado en Quarto fails to render htmlwidgets when running {knitr} 1.43 with Error in add_html_caption(): #5702. Se debe a que la versión 1.43 del paquete knitr (encargado de combinar el código en R con Markdown) tiene un problema que se manifiesta al ejecutar la operación Render en documentos Quarto con bloques de código que contienen algunos componentes HTML (widgets), como tablas DT."
  },
  {
    "objectID": "error-render-datatable.html#solución",
    "href": "error-render-datatable.html#solución",
    "title": "Error al ejecutar Render en documentos Quarto",
    "section": "Solución",
    "text": "Solución\nComo se explica en la misma página en la que se describe el problema, este puede solucionarse al reinstalar knitr con la versión 1.42.\nSe sugiere seguir los siguientes pasos:\n\nVerifique la versión de knitr.\n\n\npackageVersion('knitr')\n\n\nSi la versión de knitr es 1.43, reinstale el paquete con la versión 1.42. Esto puede hacerse con la función install_version() del paquete devtools, el cual debe instalarse previamente.\n\n\n# Instalación del paquete devtools\ninstall.packages(\"devtools\")\n\n# Carga del paquete devtools\nlibrary(devtools)\n\n# Reinstalación de knitr, con la versión 1.42\ninstall_version(\"knitr\", version = \"1.42\")"
  }
]