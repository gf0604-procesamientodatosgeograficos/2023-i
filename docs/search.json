[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GF0604 Procesamiento de datos geográficos 2023-I",
    "section": "",
    "text": "Programa del curso\nLos siguientes documentos contienen el programa del curso, para los grupos 01 y 02, según el formato definido por la Escuela de Geografía de la Universidad de Costa Rica.\n\nGrupo 01\nGrupo 02\n\n\n\nVersiones anteriores del curso\nEste sitio web corresponde al curso impartido durante el primer lectivo de 2023. Para consultar las versiones de otros años y ciclos lectivos, puede visitar:\n\n2022-I\n2021-I\n2020-I\n\n\n\nInformación de contacto\nSi tiene alguna pregunta o comentario sobre este curso, por favor contacte a:\n\nManuel Vargas - manuel.vargas_d@ucr.ac.cr\nProfesor\nUniversidad de Costa Rica,\nCiudad Universitaria Rodrigo Facio,\nSan Pedro de Montes de Oca,\nCosta Rica.\n\nLos contenidos de este curso, a menos que se especifique de otra forma, se comparten mediante una licencia de Creative Commons Reconocimiento-CompartirIgual 4.0 Internacional."
  },
  {
    "objectID": "parte-i-introduccion-programacion_computadoras.html",
    "href": "parte-i-introduccion-programacion_computadoras.html",
    "title": "I - Introducción a la programación de computadoras",
    "section": "",
    "text": "2 Interacción humano-computadora\n3 GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos\n4 Reproducibilidad\n5 Markdown - lenguaje de marcado\n6 Git - sistema de control de versiones"
  },
  {
    "objectID": "01-pensamiento_computacional-arquitectura_computadoras-lenguajes_programacion.html",
    "href": "01-pensamiento_computacional-arquitectura_computadoras-lenguajes_programacion.html",
    "title": "1  Pensamiento computacional, arquitectura de computadoras y lenguajes de programación",
    "section": "",
    "text": "Una computadora es una máquina que ejecuta secuencias de instrucciones, llamadas programas. Los programas reciben datos de entrada, los procesan y generan salidas. Pueden modificarse sin necesidad de alterar los componentes físicos de la computadora.\nLas computadoras ayudan a resolver problemas de muy diversos tipos. El pensamiento computacional es un enfoque para la resolución de problemas basado en conceptos y métodos de las ciencias de la computación. Sus principios fundamentales son:\n\nDescomposición: división de un problema en subproblemas más pequeños.\nReconocimiento de patrones: búsqueda de similitudes en los problemas.\nAbstracción: identificación de la información que se necesita y filtrado de la que no se necesita para resolver un problema.\nAlgoritmos: descripción, paso por paso, de la solución a un problema.\n\nLas computadoras modernas están construídas con base en circuitos integrados (CI), también llamados chips o microchips. Los CI procesan información digital (que usa valores discretos), la cual generalmente es binaria (i.e. de dos valores). Los CI de una computadora procesan dos estados correspondientes a dos niveles de tensión eléctrica: alto y bajo. Estos estados se representan con 0 y 1. Esto facilita la aplicación de la lógica binaria y de la aritmética binaria.\nDurante el período entre las guerras mundiales, Allan Turing desarrolló la máquina de Turing, un dispositivo teórico que manipula símbolos de una cinta de acuerdo con una tabla de reglas. La máquina de Turing simula el funcionamiento de un algoritmo y los conceptos de entrada, procesamiento y salida. En 1945, John von Neumann propuso un concepto conocido como programa almacenado, en el cual los datos y los programas se almacenan en una estructura llamada memoria, separada del hardware que ejecuta las instrucciones. Este esquema permite que las computadoras sean más fáciles de reprogramar y es conocido actualmente como arquitectura de von Neumann.\nEl lenguaje máquina es un conjunto de instrucciones binarias interpretables por la unidad central de procesamiento (CPU) de una computadora. Cada CPU tiene su propio lenguaje máquina. Un programa consiste de una secuencia de instrucciones en lenguaje máquina.\nDebido a que programar una computadora en lenguaje máquina es excesivamente lento y complicado, en la década de 1950 comenzaron a crearse lenguajes de programación que, en lugar de unos y ceros, consisten de instrucciones formadas por palabras, usualmente en idioma inglés. Existe una gran variedad de lenguajes de programación que han sido creados con diversos fines: científicos, comerciales, educacionales y otros.\nScratch es un lenguaje de programación orientado a educación. Fue desarrollado en 2003 por el MIT Media Lab y es administrado por la Fundación Scratch, una organización sin fines de lucro que lo facilita de manera gratuita."
  },
  {
    "objectID": "01-pensamiento_computacional-arquitectura_computadoras-lenguajes_programacion.html#trabajo-previo",
    "href": "01-pensamiento_computacional-arquitectura_computadoras-lenguajes_programacion.html#trabajo-previo",
    "title": "1  Pensamiento computacional, arquitectura de computadoras y lenguajes de programación",
    "section": "1.2 Trabajo previo",
    "text": "1.2 Trabajo previo\n\n1.2.1 Lecturas\nWing, J. M. (2006). Computational thinking. Communications of the ACM, 49(3), 33-35. https://doi.org/10.1145/1118178.1118215"
  },
  {
    "objectID": "01-pensamiento_computacional-arquitectura_computadoras-lenguajes_programacion.html#diapositivas",
    "href": "01-pensamiento_computacional-arquitectura_computadoras-lenguajes_programacion.html#diapositivas",
    "title": "1  Pensamiento computacional, arquitectura de computadoras y lenguajes de programación",
    "section": "1.3 Diapositivas",
    "text": "1.3 Diapositivas\nPensamiento computacional, arquitectura de computadoras y lenguajes de programación"
  },
  {
    "objectID": "02-interaccion_humano_computadora.html",
    "href": "02-interaccion_humano_computadora.html",
    "title": "2  Interacción humano-computadora",
    "section": "",
    "text": "Los humanos interactúan con las computadoras a través de interfaces de tres tipos:\n\nInterfaces de línea de comandos: aceptan líneas de texto correspondientes a comandos o instrucciones.\nInterfaces gráficas de usuario: utilizan objetos gráficos para representar las acciones y la información disponibles en la interfaz.\nInterfaces naturales de usuario: la interacción se realiza a través de movimientos, gestos o voz.\n\nLas interfaces gráficas de usuario y las interfaces naturales de usuario son más intuitivas para los usuarios finales. Sin embargo, las interfaces de línea de comandos son más versátiles y facilitan el desarrollo de soluciones más reproducibles."
  },
  {
    "objectID": "02-interaccion_humano_computadora.html#introducción",
    "href": "02-interaccion_humano_computadora.html#introducción",
    "title": "2  Interacción humano-computadora",
    "section": "2.2 Introducción",
    "text": "2.2 Introducción\nLa interacción humano-computadora (IHC) es un área de investigación dedicada al diseño y uso de la tecnología computacional. Esta interacción se realiza a través de interfaces. La IHC se sitúa en la intersección de varias disciplinas que incluyen ciencias de la computación, ciencias de la conducta, diseño y estudios de medios, entre otras. Los investigadores de IHC estudian la manera en la que los humanos interactúan con las computadoras y diseñan tecnologías para mejorar esa interacción.\nLa IHC enfatiza que, a diferencia de otras máquinas y herramientas con usos más limitados, las computadoras tienen aplicaciones muy diversas que implican un “diálogo” más complejo con los usuarios."
  },
  {
    "objectID": "02-interaccion_humano_computadora.html#interfaces-de-usuario",
    "href": "02-interaccion_humano_computadora.html#interfaces-de-usuario",
    "title": "2  Interacción humano-computadora",
    "section": "2.3 Interfaces de usuario",
    "text": "2.3 Interfaces de usuario\nLa interfaz de usuario es el medio con el que el usuario puede comunicarse con una computadora (o, en general, con cualquier máquina o dispositivo). Las interfaces de usuario se diseñan para que sean fáciles de entender y de utilizar.\nLas interfaces de usuario pueden clasificarse en tres tipos:\n\nInterfaces de línea de comandos (CLI, del inglés, command-line interface).\nInterfaces gráficas de usuario (GUI, del inglés, graphical user interface).\nInterfaces naturales de usuario (NUI, del inglés, natural user interface).\n\nLa evolución de estos tipos de interfaces se ilustra en la Figura 2.1.\n\n\n\n\n\nFigura 2.1: Evolución de las interaces de usuario. Imagen de Marcecoro compartida a través de Wikimedia Commons.\n\n\n\n\n\n2.3.1 Interfaces de línea de comandos\nLas interfaces de línea de comandos (CLI) permiten a los usuarios dar indicaciones a la computadora por medio de líneas de texto correspondientes a comandos o instrucciones. Los comandos pueden introducirse interactivamente en algún tipo de entrada de texto (ej. el prompt de un sistema operativo) o, de manera más automatizada, a través de un archivo (ej. un script). La Figura 2.2 muestra la terminal del sistema operativo Ubuntu, como un ejemplo de CLI.\n\n\n\n\n\nFigura 2.2: Terminal del sistema operativo Ubuntu (Linux).\n\n\n\n\nEste tipo de interfaz existe casi desde los inicios de la computación y es superada en antigüedad solo por las tarjetas perforadas y otros mecanismos similares.\nLas CLI tienen la ventaja de que facilitan el desarrollo de procedimientos reproducibles y repetibles. Por otro lado, puede ser más complejas, especialmente para usuarios no experimentados.\n\n\n2.3.2 Interfaces gráficas de usuario\nLas interfaces gráficas de usuario (GUI) utilizan imágenes y otros objetos gráficos (ej. iconos) para representar la información y las acciones disponibles en la interfaz. Surgieron como una evolución de las CLI. Por ejemplo, muchos sistemas operativos desarrollaron primero sus CLI y luego GUI que permiten realizar acciones equivalentes a los comandos de las CLI. La Figura 2.3 muestra la interfaz gráfica del sistema operativo Ubuntu (Linux).\n\n\n\n\n\nFigura 2.3: Interfaz gráfica GNOME del sistema operativo Ubuntu (Linux).\n\n\n\n\nComo un precursor de las actuales GUI, suele mencionarse una interfaz de hipervículos desarrollada en el Stanford Research Institute, en la década de 1960 (se recomienda ver The Mother of All Demos, presented by Douglas Engelbart (1968)). Este concepto fue ampliado y trasladado a un entorno gráfico por los investigadores del Xerox PARC, en Palo Alto. Ahí se introdujeron conceptos como ventanas, casillas de verificación (checkboxes), botones de radio, menús y puntero del ratón. La interfaz fue implementada comercialmente en el computador Xerox Star 8010, en 1981.\nLas GUI son más amigables e intuitivas que las CLI, pero también pueden ser menos versátiles y menos aptas para reproducir procedimientos.\n\n\n2.3.3 Interfaces naturales de usuario\nEn las interfaces naturales de usuario (NUI), este interactúa con la computadora sin utilizar dispositivos como el ratón o el teclado, sino a través de movimientos, gestos o la voz, como en el caso de las pantallas multitáctiles o del control por reconocimiento del habla. Las NUI no requieren que el usuario aprenda el uso de nuevas tecnologías, ya que puede emplear habilidades ya conocidas. La Figura 2.4 muestra la consola de videojuegos Xbox 360 S, como un ejemplo de dispositivo con NUI.\n\n\n\n\n\nFigura 2.4: Consola Xbox 360 S. Imagen de James Pfaff (litheon) compartida a través de Wikimedia Commons."
  },
  {
    "objectID": "02-interaccion_humano_computadora.html#recursos-de-interés",
    "href": "02-interaccion_humano_computadora.html#recursos-de-interés",
    "title": "2  Interacción humano-computadora",
    "section": "2.4 Recursos de interés",
    "text": "2.4 Recursos de interés\nMarcel. (2012). The Mother of All Demos, presented by Douglas Engelbart (1968). https://www.youtube.com/watch?v=yJDv-zdhzMY"
  },
  {
    "objectID": "03-gdal.html",
    "href": "03-gdal.html",
    "title": "3  GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos",
    "section": "",
    "text": "Geospatial Data Abstraction Library (GDAL) es una biblioteca, desarrollada en C/C++, para la escritura y lectura de datos geoespaciales, tanto raster como vectoriales. Ha sido traducida a otros lenguajes de programación como Java, Python y R. Es utilizada en una gran cantidad de aplicaciones de escritorio, aplicaciones web y bibliotecas para programación. Además, incluye un conjunto de programas que pueden ejecutarse desde la línea de comandos de varios sistemas operativos.\nGDAL implementa un único modelo abstracto de datos raster y un único modelo abstracto de datos vectoriales, lo que permite programar aplicaciones geoespaciales sin tener que ocuparse de las particularidades de cada formato (GeoTIFF, NetCDF, ESRI Shapefile, GeoPackage, GeoJSON, GeoParquet, WMS, WFS, etc.)."
  },
  {
    "objectID": "03-gdal.html#trabajo-previo",
    "href": "03-gdal.html#trabajo-previo",
    "title": "3  GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos",
    "section": "3.2 Trabajo previo",
    "text": "3.2 Trabajo previo\n\n3.2.1 Lecturas\nPebesma, E., Wagner, W., Verbesselt, J., Goor, E., Briese, C., & Neteler, M. (2016). OpenEO: a GDAL for Earth Observation Analytics. https://r-spatial.org/2016/11/29/openeo.html\n\n\n3.2.2 Tutoriales\nGandhi, U. (2020). Mastering GDAL Tools. Spatial Thoughts. https://spatialthoughts.com/courses/mastering-gdal-tools/"
  },
  {
    "objectID": "03-gdal.html#introducción",
    "href": "03-gdal.html#introducción",
    "title": "3  GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos",
    "section": "3.3 Introducción",
    "text": "3.3 Introducción\nGeospatial Data Abstraction Library (GDAL) es una biblioteca para leer y escribir datos geoespaciales en formatos raster y vectoriales. GDAL implementa, entre otras capacidades:\n\nConversiones entre formatos.\nReproyecciones entre sistemas de coordenadas.\nConsultas no espaciales (i.e. en atributos numéricos y textuales).\nConsultas espaciales (cercanía, adyacencia, contención, intersección, etc.).\nFiltrado y agrupación de datos.\nVerificación y corrección de geometrías.\n\nEl manejo de datos vectoriales se implementa en la biblioteca asociada OGR (sigla antes usada para OpenGIS Simple Features Reference Implementation), cuyo código fuente se distribuye conjuntamente con el de GDAL. Por este motivo, a GDAL también se le conoce como GDAL/OGR, en donde GDAL se refiere a la funcionalidad para datos raster y OGR a la funcionalidad para datos vectoriales. En este documento, se utiliza la sigla GDAL para referirse a ambas bibliotecas.\nGDAL utiliza un único modelo abstracto de datos raster y un único modelo abstracto de datos vectoriales, lo que permite programar aplicaciones geoespaciales sin tener que ocuparse de las particularidades de cada formato (GeoTIFF, NetCDF, ESRI Shapefile, GeoPackage, GeoJSON, GeoParquet, WMS, WFS, etc.).\nA pesar de que GDAL está programada en los lenguajes C y C++, cuenta con una interfaz de programación de aplicaciones (API, en inglés, Application Programming Interface) para varios lenguajes de programación incluyendo, además de C y C++, Python, Java y otros. En R, paquetes como sf y terra utilizan el código fuente que comparte GDAL. En esta lista de sofware puede apreciarse la gran cantidad de aplicaciones de escritorio, aplicaciones web y bibliotecas para programación que aprovechan la funcionalidad de GDAL.\nAdemás, GDAL incluye un conjunto de programas para la línea de comandos del sistema operativo cuyas distribuciones binarias están disponibles para varios sistemas operativos, incluyendo Windows, macOS y Linux. Estas API y los programas también están incluídos en la plataforma de ciencia de datos Anaconda, la cual puede instalarse en todos los sistemas operativos mencionados.\nGDAL es distribuida por la Open Source Geospatial Foundation (OSGeo) con una licencia X/MIT."
  },
  {
    "objectID": "03-gdal.html#programas-para-la-línea-de-comandos-del-sistema-operativo",
    "href": "03-gdal.html#programas-para-la-línea-de-comandos-del-sistema-operativo",
    "title": "3  GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos",
    "section": "3.4 Programas para la línea de comandos del sistema operativo",
    "text": "3.4 Programas para la línea de comandos del sistema operativo\nLos programas de GDAL para la línea de comandos del sistema operativo permiten ejecutar tareas de geoprocesamiento y de conversión entre formatos geoespaciales sin utilizar una interfaz gráfica o un lenguaje de programación. Seguidamente, se listan algunos de estos programas.\nProgramas para datos raster\n\ngdalinfo: despliega información sobre un conjunto de datos raster.\ngdaldem: herramientas para visualizar y analizar modelos digitales de elevación.\ngdal_translate: realiza conversiones entre formatos raster.\ngdalwarp: reproyecta datos raster y realiza otras conversiones.\ngdal_calc.py: calculadora de álgebra raster.\n\nProgramas para datos vectoriales\n\nogrinfo: despliega información sobre un conjunto de datos vectorial.\nogr2ogr: realiza conversiones en conjuntos de datos vectoriales (ej. filtros, reproyecciones).\nogrmerge.py: une varios conjuntos de datos raster en uno solo.\nogr_layer_algebra.py: realiza operaciones de álgebra vectorial.\n\nLos programas se ejecutan escribiendo el nombre del programa y un conjunto de opciones que especifican, entre otros aspectos, la ubicación de los datos de entrada, de salida y las transformaciones a realizar. Por ejemplo, el siguiente comando convierte un archivo en formato ESRI Shapefile a GeoJSON y lo reproyecta de CRTM05 a WGS84:\nogrinfo -s_srs EPSG:5367 -t_srs EPSG:4326 provincias.geojson provincias.shp\n\n3.4.1 Comandos básicos del sistema operativo\nLa siguiente lista presenta algunos comandos básicos de sistemas operativos.\n\n3.4.1.1 Windows\n\n\n\n\n\n\nComando\n\n\nDescripción\n\n\nEjemplos\n\n\n\n\n\n\ndir\n\n\nListado de contenidos de un directorio\n\n\ndirdir /wdir /p\n\n\n\n\ncd\n\n\nCambio de directorio\n\n\ncd gf0604\\ejemplos-gdalcd c:\\gf0604\\ejemplos-gdal\n\n\n\n\ncd ..\n\n\nCambio al directorio padre\n\n\ncd ..\n\n\n\n\ncd \\\n\n\nCambio al directorio raíz\n\n\ncd \\\n\n\n\n\nmkdir\n\n\nCreación de un directorio\n\n\nmkdir mi-directorio\n\n\n\n\nrmdir\n\n\nBorrado de un directorio\n\n\nrmdir /s mi-directorio\n\n\n\n\ntype\n\n\nDespliegue de los contenidos de un archivo de texto\n\n\ntype mi-archivo.txt\n\n\n\n\ndel\n\n\nBorrado de un archivo\n\n\ndel mi-archivo.txt\n\n\n\n\n> salida.txt\n\n\nRedireccionamiento de la salida\n\n\ndir /b > directorio.txt\n\n\n\n\ncls\n\n\nBorrado de la pantalla\n\n\ncls\n\n\n\n\n\n\n\n\n3.4.2 Instalación\nEn el sitio web de GDAL se describen varias opciones para la descarga e instalación de los programas para la línea de comandos del sistema operativo, incluyendo archivos binarios ejecutables para varias plataformas.\nEn el caso del sistema operativo Windows, estos programas se incluyen en la aplicación OSGeo4W, la cual puede instalarse junto con el sistema de información geográfica de escritorio QGIS. Se recomienda usar el instalador de red OSGeo4W. Una vez finalizada la instalación, verifique que cuenta con la aplicación OSGeo4W Shell para ejecutar los programas desde la línea de comandos del sistema operativo.\n\n\n3.4.3 Opciones comunes\nLos programas de GDAL comparten una serie de opciones comunes para datos raster y de opciones comunes para datos vectoriales que pueden visualizarse con la opción -- help-general. Por ejemplo:\nogrinfo --help-general\nGeneric GDAL utility command options:\n  --version: report version of GDAL in use.\n  --license: report GDAL license info.\n  --formats: report all configured format drivers.\n  --format [format]: details of one format.\n  --optfile filename: expand an option file into the argument list.\n  --config key value: set system configuration option.\n  --debug [on/off/value]: set debug level.\n  --pause: wait for user input, time to attach debugger\n  --locale [locale]: install locale for debugging (i.e. en_US.UTF-8)\n  --help-general: report detailed help on general options.\nPara obtener ayuda acerca de un comando particular, puede usarse la opción -- help. Por ejemplo:\nogrinfo --help\nUsage: ogrinfo [--help-general] [-ro] [-q] [-where restricted_where|@filename]\n               [-spat xmin ymin xmax ymax] [-geomfield field] [-fid fid]\n               [-sql statement|@filename] [-dialect sql_dialect] [-al] [-rl] [-so] [-fields={YES/NO}]\n               [-geom={YES/NO/SUMMARY}] [[-oo NAME=VALUE] ...]\n               [-nomd] [-listmdd] [-mdd domain|`all`]*\n               [-nocount] [-noextent] [-nogeomtype] [-wkt_format WKT1|WKT2|...]\n               [-fielddomain name]\n               datasource_name [layer [layer ...]]\n\n\n3.4.4 Ejemplos de uso\nEn esta sección, se presentan ejemplos de uso de los programas, tanto para datos vectoriales como para datos raster.\n\n3.4.4.1 Programas para datos vectoriales\n\n3.4.4.1.1 ogrinfo\nEl programa ogrinfo despliega información acerca de una fuente de datos vectoriales.\nLos siguientes comandos despliegan información sobre la capa de países de Natural Earth, tanto para el formato comprimido (ZIP) como para el formato shapefile (SHP). En el caso comprimido, note el uso del prefijo /vsizip/, para sistemas de archivos virtuales.\n\nCree un nuevo directorio (ej. ejemplos-gdal) para almacenar los archivos con los que trabajará.\nDescargue en el nuevo directorio la capa de paises desde la dirección https://www.naturalearthdata.com/http//www.naturalearthdata.com/download/110m/cultural/ne_110m_admin_0_countries.zip.\nDescomprima el archivo ZIP (no lo borre).\nCon una herramienta de escritorio (ej. QGIS), visualice tanto el archivo ZIP como el SHP.\nDesde una interfaz de línea de comandos (ej. OSGeo4W Shell), ubíquese en el directorio que creó y ejecute los siguientes comandos para obtener información sobre ambos archivos:\n\n# Información sobre la capa descomprimida en formato shapefile\nogrinfo -al -so ne_110m_admin_0_countries.shp\n\n# Información sobre la capa comprimida en formato ZIP\nogrinfo -al -so /vsizip/ne_110m_admin_0_countries.zip\n¿Qué información despliegan ambos comandos? ¿Qué efectos produce el uso de las opciones -al y -so? Revise la documentación sobre estas opciones y pruebe los comandos omitiendo cada una y ambas.\n\nFiltre los registros con expresiones lógicas (booleanas).\n\n# Registros (países y otros territorios) del continente 'Oceania' (se omite el campo de la geometría)\nogrinfo -al -where \"CONTINENT='Oceania'\" -geom=NO ne_110m_admin_0_countries.shp\n\n# Registros de Oceanía de tipo país ('Country')\nogrinfo -al -where \"CONTINENT='Oceania' AND TYPE='Country'\" -geom=NO ne_110m_admin_0_countries.shp\nNote el uso del operador AND (y), el cuál es un operador lógico, como también lo son el OR (o) y el NOT (no).\n\nAplique los filtros anteriores desde la interfaz de QGIS y compare las ventajas y desventajas de cada enfoque.\n\n\n\n3.4.4.1.2 ogr2ogr\nEl programa ogr2ogr realiza conversiones entre formatos de fuentes de datos vectoriales. A la vez, puede ejecutar otras operaciones como selección de atributos y geometrías, filtrado por criterios espaciales y no espaciales, reproyección y validación de geometrías, entre otras.\n\nDespliegue la lista de formatos (drivers) vectoriales soportados por OGR:\n\n# Despliegue de la lista de formatos vectoriales soportados por GDAL/OGR\nogr2ogr --formats\nSupported Formats:\n  FITS -raster,vector- (rw+): Flexible Image Transport System\n  PCIDSK -raster,vector- (rw+v): PCIDSK Database File\n  netCDF -raster,multidimensional raster,vector- (rw+vs): Network Common Data Format\n  PDS4 -raster,vector- (rw+vs): NASA Planetary Data System 4\n  VICAR -raster,vector- (rw+v): MIPL VICAR file\n  JP2OpenJPEG -raster,vector- (rwv): JPEG-2000 driver based on OpenJPEG library\n  PDF -raster,vector- (rw+vs): Geospatial PDF\n  MBTiles -raster,vector- (rw+v): MBTiles\n  BAG -raster,multidimensional raster,vector- (rw+v): Bathymetry Attributed Grid\n  EEDA -vector- (ro): Earth Engine Data API\n  OGCAPI -raster,vector- (rov): OGCAPI\n  ESRI Shapefile -vector- (rw+v): ESRI Shapefile\n...\n\nEjecute los siguientes comandos para convertir la capa de países (en SHP) a otros formatos y cambiar su nombre:\n\n# Conversión de SHP a GeoJSON\nogr2ogr paises.geojson ne_110m_admin_0_countries.shp\n\n# Conversión de SHP a GeoPackage\nogr2ogr paises.gpkg ne_110m_admin_0_countries.shp\n\nDespliegue la lista de capas en el servicio WFS del Sistema Nacional de Áreas de Conservación (Sinac):\n\n# Lista de capas en el servicio WFS del Sinac\nogrinfo WFS:\"http://geos1pne.sirefor.go.cr/wfs\"\nINFO: Open of `WFS:http://geos1pne.sirefor.go.cr/wfs'\n      using driver `WFS' successful.\nMetadata:\n  ABSTRACT=Servicio de mapas de Patrimonio Natural del Estado.\n  PROVIDER_NAME=The ancient geographes INC\n  TITLE=PNE Web Map Service\n1: PNE:bosque_decidio (title: Bosque Deciduo)\n2: PNE:bosque_maduro (title: Bosque Maduro)\n3: PNE:bosque_secundario (title: Bosque Secundario)\n4: PNE:bosque_palmas (title: Bosque de Palmas)\n5: PNE:corredoresbiologicos (title: Corredores Biológicos)\n6: PNE:patrimonio_natural_del_estado (title: Patrimonio Natural del Estado)\n7: PNE:registro_nacional_humedales (title: Registro Nacional de Humedales)\n8: PNE:areas_silvestres_protegidas (title: Áreas Silvestres Protegidas)\n9: PNE:areas_conservacion (title: Áreas de Conservación)\n\nDescargue la capa de áreas silvestres protegidas (ASP) del servicio WFS del Sinac en formato GeoPackage:\n\n# Descarga y validación de geometrías\nogr2ogr -makevalid asp.gpkg WFS:\"http://geos1pne.sirefor.go.cr/wfs\" \"PNE:areas_silvestres_protegidas\"\n\n# Descarga, validación de geometrías y reproyección a WGS84\nogr2ogr -t_srs EPSG:4326 -makevalid asp-wgs84.gpkg WFS:\"http://geos1pne.sirefor.go.cr/wfs\" \"PNE:areas_silvestres_protegidas\"\n\n\n\n3.4.4.2 Programas para datos raster\n\n3.4.4.2.1 gdalinfo\nEl programa gdalinfo despliega información acerca de una fuente de datos raster.\nLos siguientes comandos trabajan con la capa global de altitud de la base de datos climática WorldClim.\n\nDescargue en su directorio de trabajo la capa de altitud, con resolución de 30 segundos. Si la descarga toma demasiado tiempo, puede utilizar otras resoluciones: 2.5 min, 5 min o 10 min.\nDescomprima el archivo ZIP.\nCon una herramienta de escritorio (ej. QGIS), visualice la capa descomprimida.\nDesde una interfaz de línea de comandos (ej. OSGeo4W Shell), ubíquese en su directorio de trabajo y ejecute los siguientes comandos para obtener información sobre la capa:\n\n# Información sobre la capa\ngdalinfo -stats wc2.1_30s_elev.tif\nDriver: GTiff/GeoTIFF\nFiles: wc2.1_30s_elev.tif\nSize is 43200, 21600\nCoordinate System is:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\nData axis to CRS axis mapping: 2,1\nOrigin = (-180.000000000000000,90.000000000000000)\nPixel Size = (0.008333333333333,-0.008333333333333)\nMetadata:\n  AREA_OR_POINT=Area\nImage Structure Metadata:\n  COMPRESSION=DEFLATE\n  INTERLEAVE=BAND\nCorner Coordinates:\nUpper Left  (-180.0000000,  90.0000000) (180d 0' 0.00\"W, 90d 0' 0.00\"N)\nLower Left  (-180.0000000, -90.0000000) (180d 0' 0.00\"W, 90d 0' 0.00\"S)\nUpper Right ( 180.0000000,  90.0000000) (180d 0' 0.00\"E, 90d 0' 0.00\"N)\nLower Right ( 180.0000000, -90.0000000) (180d 0' 0.00\"E, 90d 0' 0.00\"S)\nCenter      (   0.0000000,   0.0000000) (  0d 0' 0.01\"E,  0d 0' 0.01\"N)\nBand 1 Block=43200x1 Type=Int16, ColorInterp=Gray\n  Min=-415.000 Max=8424.000 \n  Minimum=-415.000, Maximum=8424.000, Mean=nan, StdDev=nan\n  NoData Value=-32768\n  Metadata:\n    STATISTICS_MAXIMUM=8424\n    STATISTICS_MEAN=1.#SNAN\n    STATISTICS_MINIMUM=-415\n    STATISTICS_STDDEV=1.#SNAN\n\n\n3.4.4.2.2 gdalwarp\nEl programa gdalwarp se utiliza para reproyectar y transformar datos raster.\n\nRecorte la capa raster de altitud global con el contorno de la capa de cantones de Costa Rica y reproyección a CRTM05:\n\n# Recorte de la capa raster de altitud global con el contorno de la capa de cantones de Costa Rica\ngdalwarp -dstnodata -9999 -tr 0.00833333 0.00833333 -q -cutline cantones-wgs84.gpkg -crop_to_cutline wc2.1_30s_elev.tif altitud-cr-wgs84.tif\n\n# Información sobre la capa de altitud de Costa Rica\ngdalinfo -stats altitud-cr-wgs84.tif\n\n# Reproyección a CRTM05\ngdalwarp -s_srs EPSG:4326 -t_srs EPSG:5367 altitud-cr-wgs84.tif altitud-cr-crtm05.tif\n\n\n3.4.4.2.3 gdaldem\nEl programa gdaldem contiene un conjunto de herramientas para visualizar y analizar modelos digitales de elevación (DEM, en inglés, Digital Elevation Model).\n\nCree un mapa con efecto de relieve (hillshade) a partir de la capa de altitud de Costa Rica en el sistema de coordenadas WGS84.\n\n# Mapa hillshade\ngdaldem hillshade altitud-cr-wgs84.tif altitud-cr-wgs84-hillshade.tif -s 111120\nEl resultado se muestra en la Figura 3.1.\n\n\n\n\n\nFigura 3.1: Mapa de Costa Rica con efecto de relieve (hillshade).\n\n\n\n\n\nCree un mapa con efecto de relieve (hillshade) multidireccional a partir de la capa de altitud de Costa Rica en el sistema de coordenadas WGS84.\n\n# Mapa hillshade multidireccional\ngdaldem hillshade altitud-cr-wgs84.tif altitud-cr-wgs84-hillshade-multidireccional.tif -s 111120 -multidirectional\nEl resultado se muestra en la Figura 3.2.\n\n\n\n\n\nFigura 3.2: Mapa de Costa Rica con efecto de relieve (hillshade) multidireccional.\n\n\n\n\n\nCree un mapa coloreado de relieve a partir de la capa de altitud de Costa Rica en el sistema de coordenadas WGS84.\n\n\nCree un archivo llamado colores.txt con el siguiente contenido:\n\nnv,255,255,255\n500,101,146,82\n1000,190,202,130\n1500,241,225,145\n2000,244,200,126\n2500,197,147,117\n3000,204,169,170\n4000,251,238,253\nLas columnas del archivo corresponden a altitud, rojo, verde, azul.\n\nEjecute el siguiente comando:\n\n# Mapa coloreado de relieve\ngdaldem color-relief altitud-cr-wgs84.tif colores.txt altitud-cr-wgs84-colores.tif\nEl resultado se muestra en la Figura 3.3.\n\n\n\n\n\nFigura 3.3: Mapa coloreado de relieve de Costa Rica."
  },
  {
    "objectID": "03-gdal.html#ejercicios",
    "href": "03-gdal.html#ejercicios",
    "title": "3  GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos",
    "section": "3.5 Ejercicios",
    "text": "3.5 Ejercicios\n\n3.5.1 Datos vectoriales\n\nDe la capa de países de Natural Earth, extraiga los registros con población estimada superior a mil millones. En la capa resultante, incluya solamente los campos de nombre del país en español y población estimada. ¿Cuál opción debe utilizar para especificar los campos que desea incluir en el archivo de salida?\nDe la capa de ASP de Costa Rica, extraiga en un archivo GeoJSON las ASP del Área de Conservación Central.\nDe la capa de ASP de Costa Rica, extraiga en un archivo GeoJSON las ASP terrestres con área mayor o igual a 1000 km2.\nDe la capa de ASP de Costa Rica, extraiga en un archivo GeoJSON las ASP terrestres con área mayor o igual a 500 km2 del Área de Conservación Central.\nDe la capa de ASP de Costa Rica, extraiga en un archivo GeoJSON las ASP terrestres con área mayor o igual a 500 km2 de las áreas de conservación Central, Tortuguero y Osa.\nDe la capa de ASP de Costa Rica, extraiga en un archivo GeoPackage, las ASP del Área de Conservación Guanacaste, excepto el Parque Nacional Santa Rosa.\n\n\n\n3.5.2 Datos raster\n\nRecorte la capa de altitud de Costa Rica de acuerdo con el contorno de la provincia de Limón y extraiga el resultado en nuevo archivo GeoTIFF.\nGenere un mapa con efecto de relieve (hillshade) para la provincia de Limón. 3- Genere un mapa coloreado de relieve para la provincia de Limón."
  },
  {
    "objectID": "03-gdal.html#recursos-de-interés",
    "href": "03-gdal.html#recursos-de-interés",
    "title": "3  GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos",
    "section": "3.6 Recursos de interés",
    "text": "3.6 Recursos de interés\nCodecademy. (s. f.). Command Line Tutorial: Learn The Command Line. Codecademy. Recuperado 19 de marzo de 2022, de https://www.codecademy.com/learn/learn-the-command-line\nSS64 Command line reference. (s. f.). Recuperado 3 de abril de 2022, de https://ss64.com/"
  },
  {
    "objectID": "04-reproducibilidad.html",
    "href": "04-reproducibilidad.html",
    "title": "4  Reproducibilidad",
    "section": "",
    "text": "Un análisis realizado por un investigador se considera reproducible si el código fuente y los datos que utilizó para obtener los resultados están disponibles y son suficientes para que otro investigador, trabajando de manera independiente, pueda llegar al mismo resultado. El concepto de reproducibilidad es cada vez más importante debido al aumento exponencial de datos y al empleo de la programación de computadoras por parte de especialistas de diversas disciplinas."
  },
  {
    "objectID": "04-reproducibilidad.html#introducción",
    "href": "04-reproducibilidad.html#introducción",
    "title": "4  Reproducibilidad",
    "section": "4.2 Introducción",
    "text": "4.2 Introducción\nEn general, la reproducibilidad es la capacidad de un ensayo o experimento de ser reproducido por otros. Más formalmente, en investigación cuantitativa, un análisis se considera reproducible si “el código fuente y los datos utilizados por un investigador para llegar a un resultado están disponibles y son suficientes para que otro investigador, trabajando de manera independiente, pueda llegar al mismo resultado” (Gandrud 2020).\nLa reproducibilidad, junto con la falsabilidad, es uno de los pilares del método científico. Sin embargo, en años recientes, se ha generado una creciente preocupación debido a que muchos estudios científicos publicados fallan las pruebas de reproducibilidad (véase, por ejemplo, The Excel Depression, de Paul Krugman, Growth in a Time of Debt), dando lugar a una crisis de reproducibilidad o replicabilidad en varias ciencias.\nEl concepto de reproducibilidad es cada vez más importante debido, entre otras razones, al aumento exponencial de datos disponibles y a la aplicación de la programación de computadoras, para procesar estos datos, por parte de especialistas de muchas disciplinas."
  },
  {
    "objectID": "04-reproducibilidad.html#reproducibilidad-en-ciencia-de-datos-geoespaciales",
    "href": "04-reproducibilidad.html#reproducibilidad-en-ciencia-de-datos-geoespaciales",
    "title": "4  Reproducibilidad",
    "section": "4.3 Reproducibilidad en ciencia de datos geoespaciales",
    "text": "4.3 Reproducibilidad en ciencia de datos geoespaciales\nAlex Singleton y otros autores (Singleton, Spielman, y Brunsdon 2016) han identificado los siguientes retos para la reproducibilidad en ciencia de datos geoespaciales:\n\nLos datos deben ser de dominio público y estar disponibles para los investigadores.\nEl software utilizado debe ser de código abierto (open source) y estar disponible para ser revisado.\nSiempre que sea posible, los flujos de trabajo deben ser públicos y con enlaces a los datos, software y métodos de análisis, junto con la documentación necesaria.\nEl proceso de revisión por pares (peer review process) y la publicación académica deben requerir la presentación de un modelo de flujo de trabajo e idealmente la disponibilidad de los materiales necesarios para la replicación.\nEn los casos en los que la reproducibilidad total no sea posible (ej. datos sensibles), los investigadores deben esforzarse por incluir todos los aspectos que puedan de un marco de trabajo abierto.\n\nEn general, el estándar mínimo de reproducibilidad requiere que los datos y el código fuente estén disponibles para otros investigadores (Peng 2011). Sin embargo, dependiendo de las circunstancias y recursos disponibles, existe todo un espectro de posibilidades, que se ilustra en la Figura 4.1.\n\n\n\n\n\nFigura 4.1: Espectro de reproducibilidad. Imagen de Anita Graser, basada en (Peng, 2001)."
  },
  {
    "objectID": "04-reproducibilidad.html#herramientas-para-facilitar-la-reproducibilidad",
    "href": "04-reproducibilidad.html#herramientas-para-facilitar-la-reproducibilidad",
    "title": "4  Reproducibilidad",
    "section": "4.4 Herramientas para facilitar la reproducibilidad",
    "text": "4.4 Herramientas para facilitar la reproducibilidad\nLa documentación es vital durante todo el ciclo de vida de una investigación reproducible. Se recomienda utilizar mecanismos estandarizados y abiertos como el lenguaje de marcado de hipertexto (HTML, en inglés, HyperText Markup Language) o Markdown, con los cuales pueden crearse documentos mediante editores de texto simples (i.e. no se requiere de software propietario), y exportables a varios formatos (ej. LaTeX, PDF).\nPara dar mantenimiento, tanto al código fuente como a la documentación, es necesario un sistema de control de versiones como Git, el cual permite llevar el registro de los cambios en archivos y también facilita el trabajo colaborativo al reunir las modificaciones hechas por varias personas. Git es usado en varias plataformas que comparten código fuente (ej. GitHub, GitLab) y que ofrecen servicios relacionados, como hospedaje de sitios web."
  },
  {
    "objectID": "04-reproducibilidad.html#recursos-de-interés",
    "href": "04-reproducibilidad.html#recursos-de-interés",
    "title": "4  Reproducibilidad",
    "section": "4.5 Recursos de interés",
    "text": "4.5 Recursos de interés\nBartomeus Lab. (2016). A reproducible workflow. https://www.youtube.com/watch?v=s3JldKoA0zw\nFOSS4G. (2021). FOSS4G2021—Open source for open spatial data science—Anita Graser. https://www.youtube.com/watch?v=ZjXb53pOor0\nKrugman, P. (2013). Opinion | The Excel Depression. The New York Times. https://www.nytimes.com/2013/04/19/opinion/krugman-the-excel-depression.html"
  },
  {
    "objectID": "04-reproducibilidad.html#referencias",
    "href": "04-reproducibilidad.html#referencias",
    "title": "4  Reproducibilidad",
    "section": "4.6 Referencias",
    "text": "4.6 Referencias\n\n\nGandrud, Christopher. 2020. Reproducible Research with\nR and RStudio. Third edition. The\nR Series. Boca Raton, FL: CRC Press.\n\n\nPeng, Roger D. 2011. “Reproducible Research in\nComputational Science.”\nScience 334 (6060): 1226–27. https://doi.org/10.1126/science.1213847.\n\n\nSingleton, Alex David, Seth Spielman, and Chris Brunsdon. 2016.\n“Establishing a Framework for Open\nGeographic Information Science.”\nInternational Journal of Geographical Information Science 30\n(8): 1507–21. https://doi.org/10.1080/13658816.2015.1137579."
  },
  {
    "objectID": "05-markdown.html",
    "href": "05-markdown.html",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "",
    "text": "Markdown es un lenguaje de marcado ligero ampliamente utilizado en comunicación científica, documentación de programas e investigación reproducible, entre otras aplicaciones. Incluye marcas para especificar aspectos de estructura, semántica y estilo de un documento. Se basa en texto simple y se convierte fácilmente a HTML, el lenguaje de marcado más utilizado en páginas web.\nMarkdown puede emplearse junto con lenguajes de programación (ej. R, Python) para así combinar texto con código fuente, el cual inserta en los documentos salidas como tablas, gráficos y mapas, entre otras. Esta forma de trabajo facilita la automatización y la reproducibilidad de una investigación."
  },
  {
    "objectID": "05-markdown.html#trabajo-previo",
    "href": "05-markdown.html#trabajo-previo",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.2 Trabajo previo",
    "text": "5.2 Trabajo previo\n\n5.2.1 Instalación de software\nPara la edición de código Markdown, en el contexto de la programación en R, se recomienda instalar:\n\nSistema base del lenguaje R (no es necesario para este capítulo, pero sí se utilizará más adelante)\nRStudio Desktop\n\nOpcionalmente, puede instalar Visual Studio Code u otro editor de código fuente.\n\n\n5.2.2 Tutoriales\n\nMarkdown Tutorial"
  },
  {
    "objectID": "05-markdown.html#introducción",
    "href": "05-markdown.html#introducción",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.3 Introducción",
    "text": "5.3 Introducción\nMarkdown es un lenguaje de marcado, creado en 2004 por John Gruber y Aaron Swartz. Las “marcas” se utilizan para especificar aspectos de la estructura (ej. títulos, encabezados), estilo (ej. negritas, itálicas) y semántica de un documento. Markdown se caracteriza por ser más sencillo de leer y de usar que otros lenguajes de marcado (ej. Lenguaje de Marcado de Hipertexto o HTML), por lo que se considera un lenguaje de marcado ligero.\nLos documentos escritos en Markdown pueden exportarse a una gran variedad de formatos (ej. HTML, DOC, PDF, LaTex) para ser usados en libros, presentaciones o páginas web, entre otros fines.\n\n5.3.1 Variaciones\nLas variaciones de Markdown, también llamadas flavors, son extensiones o modificaciones de la especificación original. Entre las más populares están:\n\nR Markdown: para el lenguaje R.\nQuarto: es la “siguiente generación” de R Markdown, con soporte para más lenguajes de programación (Python, Julia, Observable, R) y motores de procesamiento (Jupyter, Knitr), entre otras mejoras.\nPython Markdown: para el lenguaje Python.\nGitHub Flavored Markdown: para la plataforma GitHub.\nPandoc’s Markdown: para el programa Pandoc de conversión entre formatos.\nKramdown: para el lenguaje Ruby.\n\nPuede encontrarse una lista más extensa de variaciones de Markdown en Markdown Flavors."
  },
  {
    "objectID": "05-markdown.html#ejemplo-de-documento",
    "href": "05-markdown.html#ejemplo-de-documento",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.4 Ejemplo de documento",
    "text": "5.4 Ejemplo de documento\nEl siguiente es un ejemplo de la sintaxis de Markdown, con marcas para un encabezado, texto en negrita, texto en itálica, un hipervínculo y una imagen.\n\n### Los satélites galileanos\n\nSe llaman **satélites galileanos** los cuatro satélites\nde Júpiter descubiertos en 1610 por \n[Galileo Galilei](https://es.wikipedia.org/wiki/Galileo_Galilei): \n*Ío*, *Europa*, *Ganimedes* y *Calisto*. \nSon los más grandes de los satélites de Júpiter, \nsiendo visibles incluso con telescopios de baja potencia.\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Jupiter_and_the_Galilean_Satellites.jpg/168px-Jupiter_and_the_Galilean_Satellites.jpg)\n\n**Figura 1**. Los cuatro satélites galileanos, \nen una composición que compara sus tamaños con el tamaño de Júpiter. \nEn orden descendente, son *Ío*, *Europa*, *Ganimedes* y *Calisto*.\n\nY la siguiente es la manera en la que se visualiza el documento:\n\n\nLos satélites galileanos\nSe llaman satélites galileanos los cuatro satélites de Júpiter descubiertos en 1610 por Galileo Galilei: Ío, Europa, Ganimedes y Calisto. Son los más grandes de los satélites de Júpiter, siendo visibles incluso con telescopios de baja potencia.\n\nFigura 1. Los cuatro satélites galileanos, en una composición que compara sus tamaños con el tamaño de Júpiter. En orden descendente, son Ío, Europa, Ganimedes y Calisto.\n\nEl contenido de este ejemplo fue tomado de Satélite galileano - Wikipedia, la enciclopedia libre."
  },
  {
    "objectID": "05-markdown.html#herramientas-para-escritura-de-documentos",
    "href": "05-markdown.html#herramientas-para-escritura-de-documentos",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.5 Herramientas para escritura de documentos",
    "text": "5.5 Herramientas para escritura de documentos\nMarkdown se escribe en “texto simple o plano” (i.e. texto sin formato, compuesto únicamente por caracteres que son legibles por humanos), por lo que puede escribirse con cualquier editor de texto. Se recomienda el uso de editores orientados a programación, también llamados editores de código fuente, los cuales proporcionan facilidades para el programador, como coloración de palabras clave, sangrado y autocompletado, entre otras.\nTambién pueden utilizarse Entornos Integrados de Desarrollo o IDE, los cuales son aplicaciones informáticas que proporcionan servicios integrales para facilitarle al programador el desarrollo de software. Además de un editor de código fuente, un IDE incluye funciones para depuración (i.e. identificación de errores), interpretación y compilación de programas, entre otras.\nAlgunos de los editores de código fuente o IDE recomendados para Markdown son:\n\nVisual Studio Code: editor de código fuente muy popular y de código abierto. Puede editar código de múltiples lenguajes de programación y sintaxis asociadas\nRStudio Desktop: IDE para desarrollo en el lenguaje de programación R, el cual también puede manejar código en otros lenguajes de programación y sintaxis.\n\nNo se recomienda el uso de procesadores de texto (ej. Microsoft Word, Libre Office Writer), debido a que introducen caracteres especiales que no son reconocidos por Markdown."
  },
  {
    "objectID": "05-markdown.html#sintaxis",
    "href": "05-markdown.html#sintaxis",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.6 Sintaxis",
    "text": "5.6 Sintaxis\nEn esta sección, se muestran los principales elementos de sintaxis de Markdown y sus salidas.\n\n\n\n5.6.1 Encabezados\nHay seis niveles de encabezados en Markdown, siendo el nivel 1 el de letras más grandes y el 6 el de letras más pequeñas. Se especifican mediante símbolos de numeral (#) antes del texto del encabezado (note el espacio entre el último signo de numeral y el inicio del texto).\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n# Encabezado de nivel 1\n\n\n\nEncabezado de nivel 1\n\n\n\n\n\n## Encabezado de nivel 2\n\n\n\nEncabezado de nivel 2\n\n\n\n\n\n### Encabezado de nivel 3\n\n\n\nEncabezado de nivel 3\n\n\n\n\n\n#### Encabezado de nivel 4\n\n\n\nEncabezado de nivel 4\n\n\n\n\n\n##### Encabezado de nivel 5\n\n\n\nEncabezado de nivel 5\n\n\n\n\n\n###### Encabezado de nivel 6\n\n\n\nEncabezado de nivel 6\n\n\n\n\n\nPara los encabezados de nivel 1 y nivel 2, existe una sintaxis alterna, con símbolos de igual (=====) o guiones (-----) bajo el texto del encabezado.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\nOtro encabezado de nivel 1 ==========================\n\n\n\n\nOtro encabezado de nivel 1\n\n\n\n\n\nOtro encabezado de nivel 2 --------------------------\n\n\n\nOtro encabezado de nivel 2\n\n\n\n\n\n\n\n5.6.2 Párrafos\nLos párrafos deben separarse mediante (al menos) una línea en blanco. Un simple cambio de línea no generará un nuevo párrafo.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\nEste es el texto que corresponde al primer párrafo de un documento.\nEste es el texto que corresponde al segundo párrafo de un documento.\n\n\nEste es el texto que corresponde al primer párrafo de un documento.\nEste es el texto que corresponde al segundo párrafo de un documento.\n\n\n\n\n\n\n5.6.3 Negrita\nHay dos sintaxis para especificar texto en negrita: con dos asteriscos (**) o con dos guiones bajos (__), antes y después del texto.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n**Texto en negrita**\n\n\nTexto en negrita\n\n\n\n\n__Otro texto en negrita__\n\n\nOtro texto en negrita\n\n\n\n\n\n\n5.6.4 Itálica\nHay dos sintaxis para especificar texto en itálica: con un asterisco (*) o con un guión bajo (_), antes y después del texto.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n*Texto en itálica*\n\n\nTexto en itálica\n\n\n\n\n_Otro texto en itálica_\n\n\nOtro texto en itálica\n\n\n\n\n\n\n5.6.5 Citas textuales\nSe especifican con un símbolo de “mayor que” (>) antes de cada línea.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n> *And on the pedestal these words appear:* > *\"My name is Ozymandias, king of kings:* > *Look on my works, ye Mighty, and despair!\"* *Percy Bysshe Shelley, \"Ozymandias\" (1818)*\n\n\n\n “And on the pedestal these words appear:”My name is Ozymandias, king of kings: Look on my works, ye Mighty, and despair!“ \n\nPercy Bysshe Shelley, “Ozymandias” (1818)\n\n\n\n\n\n\n5.6.6 Enlaces (hipervínculos)\nSe definen con paréntesis cuadrados ([]) seguidos de paréntesis redondos (()). En los paréntesis cuadrados se coloca (opcionalmente) el texto del enlace y en los redondos la dirección del documento al que conduce el enlace.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n[Proyecto Gutenberg](https://www.gutenberg.org/)\n\n\nProyecto Gutenberg\n\n\n\n\n\n\n5.6.7 Imágenes\nSe definen con un signo de admiración de cierre (!), paréntesis cuadrados ([]) y paréntesis redondos (()). En los paréntesis cuadrados se coloca (opcionalmente) un texto alternativo de la imagen y en los redondos la dirección de la imagen, ya sea local o remota.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n![Imagen local](img/Jupiter_and_the_Galilean_Satellites.jpg)\n\n\n\n\n\n\n\n![Imagen remota](https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Jupiter_and_the_Galilean_Satellites.jpg/168px-Jupiter_and_the_Galilean_Satellites.jpg)\n\n\n\n\n\n\n\n\n\n5.6.8 Listas numeradas\nSe definen con números (1. 2. 3. ...) antes de cada elemento.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n1. Primer elemento.\n2. Segundo elemento.\n3. Tercer elemento.\n\n\n\n\nPrimer elemento.\nSegundo elemento.\nTercer elemento.\n\n\n\n\n\n\n\n5.6.9 Listas no numeradas\nSe definen con guiones (-) o asteriscos (*) antes de cada elemento.\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\n- Un elemento.\n- Otro elemento.\n- Otro elemento más.\n\n\n\n\nUn elemento.\n\nOtro elemento.\n\nOtro elemento más.\n\n\n\n\n\n\n\n\n5.6.10 Ecuaciones\nLas ecuaciones se escriben con base en la sintaxis de LaTeX. Se delimitan (al inicio y al final) con:\n\nUn símbolo de dólar ($), para ecuaciones dentro de un renglón (inline math).\nDos símbolos de dólar ($$), para ecuaciones en su propio bloque (display math).\n\n\n\n\n\nSintaxis Markdown\n\n\nSalida\n\n\n\n\nEquivalencia entre masa y energía: $E = mc^{2}$\n\n\n\nEquivalencia entre masa y energía: \\(E = mc^{2}\\)\n\n\n\n\nEquivalencia entre masa y energía: $$E = mc^{2}$$\n\n\nEquivalencia entre masa y energía:\n\\[E = mc^{2}\\]\n\n\n\n\nPara más detalles sobre la sintaxis de ecuaciones, se recomienda consultar:\n\nWriting mathematical expressions - GitHub Docs\nLaTeX/Mathematics"
  },
  {
    "objectID": "05-markdown.html#ejercicios",
    "href": "05-markdown.html#ejercicios",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.7 Ejercicios",
    "text": "5.7 Ejercicios\n\nCon RStudio, cree un documento Markdown llamado README.md y escriba en este un breve curriculum académico o profesional.\n\nIncluya información como: nombre, fotografía, datos de contacto, áreas de interés, carrera, cursos aprobados, publicaciones, etc.\nPuede usar información ficticia (no incluya datos confidenciales o sensibles).\nEspecifique la fuente de las imágenes (y de cualquier otra información para la que sea necesario) y no utilice imágenes para las que no tiene autorización. Considere utilizar sitios con imágenes con licencias abiertas (ej. Wikimedia Commons, Unsplash, FreeImages).\nAsegúrese de utilizar los siguientes elementos de sintaxis Markdown:\n\nEncabezados de varios niveles.\nNegritas e itálicas.\nListas.\nEnlaces a sitios web.\nImágenes (al menos una local y una remota)."
  },
  {
    "objectID": "05-markdown.html#recursos-de-interés",
    "href": "05-markdown.html#recursos-de-interés",
    "title": "5  Markdown - lenguaje de marcado",
    "section": "5.8 Recursos de interés",
    "text": "5.8 Recursos de interés\nCarrera Arias, F. J. (2020). How to Install R on Windows, Mac OS X, and Ubuntu Tutorial. DataCamp Community. https://www.datacamp.com/community/tutorials/installing-R-windows-mac-ubuntu\nDaring Fireball: Markdown. (s. f.). Recuperado 25 de marzo de 2023, de https://daringfireball.net/projects/markdown/\nLaTeX/Mathematics—Wikibooks, open books for an open world. (s. f.). Recuperado 25 de marzo de 2023, de https://en.wikibooks.org/wiki/LaTeX/Mathematics\nMarkdown Guide. (s. f.). Recuperado 10 de abril de 2022, de https://www.markdownguide.org/\nQuarto—Markdown Basics. (s. f.). Recuperado 25 de marzo de 2023, de https://quarto.org/docs/authoring/markdown-basics.html\nWriting mathematical expressions. (s. f.). GitHub Docs. Recuperado 25 de marzo de 2023, de https://ghdocs-prod.azurewebsites.net/en/get-started/writing-on-github/working-with-advanced-formatting/writing-mathematical-expressions"
  },
  {
    "objectID": "06-git.html",
    "href": "06-git.html",
    "title": "6  Git - sistema de control de versiones",
    "section": "",
    "text": "Git es un sistema para administrar versiones de código fuente o, en general, de cualquier conjunto de archivos. Un sistema de administración de versiones permite recuperar versiones anteriores de los archivos e integrar modificaciones efectuadas por varias personas, entre otras capacidades. Git es utilizado en varios sitios que proveen servicios de alojamiento de software, incluído GitHub.\nGit puede utilizarse para sincronizar la versión local (i.e. en una computadora personal) de un conjunto de archivos, llamado proyecto o repositorio, con la versión que está alojada en un sistema remoto (ej. GitHub). Cada repositorio se almacena en un directorio (carpeta) del sistema operativo. La sincronización se realiza principalmente a través de las operaciones:\n\npush: para “subir” al repositorio remoto los cambios realizados en el repositorio local.\npull: para “bajar” al repositorio local los cambios realizados en el repositorio remoto.\n\nEl sistema Git cuenta con otras muchas operaciones, como commit, para guardar los cambios realizados."
  },
  {
    "objectID": "06-git.html#trabajo-previo",
    "href": "06-git.html#trabajo-previo",
    "title": "6  Git - sistema de control de versiones",
    "section": "6.2 Trabajo previo",
    "text": "6.2 Trabajo previo\n\n6.2.1 Instalación de software\nInstale en su computadora:\n\nGit\n\n\n\n6.2.2 Tutoriales\nAbba, I. V. (2021, noviembre 5). Git and GitHub Tutorial – Version Control for Beginners. FreeCodeCamp.Org. https://www.freecodecamp.org/news/git-and-github-for-beginners/\n\n\n6.2.3 Otros\nCree una cuenta gratuita en la plataforma de desarrollo colaborativo de software GitHub."
  },
  {
    "objectID": "06-git.html#introducción",
    "href": "06-git.html#introducción",
    "title": "6  Git - sistema de control de versiones",
    "section": "6.3 Introducción",
    "text": "6.3 Introducción\nGit es un sistema de control de versiones diseñado para “rastrear” cambios en el código fuente durante el proceso de desarrollo de software. Sin embargo, puede ser utilizado para llevar el control de los cambios en cualquier conjunto de archivos (ej. documentación, música).\nUn sistema de control de versiones proporciona, entre otras ventajas:\n\nLa capacidad de recuperar versiones anteriores de los archivos.\nLa capacidad de integrar modificaciones efectuadas por varias personas en el mismo conjunto de archivos.\nLa capacidad de mantener varias “ramas” (branches) de un producto (ej. “estable”, “evaluación”, “inestable”, como en el caso de Debian Linux, GRASS GIS y muchos otros proyectos de software libre).\nFacilidades para mantener redundancia y respaldos de los archivos (ej. Programa de respaldos de GitHub). Esta es una facilidad que implementan algunos servicios en la nube.\n\nGit fue diseñado por Linus Torvalds en 2005 durante del desarrollo del kernel del sistema operativo Linux. Se caracteriza por ser un sistema de control de versiones distribuido, lo que significa que el código fuente puede estar alojado en la estación de trabajo de cualquier miembro del equipo de desarrollo. No requiere un repositorio “central”, pero también puede trabajar de esa forma.\nEl protocolo de Git es utilizado en varios sitios que proveen servicios de alojamiento de software, entre los que están SourceForge, Bitbucket, GitLab y GitHub."
  },
  {
    "objectID": "06-git.html#funcionamiento-de-git",
    "href": "06-git.html#funcionamiento-de-git",
    "title": "6  Git - sistema de control de versiones",
    "section": "6.4 Funcionamiento de Git",
    "text": "6.4 Funcionamiento de Git\nDesde el punto de vista de un usuario de Git (ej. un programador), Git se utiliza para sincronizar la versión local (i.e. en una computadora personal) de un conjunto de archivos, llamado proyecto o repositorio, con la versión que está alojada en un sistema remoto (ej. GitHub). Cada repositorio se almacena en un directorio (carpeta) del sistema operativo. La sincronización se realiza principalmente a través de dos operaciones:\n\npush: para “subir” al repositorio remoto los cambios realizados en el repositorio local. Esta operación se realiza mediante el comando git push. Es probable que el sistema remoto le solicite al usuario algún tipo de autenticación (ej. nombre de usuario y clave).\npull: para “bajar” al repositorio local los cambios realizados en el repositorio remoto. Esta operación se realiza mediante el comando git pull.\n\nLas operaciones push y pull se ilustran en la Figura 6.1.\n\n\n\n\n\nFigura 6.1: Operaciones push y pull. Imagen de Melinda Higgins.\n\n\n\n\nAntes de un push, el usuario debe seleccionar los archivos que desea subir mediante el comando git add, el cual pasa los archivos a un “área de espera” (staging area). Luego debe usarse el comando git commit para “guardar” los cambios pendientes en el área de espera. Cada commit guarda el estado del conjunto de archivos en un momento específico (snapshot).\nLa relación entre estas operaciones de Git, se ilustra en la Figura 6.2.\n\n\n\n\n\nFigura 6.2: Operaciones de Git. Imagen de Steven Klavins.\n\n\n\n\nEn la Figura 6.3, se muestra el funcionamiento de Git mediante una comparación con el procesamiento de una compra en línea.\n\n\n\n\n\nFigura 6.3: Operaciones de Git y compras en línea. Imagen de Melinda Higgins.\n\n\n\n\nOtras operaciones de Git de uso frecuente son:\n\ngit config: para especificar opciones globales de la sesión de Git (ej. nombre del usuario, dirección de correo electrónico).\ngit init: para inicializar un repositorio git.\ngit clone: para clonar (i.e. copiar) un repositorio remoto en la computadora local.\ngit status: para revisar el estado de los archivos y, por ejemplo, saber cuales deben pasarse al área de espera.\ngit log: para revisar el historial de commits.\ngit show: para visualizar los cambios efectuados en los commits.\ngit reset: para regresar al estado correspondiente a un commit anterior."
  },
  {
    "objectID": "06-git.html#ejemplos-de-uso",
    "href": "06-git.html#ejemplos-de-uso",
    "title": "6  Git - sistema de control de versiones",
    "section": "6.5 Ejemplos de uso",
    "text": "6.5 Ejemplos de uso\n\n6.5.1 Clonación de un repositorio remoto y sincronización de los cambios efectuados localmente\nPara seguir este ejemplo:\n\nObtenga un token de GitHub en la siguiente opción de menú de su perfil de usuario: Settings - Developer settings - Personal access tokens - Tokens (classic) - Generate new token (classic). Ingrese una descripción y seleccione las operaciones de tipo “repo”. Presione Generate token. Copie el token en un lugar seguro, ya que lo necesitará para autenticarse en GitHub.\nRealice un fork a su cuenta en GitHub del repositorio localizado en la dirección https://github.com/gf0604-procesamientodatosgeograficos/2023-i-tutorial-git-repo-ejemplo. Obtendrá un repositorio llamado “https://github.com/[nombre-usuario]/2023-i-tutorial-git-repo-ejemplo”, en donde [nombre-usuario] es su nombre de usuario en GitHub.\nCon la opción File - New Project - Version Control - Git de RStudio, clone a su computadora el repositorio que acaba de bifurcar.\nCon el editor de RStudio, abra el archivo README.md, agregue una línea y guarde el archivo.\nLuego, ejecute los siguientes comandos desde la la ventana Terminal de RStudio para sincronizar el repositorio local y el repositorio remoto (las líneas que empiezan con # son comentarios).\n\n# a. Parámetros de configuración: nombre y dirección de correo del usuario.\n#    Debe cambiar [email-usuario] y [nombre-usuario] por sus propios datos, sin usar los [].\ngit config --global user.email [email-usuario]\ngit config --global user.name [nombre-usuario]\n# Para revisar los parámetros de configuración:\ngit config --global --list\n\n# b. Revisión de los archivos con modificaciones.\ngit status\n\n# c. Adición (add) de los archivos modificados al \"área de espera\".\n#    El punto (.) indica que se agregarán todos los archivos modificados.\ngit add .\n\n# d. Grabado (commit) del conjunto de archivos modificados,\n#    junto con un mensaje explicativo:\n#    Debe cambiar [comentario] por su propio comentario (ej. \"Agregar línea 2\"), sin usar los [].\ngit commit -m [comentario]\n\n# e. \"Subida\" (push) de las modificaciones al repositorio remoto.\n#    En este paso, es posible que deba utilizar su nombre de usuario/clave\n#    o su token de GitHub para autenticarse.\ngit push\n\nRevise los cambios aplicados en el repositorio remoto en GitHub.\nAgregue más líneas al archivo del repositorio local y sincronícelo con el remoto, realizando nuevamente los pasos del b al e para cada commit. Recuerde que los comentarios de cada commit deben reflejar los cambios que están siendo aplicados."
  },
  {
    "objectID": "06-git.html#ejercicios",
    "href": "06-git.html#ejercicios",
    "title": "6  Git - sistema de control de versiones",
    "section": "6.6 Ejercicios",
    "text": "6.6 Ejercicios\n\nCree un repositorio en GitHub (ej. currículum).\nClone el nuevo repositorio a su computadora.\nCopie al directorio del repositorio clonado el archivo README.md que creó en el capítulo anterior, con su currículum.\nSincronice ambos repositorios.\nPublique su curriculum como un sitio web en GitHub Pages, con la opción Settings - Pages. Elija la rama (branch) main y guarde los cambios. El sitio tomará algunos segundos para generarse.\nRealice cambios adicionales en su currículum y sincronícelos con el repositorio remoto."
  },
  {
    "objectID": "06-git.html#recursos-de-interés",
    "href": "06-git.html#recursos-de-interés",
    "title": "6  Git - sistema de control de versiones",
    "section": "6.7 Recursos de interés",
    "text": "6.7 Recursos de interés\nGit. (s. f.). Recuperado 28 de agosto de 2022, de https://git-scm.com/\nGitHub Archive Program. (s. f.). GitHub Archive Program. Recuperado 10 de abril de 2022, de https://archiveprogram.github.com/\nHiggins, M. (s. f.). Reproducible Templates for Analysis and Dissemination. Coursera. Recuperado 11 de abril de 2022, de https://www.coursera.org/learn/reproducible-templates-analysis\nKlavins, S. (2020). Version Control part 1. Medium. https://stevenklavins94.medium.com/version-control-part-1-c5f1b43127f6"
  },
  {
    "objectID": "parte-vi-evaluaciones.html",
    "href": "parte-vi-evaluaciones.html",
    "title": "Evaluaciones",
    "section": "",
    "text": "Examen corto 1"
  },
  {
    "objectID": "examen_corto-01.html",
    "href": "examen_corto-01.html",
    "title": "Examen corto 1",
    "section": "",
    "text": "Grupo 001: martes 28 de marzo de 2023\nGrupo 002: jueves 30 de marzo de 2023"
  },
  {
    "objectID": "examen_corto-01.html#temas-a-evaluar",
    "href": "examen_corto-01.html#temas-a-evaluar",
    "title": "Examen corto 1",
    "section": "Temas a evaluar",
    "text": "Temas a evaluar\n1 Pensamiento computacional, arquitectura de computadoras y lenguajes de programación\n2 Interacción humano-computadora\n3 GDAL - biblioteca para lectura y escritura de datos geoespaciales con interfaz de línea de comandos"
  }
]